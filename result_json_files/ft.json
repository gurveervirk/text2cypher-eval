[
    {
        "question": "Which 5 countries have the most filings as originators in the last quarter of any year?",
        "schema": "Node properties:\n- **Country**\n  - `location`: POINT \n  - `code`: STRING Example: \"AFG\"\n  - `name`: STRING Example: \"Afghanistan\"\n  - `tld`: STRING Example: \"AF\"\n- **Filing**\n  - `begin`: DATE_TIME Min: 2000-02-08T00:00:00Z, Max: 2017-09-05T00:00:00Z\n  - `end`: DATE_TIME Min: 2000-02-08T00:00:00Z, Max: 2017-11-03T00:00:00Z\n  - `originator_bank_id`: STRING Example: \"cimb-bank-berhad\"\n  - `sar_id`: STRING Example: \"3297\"\n  - `beneficiary_bank`: STRING Example: \"Barclays Bank Plc\"\n  - `filer_org_name_id`: STRING Example: \"the-bank-of-new-york-mellon-corp\"\n  - `originator_bank_country`: STRING Example: \"Singapore\"\n  - `beneficiary_bank_country`: STRING Example: \"United Kingdom\"\n  - `filer_org_name`: STRING Example: \"The Bank of New York Mellon Corp.\"\n  - `originator_iso`: STRING Example: \"SGP\"\n  - `beneficiary_bank_id`: STRING Example: \"barclays-bank-plc-london-england-gbr\"\n  - `origin_lat`: STRING Example: \"1.3667\"\n  - `origin_lng`: STRING Example: \"103.8\"\n  - `end_date_format`: STRING Example: \"2015-09-25T00:00:00Z\"\n  - `begin_date_format`: STRING Example: \"2015-03-25T00:00:00Z\"\n  - `originator_bank`: STRING Example: \"CIMB Bank Berhad\"\n  - `beneficiary_lat`: STRING Example: \"54\"\n  - `beneficiary_iso`: STRING Example: \"GBR\"\n  - `beneficiary_lng`: STRING Example: \"-2\"\n  - `begin_date`: STRING Example: \"Mar 25, 2015\"\n  - `id`: STRING Example: \"223254\"\n  - `end_date`: STRING Example: \"Sep 25, 2015\"\n  - `amount`: INTEGER Min: 1.18, Max: 2721000000\n  - `number`: INTEGER Min: 1, Max: 174\n- **Entity**\n  - `id`: STRING Example: \"the-bank-of-new-york-mellon-corp\"\n  - `location`: POINT \n  - `name`: STRING Example: \"The Bank of New York Mellon Corp.\"\n  - `country`: STRING Example: \"CHN\"\nRelationship properties:\n\nThe relationships:\n(:Filing)-[:BENEFITS]->(:Entity)\n(:Filing)-[:CONCERNS]->(:Entity)\n(:Filing)-[:ORIGINATOR]->(:Entity)\n(:Entity)-[:FILED]->(:Filing)\n(:Entity)-[:COUNTRY]->(:Country)",
        "gold_cypher": "MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country) WHERE (f.begin >= datetime({year: 2000, month: 10, day: 1}) AND f.begin <= datetime({year: 2000, month: 12, day: 31}))    OR (f.begin >= datetime({year: 2001, month: 10, day: 1}) AND f.begin <= datetime({year: 2001, month: 12, day: 31}))    OR (f.begin >= datetime({year: 2002, month: 10, day: 1}) AND f.begin <= datetime({year: 2002, month: 12, day: 31}))    OR (f.begin >= datetime({year: 2003, month: 10, day: 1}) AND f.begin <= datetime({year: 2003, month: 12, day: 31}))    OR (f.begin >= datetime({year: 2004, month: 10, day: 1}) AND f.begin <= datetime({year: 2004, month: 12, day: 31}))    OR (f.begin >= datetime({year: 2005, month: 10, day: 1}) AND f.begin <= datetime({year: 2005, month: 12, day: 31}))    OR (f.begin >= datetime({year: 2006, month: 10, day: 1}) AND f.begin <= datetime({year: 2006, month: 12, day: 31}))    OR (f.begin >= datetime({year: 2007, month: 10, day: 1}) AND f.begin <= datetime({year: 2007, month: 12, day: 31}))    OR (f.begin >= datetime({year: 2008, month: 10, day: 1}) AND f.begin <= datetime({year: 2008, month: 12, day: 31}))    OR (f.begin >= datetime({year: 2009, month: 10, day: 1}) AND f.begin <= datetime({year: 2009, month: 12, day: 31}))    OR (f.begin >= datetime({year: 2010, month: 10, day: 1}) AND f.begin <= datetime({year: 2010, month: 12, day: 31}))    OR (f.begin >= datetime({year: 2011, month: 10, day: 1}) AND f.begin <= datetime({year: 2011, month: 12, day: 31}))    OR (f.begin >= datetime({year: 2012, month: 10, day: 1}) AND f.begin <= datetime({year: 2012, month: 12, day: 31}))    OR (f.begin >= datetime({year: 2013, month: 10, day: 1}) AND f.begin <= datetime({year: 2013, month: 12, day: 31}))    OR (f.begin >= datetime({year: 2014, month: 10, day: 1}) AND f.begin <= datetime({year: 2014, month: 12, day: 31}))    OR (f.begin >= datetime({year: 2015, month: 10, day: 1}) AND f.begin <= datetime({year: 2015, month: 12, day: 31}))    OR (f.begin >= datetime({year: 2016, month: 10, day: 1}) AND f.begin <= datetime({year: 2016, month: 12, day: 31}))    OR (f.begin >= datetime({year: 2017, month: 10, day: 1}) AND f.begin <= datetime({year: 2017, month: 12, day: 31})) RETURN c.name AS country, COUNT(f) AS filings ORDER BY filings DESC LIMIT 5",
        "database": "fincen",
        "full_responses": [
            "```cypher\nMATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[r:COUNTRY]->(c:Country)\nWHERE f.begin >= '2023-04-01T00:00:00Z' AND f.end <= '2023-06-30T23:59:59Z'\nRETURN c.name AS country, COUNT(f) AS filing_count\nORDER BY filing_count DESC\nLIMIT 5\n```",
            "```\nMATCH (o:Entity)-[r:ORIGINATOR]->(f:Filing)\nWHERE r.begin >= '2023-01-01T00:00:00Z' AND r.begin <= '2023-03-31T23:59:59Z'\nRETURN o.country AS country, COUNT(o) AS filing_count\nORDER BY filing_count DESC\nLIMIT 5;\n```",
            "```\nMATCH (originator:Entity)-[filer:FILING]-(:Entity)-[concerned:CONCERNS]->(concerned_entity:Entity)-[originated:ORIGINATOR]->(originator_entity:Entity)-[concerned_concerned:CONCERNS]->(concerned_concerned_entity:Entity)-[concerned_originator:ORIGINATOR]->(concerned_originator_entity:Entity)-[concerned_concerned_concerned:CONCERNS]->(concerned_concerned_concerned_entity:Entity)-[concerned_originator_concerned:ORIGINATOR]->(concerned_originator_concerned_entity:Entity)-[concerned_originator_concerned_concerned:ORIGINATOR]->(concerned_originator_concerned_concerned_entity:Entity)-[concerned_originator_concerned_concerned_concerned:ORIGINATOR]->(concerned_originator_concerned_concerned_concerned_entity:Entity)-[concerned_originator_concerned_concerned_concerned_concerned:ORIGINATOR]->(concerned_originator_concerned_concerned_concerned_concerned_entity:Entity)-[concerned_originator_concerned_concerned_concerned_concerned_concerned:ORIGINATOR]->(concerned_originator_concerned_concerned_concerned_concerned_concerned_entity:Entity)-[concerned_originator_concerned_concerned_concerned_concerned_concerned_concerned:ORIGINATOR]->(concerned_originator_concerned_concerned_concerned_concerned_concerned_concerned_entity:Entity)-[concerned_originator_concerned_concerned_concerned_concerned_concerned_concerned_concerned:ORIGINATOR]->(concerned_originator_concerned_concerned_concerned_concerned_concerned_concerned_entity:Entity)-[concerned_originator_concerned_concerned_concerned_concerned_concerned_concerned_concerned:ORIGINATOR]->(concerned_originator_concerned_concerned_concerned_concerned_concerned_concerned_entity:Entity)-[concerned_originator_concerned_concerned_concerned_concerned_concerned_concerned_concerned:ORIGINATOR]->(concerned_originator_concerned_concerned_concerned_concerned_concerned_concerned_entity:Entity)-[concerned_originator_concerned_concerned_concerned_concerned_concerned_concerned_concerned:ORIGINATOR]->(concerned_originator_concerned_concerned_concerned_concerned_concerned_concerned_entity:Entity)-[concerned_originator_concerned_concerned_concerned_concerned_concerned_concerned_concerned:ORIGINATOR]->(concerned_originator_concerned_concerned_concerned_concerned_concerned_concerned_entity:Entity)-[concerned_originator_concerned_concerned_concerned_concerned_concerned_concerned_concerned:ORIGINATOR]->(concerned_originator_concerned_concerned_concerned_concerned_concerned_concerned_entity:Entity)-[concerned_originator_concerned_concerned_concerned_concerned_concerned_concerned_concerned:ORIGINATOR]->(concerned_originator_concerned_concerned_concerned_concerned_concerned_concerned_entity:Entity)-[concerned_originator_concerned_concerned_concerned_concerned_concerned_concerned_concerned:ORIGINATOR]->(concerned_originator_concerned_concerned_concerned_concerned_concerned_concerned_entity:Entity)-[concerned_originator_concerned_concerned_concerned_concerned_concerned_concerned_concerned:ORIGINATOR]->(concerned_originator_concerned_concerned_concerned_concerned_concerned_concerned_entity:Entity)-[concerned_originator_concerned_concerned_concerned_concerned_concerned_concerned_concerned:ORIGINATOR]->(concerned_originator_concerned_concerned_concerned_concerned_concerned_concerned_entity:Entity)-[concerned_originator_concerned_concerned_concerned_concerned_concerned_concerned_concerned:ORIGINATOR]->(concerned_originator_concerned_concerned_concerned",
            "MATCH (f:Filing)-[r:ORIGINATOR]->(e:Entity)-[c:COUNTRY]->(co:Country)\nWHERE f.end >= \"2017-07-01T00:00:00Z\" AND f.end <= \"2017-12-31T00:00:00Z\"\nRETURN co.name AS CountryName, COUNT(*) AS filingCount\nORDER BY filingCount DESC\nLIMIT 5",
            "MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country)\nWHERE f.begin >= '2017-07-01T00:00:00Z' AND f.end <= '2017-12-31T00:00:00Z'\nRETURN c.name AS Country, COUNT(f) AS filings\nORDER BY filings DESC\nLIMIT 5"
        ],
        "generated_cyphers": [
            "```cypher\nMATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[r:COUNTRY]->(c:Country)\nWHERE f.begin >= '2023-04-01T00:00:00Z' AND f.end <= '2023-06-30T23:59:59Z'\nRETURN c.name AS country, COUNT(f) AS filing_count\nORDER BY filing_count DESC\nLIMIT 5\n```",
            "```\nMATCH (o:Entity)-[r:ORIGINATOR]->(f:Filing)\nWHERE r.begin >= '2023-01-01T00:00:00Z' AND r.begin <= '2023-03-31T23:59:59Z'\nRETURN o.country AS country, COUNT(o) AS filing_count\nORDER BY filing_count DESC\nLIMIT 5;\n```",
            "```\nMATCH (originator:Entity)-[filer:FILING]-(:Entity)-[concerned:CONCERNS]->(concerned_entity:Entity)-[originated:ORIGINATOR]->(originator_entity:Entity)-[concerned_concerned:CONCERNS]->(concerned_concerned_entity:Entity)-[concerned_originator:ORIGINATOR]->(concerned_originator_entity:Entity)-[concerned_concerned_concerned:CONCERNS]->(concerned_concerned_concerned_entity:Entity)-[concerned_originator_concerned:ORIGINATOR]->(concerned_originator_concerned_entity:Entity)-[concerned_originator_concerned_concerned:ORIGINATOR]->(concerned_originator_concerned_concerned_entity:Entity)-[concerned_originator_concerned_concerned_concerned:ORIGINATOR]->(concerned_originator_concerned_concerned_concerned_entity:Entity)-[concerned_originator_concerned_concerned_concerned_concerned:ORIGINATOR]->(concerned_originator_concerned_concerned_concerned_concerned_entity:Entity)-[concerned_originator_concerned_concerned_concerned_concerned_concerned:ORIGINATOR]->(concerned_originator_concerned_concerned_concerned_concerned_concerned_entity:Entity)-[concerned_originator_concerned_concerned_concerned_concerned_concerned_concerned:ORIGINATOR]->(concerned_originator_concerned_concerned_concerned_concerned_concerned_concerned_entity:Entity)-[concerned_originator_concerned_concerned_concerned_concerned_concerned_concerned_concerned:ORIGINATOR]->(concerned_originator_concerned_concerned_concerned_concerned_concerned_concerned_entity:Entity)-[concerned_originator_concerned_concerned_concerned_concerned_concerned_concerned_concerned:ORIGINATOR]->(concerned_originator_concerned_concerned_concerned_concerned_concerned_concerned_entity:Entity)-[concerned_originator_concerned_concerned_concerned_concerned_concerned_concerned_concerned:ORIGINATOR]->(concerned_originator_concerned_concerned_concerned_concerned_concerned_concerned_entity:Entity)-[concerned_originator_concerned_concerned_concerned_concerned_concerned_concerned_concerned:ORIGINATOR]->(concerned_originator_concerned_concerned_concerned_concerned_concerned_concerned_entity:Entity)-[concerned_originator_concerned_concerned_concerned_concerned_concerned_concerned_concerned:ORIGINATOR]->(concerned_originator_concerned_concerned_concerned_concerned_concerned_concerned_entity:Entity)-[concerned_originator_concerned_concerned_concerned_concerned_concerned_concerned_concerned:ORIGINATOR]->(concerned_originator_concerned_concerned_concerned_concerned_concerned_concerned_entity:Entity)-[concerned_originator_concerned_concerned_concerned_concerned_concerned_concerned_concerned:ORIGINATOR]->(concerned_originator_concerned_concerned_concerned_concerned_concerned_concerned_entity:Entity)-[concerned_originator_concerned_concerned_concerned_concerned_concerned_concerned_concerned:ORIGINATOR]->(concerned_originator_concerned_concerned_concerned_concerned_concerned_concerned_entity:Entity)-[concerned_originator_concerned_concerned_concerned_concerned_concerned_concerned_concerned:ORIGINATOR]->(concerned_originator_concerned_concerned_concerned_concerned_concerned_concerned_entity:Entity)-[concerned_originator_concerned_concerned_concerned_concerned_concerned_concerned_concerned:ORIGINATOR]->(concerned_originator_concerned_concerned_concerned_concerned_concerned_concerned_entity:Entity)-[concerned_originator_concerned_concerned_concerned_concerned_concerned_concerned_concerned:ORIGINATOR]->(concerned_originator_concerned_concerned_concerned",
            "MATCH (f:Filing)-[r:ORIGINATOR]->(e:Entity)-[c:COUNTRY]->(co:Country)\nWHERE f.end >= \"2017-07-01T00:00:00Z\" AND f.end <= \"2017-12-31T00:00:00Z\"\nRETURN co.name AS CountryName, COUNT(*) AS filingCount\nORDER BY filingCount DESC\nLIMIT 5",
            "MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country)\nWHERE f.begin >= '2017-07-01T00:00:00Z' AND f.end <= '2017-12-31T00:00:00Z'\nRETURN c.name AS Country, COUNT(f) AS filings\nORDER BY filings DESC\nLIMIT 5"
        ]
    },
    {
        "question": "What are the details of entities that have an incorporation date in 2006?",
        "schema": "Node properties:\n- **Entity**\n  - `countries`: STRING Example: \"Hong Kong\"\n  - `ibcRUC`: STRING Example: \"25221\"\n  - `valid_until`: STRING Example: \"The Panama Papers data is current through 2015\"\n  - `country_codes`: STRING Example: \"HKG\"\n  - `service_provider`: STRING Available options: ['Appleby', 'Portcullis Trustnet', 'Mossack Fonseca', 'Commonwealth Trust Limited']\n  - `address`: STRING Example: \"ORION HOUSE SERVICES (HK) LIMITED ROOM 1401; 14/F.\"\n  - `inactivation_date`: STRING Example: \"18-FEB-2013\"\n  - `struck_off_date`: STRING Example: \"15-FEB-2013\"\n  - `status`: STRING Example: \"Defaulted\"\n  - `jurisdiction_description`: STRING Example: \"Samoa\"\n  - `incorporation_date`: STRING Example: \"23-MAR-2006\"\n  - `original_name`: STRING Example: \"TIANSHENG INDUSTRY AND TRADING CO., LTD.\"\n  - `jurisdiction`: STRING Example: \"SAM\"\n  - `name`: STRING Example: \"TIANSHENG INDUSTRY AND TRADING CO., LTD.\"\n  - `internal_id`: STRING Example: \"1001256\"\n  - `lastEditTimestamp`: STRING Example: \"1638311020926\"\n  - `node_id`: INTEGER Min: 10000001, Max: 10000005\n  - `sourceID`: STRING Example: \"Panama Papers\"\n  - `former_name`: STRING \n  - `company_type`: STRING \n  - `tax_stat_description`: STRING \n  - `note`: STRING \n  - `dorm_date`: STRING \n  - `type`: STRING \n  - `closed_date`: STRING \n  - `company_number`: STRING \n  - `comments`: STRING \n  - `entity_number`: STRING \n- **Intermediary**\n  - `countries`: STRING Example: \"South Africa\"\n  - `lastEditTimestamp`: STRING Example: \"1638311034131\"\n  - `address`: STRING Example: \"MICHAEL PAPAGEORGE; MR. 106 NICHOLSON STREET BROOK\"\n  - `valid_until`: STRING Example: \"The Panama Papers  data is current through 2015\"\n  - `country_codes`: STRING Example: \"ZAF\"\n  - `name`: STRING Example: \"MICHAEL PAPAGEORGE, MR.\"\n  - `status`: STRING Available options: ['UNRECOVERABLE ACCOUNTS', 'CLIENT IN REPRESENTATIVE TERRITORY', 'ACTIVE', 'INACTIVE', 'SUSPENDED', 'DELINQUENT', 'PROSPECT', 'SUSPENDED LEGAL', 'ACTIVE LEGAL']\n  - `node_id`: INTEGER Min: 11000001, Max: 11000005\n  - `sourceID`: STRING Available options: ['Pandora Papers - Alem\u00e1n, Cordero, Galindo & Lee (Alcogal)', 'Paradise Papers - Appleby', 'Paradise Papers - Barbados corporate registry', 'Bahamas Leaks', 'Panama Papers', 'Paradise Papers - Nevis corporate registry', 'Paradise Papers - Bahamas corporate registry', 'Offshore Leaks', 'Paradise Papers - Aruba corporate registry']\n  - `internal_id`: STRING Example: \"10001\"\n  - `registered_office`: STRING \n- **Officer**\n  - `valid_until`: STRING Example: \"The Panama Papers data is current through 2015\"\n  - `name`: STRING Example: \"KIM SOO IN\"\n  - `sourceID`: STRING Example: \"Panama Papers\"\n  - `icij_id`: STRING Example: \"E72326DEA50F1A9C2876E112AAEB42BC\"\n  - `node_id`: INTEGER Min: 12000001, Max: 12000005\n  - `lastEditTimestamp`: STRING Example: \"1638311034062\"\n  - `country_codes`: STRING Example: \"KOR\"\n  - `countries`: STRING Example: \"South Korea\"\n  - `note`: STRING \n- **Address**\n  - `original_address`: STRING Example: \"ANNEX FREDERICK & SHIRLEY STS, P. O. BOX N-4805 NA\"\n  - `lastEditTimestamp`: STRING Example: \"1638311020926\"\n  - `countries`: STRING Example: \"Bahamas\"\n  - `address`: STRING Example: \"ANNEX FREDERICK & SHIRLEY STS, P.O. BOX N-4805, NA\"\n  - `valid_until`: STRING Example: \"The Bahamas Leaks data is current through early 20\"\n  - `icij_id`: STRING Example: \"7C1AAD6896EFDED57D680B82E7ADF7AB\"\n  - `node_id`: INTEGER Min: 24000001, Max: 24000005\n  - `sourceID`: STRING Example: \"Bahamas Leaks\"\n  - `country_codes`: STRING Example: \"BHS\"\n  - `name`: STRING \n  - `addressID`: STRING \n  - `country_code`: STRING \n  - `country`: STRING \n- **Other**\n  - `lastEditTimestamp`: STRING Available options: ['1638311068329', '1638311074502', '1638311074946', '1638311075268', '1638311075503']\n  - `incorporation_date`: STRING Example: \"18-MAY-1983\"\n  - `struck_off_date`: STRING Example: \"31-DEC-2002\"\n  - `jurisdiction`: STRING Available options: ['AW']\n  - `jurisdiction_description`: STRING Available options: ['Aruba']\n  - `valid_until`: STRING Available options: ['Aruba corporate registry data is current through 2', 'Appleby data is current through 2014']\n  - `sourceID`: STRING Available options: ['Paradise Papers - Aruba corporate registry', 'Paradise Papers - Appleby']\n  - `name`: STRING Example: \"ANTAM ENTERPRISES N.V.\"\n  - `type`: STRING Available options: ['LIMITED LIABILITY COMPANY', 'SOLE OWNERSHIP', 'FOREIGN FORMED CORPORATION']\n  - `node_id`: INTEGER Min: 80000012, Max: 85050056\n  - `closed_date`: STRING Example: \"28-NOV-2012\"\n  - `note`: STRING Available options: ['Closed date stands for Cancelled date.', 'Closed date stands for Liquidation date.']\n  - `countries`: STRING Example: \"Bermuda;Isle of Man\"\n  - `country_codes`: STRING Example: \"BMU;IMN\"\nRelationship properties:\n- **registered_address**\n  - `link: STRING` Example: \"registered address\"\n  - `sourceID: STRING` Example: \"Panama Papers\"\n  - `valid_until: STRING` \n- **intermediary_of**\n  - `valid_until: STRING` Example: \"The Panama Papers data is current through 2015\"\n  - `sourceID: STRING` Example: \"Panama Papers\"\n  - `link: STRING` Example: \"intermediary of\"\n  - `end_date: STRING` \n  - `start_date: STRING` \n- **officer_of**\n  - `link: STRING` Example: \"shareholder of\"\n  - `valid_until: STRING` Example: \"The Panama Papers data is current through 2015\"\n  - `sourceID: STRING` Example: \"Panama Papers\"\n  - `start_date: STRING` Example: \"19-NOV-1999\"\n  - `end_date: STRING` Example: \"04-JUL-2000\"\n  - `status: STRING` \n- **similar**\n  - `link: STRING` Example: \"similar name and address as\"\n- **same_as**\n  - `link: STRING` Available options: ['same name and registration date as', 'same address as', 'same as']\n- **same_name_as**\n  - `sourceID: STRING` Example: \"Bahamas Leaks\"\n  - `link: STRING` Example: \"same name as\"\n  - `valid_until: STRING` Example: \"The Bahamas Leaks data is current through early 20\"\n- **same_company_as**\n  - `valid_until: STRING` Example: \"The Bahamas Leaks data is current through early 20\"\n  - `sourceID: STRING` Example: \"Bahamas Leaks\"\n  - `link: STRING` Example: \"same company as\"\n- **same_id_as**\n  - `sourceID: STRING` Available options: ['Paradise Papers - Malta corporate registry']\n  - `link: STRING` Available options: ['same id as']\n  - `valid_until: STRING` Available options: ['Malta corporate registry data is current through 2']\n- **connected_to**\n  - `valid_until: STRING` Example: \"Aruba corporate registry data is current through 2\"\n  - `link: STRING` Example: \"connected to\"\n  - `sourceID: STRING` Example: \"Paradise Papers - Aruba corporate registry\"\nThe relationships:\n(:Entity)-[:same_as]->(:Entity)\n(:Entity)-[:registered_address]->(:Address)\n(:Entity)-[:same_company_as]->(:Entity)\n(:Entity)-[:same_name_as]->(:Other)\n(:Entity)-[:same_name_as]->(:Entity)\n(:Intermediary)-[:intermediary_of]->(:Entity)\n(:Intermediary)-[:registered_address]->(:Address)\n(:Intermediary)-[:officer_of]->(:Entity)\n(:Intermediary)-[:similar]->(:Officer)\n(:Intermediary)-[:same_name_as]->(:Intermediary)\n(:Intermediary)-[:same_name_as]->(:Officer)\n(:Intermediary)-[:same_as]->(:Officer)\n(:Officer)-[:officer_of]->(:Entity)\n(:Officer)-[:officer_of]->(:Other)\n(:Officer)-[:registered_address]->(:Address)\n(:Officer)-[:similar]->(:Officer)\n(:Officer)-[:similar]->(:Intermediary)\n(:Officer)-[:same_name_as]->(:Officer)\n(:Officer)-[:connected_to]->(:Entity)\n(:Officer)-[:same_id_as]->(:Officer)\n(:Address)-[:same_as]->(:Address)\n(:Other)-[:registered_address]->(:Address)\n(:Other)-[:connected_to]->(:Entity)\n(:Other)-[:same_name_as]->(:Entity)\n(:Other)-[:same_name_as]->(:Officer)\n(:Other)-[:same_name_as]->(:Other)",
        "gold_cypher": "MATCH (e:Entity) WHERE e.incorporation_date CONTAINS '2006' RETURN e.name AS entity_name, e.countries AS countries, e.ibcRUC AS ibcRUC, e.valid_until AS valid_until,         e.country_codes AS country_codes, e.service_provider AS service_provider, e.address AS address,         e.inactivation_date AS inactivation_date, e.struck_off_date AS struck_off_date, e.status AS status,         e.jurisdiction_description AS jurisdiction_description, e.incorporation_date AS incorporation_date,         e.original_name AS original_name, e.jurisdiction AS jurisdiction, e.internal_id AS internal_id,         e.lastEditTimestamp AS lastEditTimestamp, e.node_id AS node_id, e.sourceID AS sourceID,         e.former_name AS former_name, e.company_type AS company_type, e.tax_stat_description AS tax_stat_description,         e.note AS note, e.dorm_date AS dorm_date, e.type AS type, e.closed_date AS closed_date,         e.company_number AS company_number, e.comments AS comments, e.entity_number AS entity_number",
        "database": "offshoreleaks",
        "full_responses": [
            "```cypher\nMATCH (entity:Entity {incorporation_date: '2006'})\nRETURN entity\n```",
            "```cypher\nMATCH (entity:Entity {incorporation_date: '2006'})\nRETURN entity\n```",
            "MATCH (e:Entity {incorporation_date: '2006'}) RETURN e",
            "MATCH (e:Entity {incorporation_date: \"2006\"}) RETURN e",
            "MATCH (e:Entity) WHERE e.incorporation_date = \"2006\" RETURN e"
        ],
        "generated_cyphers": [
            "```cypher\nMATCH (entity:Entity {incorporation_date: '2006'})\nRETURN entity\n```",
            "```cypher\nMATCH (entity:Entity {incorporation_date: '2006'})\nRETURN entity\n```",
            "MATCH (e:Entity {incorporation_date: '2006'}) RETURN e",
            "MATCH (e:Entity {incorporation_date: \"2006\"}) RETURN e",
            "MATCH (e:Entity) WHERE e.incorporation_date = \"2006\" RETURN e"
        ]
    },
    {
        "question": "What are the top 3 beneficiary banks by the number of filings involving transactions from Europe?",
        "schema": "Node properties:\n- **Country**\n  - `location`: POINT \n  - `code`: STRING Example: \"AFG\"\n  - `name`: STRING Example: \"Afghanistan\"\n  - `tld`: STRING Example: \"AF\"\n- **Filing**\n  - `begin`: DATE_TIME Min: 2000-02-08T00:00:00Z, Max: 2017-09-05T00:00:00Z\n  - `end`: DATE_TIME Min: 2000-02-08T00:00:00Z, Max: 2017-11-03T00:00:00Z\n  - `originator_bank_id`: STRING Example: \"cimb-bank-berhad\"\n  - `sar_id`: STRING Example: \"3297\"\n  - `beneficiary_bank`: STRING Example: \"Barclays Bank Plc\"\n  - `filer_org_name_id`: STRING Example: \"the-bank-of-new-york-mellon-corp\"\n  - `originator_bank_country`: STRING Example: \"Singapore\"\n  - `beneficiary_bank_country`: STRING Example: \"United Kingdom\"\n  - `filer_org_name`: STRING Example: \"The Bank of New York Mellon Corp.\"\n  - `originator_iso`: STRING Example: \"SGP\"\n  - `beneficiary_bank_id`: STRING Example: \"barclays-bank-plc-london-england-gbr\"\n  - `origin_lat`: STRING Example: \"1.3667\"\n  - `origin_lng`: STRING Example: \"103.8\"\n  - `end_date_format`: STRING Example: \"2015-09-25T00:00:00Z\"\n  - `begin_date_format`: STRING Example: \"2015-03-25T00:00:00Z\"\n  - `originator_bank`: STRING Example: \"CIMB Bank Berhad\"\n  - `beneficiary_lat`: STRING Example: \"54\"\n  - `beneficiary_iso`: STRING Example: \"GBR\"\n  - `beneficiary_lng`: STRING Example: \"-2\"\n  - `begin_date`: STRING Example: \"Mar 25, 2015\"\n  - `id`: STRING Example: \"223254\"\n  - `end_date`: STRING Example: \"Sep 25, 2015\"\n  - `amount`: INTEGER Min: 1.18, Max: 2721000000\n  - `number`: INTEGER Min: 1, Max: 174\n- **Entity**\n  - `id`: STRING Example: \"the-bank-of-new-york-mellon-corp\"\n  - `location`: POINT \n  - `name`: STRING Example: \"The Bank of New York Mellon Corp.\"\n  - `country`: STRING Example: \"CHN\"\nRelationship properties:\n\nThe relationships:\n(:Filing)-[:BENEFITS]->(:Entity)\n(:Filing)-[:CONCERNS]->(:Entity)\n(:Filing)-[:ORIGINATOR]->(:Entity)\n(:Entity)-[:FILED]->(:Filing)\n(:Entity)-[:COUNTRY]->(:Country)",
        "gold_cypher": "MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country) WHERE c.name IN [\"Albania\", \"Andorra\", \"Armenia\", \"Austria\", \"Azerbaijan\", \"Belarus\", \"Belgium\", \"Bosnia and Herzegovina\", \"Bulgaria\", \"Croatia\", \"Cyprus\", \"Czech Republic\", \"Denmark\", \"Estonia\", \"Finland\", \"France\", \"Georgia\", \"Germany\", \"Greece\", \"Hungary\", \"Iceland\", \"Ireland\", \"Italy\", \"Kazakhstan\", \"Kosovo\", \"Latvia\", \"Liechtenstein\", \"Lithuania\", \"Luxembourg\", \"Malta\", \"Moldova\", \"Monaco\", \"Montenegro\", \"Netherlands\", \"North Macedonia\", \"Norway\", \"Poland\", \"Portugal\", \"Romania\", \"Russia\", \"San Marino\", \"Serbia\", \"Slovakia\", \"Slovenia\", \"Spain\", \"Sweden\", \"Switzerland\", \"Turkey\", \"Ukraine\", \"United Kingdom\", \"Vatican City\"] RETURN f.beneficiary_bank AS BeneficiaryBank, COUNT(f) AS NumberOfFilings ORDER BY NumberOfFilings DESC LIMIT 3",
        "database": "fincen",
        "full_responses": [
            "MATCH (f:Filing)-[r:BENEFITS]->(e:Entity)\nWHERE e.location.country IN ['GB', 'DK', 'SE', 'NO', 'FI', 'IS', 'EE']\nRETURN e.name AS beneficiary_bank_name, COUNT(f) AS filing_count\nORDER BY filing_count DESC\nLIMIT 3",
            "MATCH (f:Filing)-[:BENEFITS]->(b:Entity)-[c:COUNTRY]->(co:Country)\nWHERE co.name = 'Europe'\nWITH f, b, count(*) AS numFilings\nORDER BY numFilings DESC\nLIMIT 3",
            "MATCH (e:Entity)-[r:CONCERNS]->(f:Filing)\nWHERE e.location.country = 'EU'\nWITH f ORDER BY f.number DESC LIMIT 3\nRETURN f.beneficiary_bank",
            "```cypher\nMATCH (f:Filing)-[b:BENEFITS]->(e:Entity)-[c:CONCERNS]->(eu:Country {country: \"Europe\"})\nWITH f, e, c, count(*) as filing_count\nWHERE eu.location.sphere = \"Europe\"\nRETURN e.name AS beneficiary_bank, filing_count\nORDER BY filing_count DESC\nLIMIT 3\n```",
            "MATCH (f:Filing)-[:BENEFITS]->(e:Entity)<-[r:FILED]-(f2:Filing)\nWHERE e.location.country = 'EU'\nRETURN e.beneficiary_bank AS bank_name, COUNT(f2) AS filing_count\nORDER BY filing_count DESC\nLIMIT 3"
        ],
        "generated_cyphers": [
            "MATCH (f:Filing)-[r:BENEFITS]->(e:Entity)\nWHERE e.location.country IN ['GB', 'DK', 'SE', 'NO', 'FI', 'IS', 'EE']\nRETURN e.name AS beneficiary_bank_name, COUNT(f) AS filing_count\nORDER BY filing_count DESC\nLIMIT 3",
            "MATCH (f:Filing)-[:BENEFITS]->(b:Entity)-[c:COUNTRY]->(co:Country)\nWHERE co.name = 'Europe'\nWITH f, b, count(*) AS numFilings\nORDER BY numFilings DESC\nLIMIT 3",
            "MATCH (e:Entity)-[r:CONCERNS]->(f:Filing)\nWHERE e.location.country = 'EU'\nWITH f ORDER BY f.number DESC LIMIT 3\nRETURN f.beneficiary_bank",
            "```cypher\nMATCH (f:Filing)-[b:BENEFITS]->(e:Entity)-[c:CONCERNS]->(eu:Country {country: \"Europe\"})\nWITH f, e, c, count(*) as filing_count\nWHERE eu.location.sphere = \"Europe\"\nRETURN e.name AS beneficiary_bank, filing_count\nORDER BY filing_count DESC\nLIMIT 3\n```",
            "MATCH (f:Filing)-[:BENEFITS]->(e:Entity)<-[r:FILED]-(f2:Filing)\nWHERE e.location.country = 'EU'\nRETURN e.beneficiary_bank AS bank_name, COUNT(f2) AS filing_count\nORDER BY filing_count DESC\nLIMIT 3"
        ]
    },
    {
        "question": "\"provide all exposed ports and the processes behind , for the ip '10.3.0.254', check multiple possible paths if the result is empty\"",
        "schema": "Node properties:\nDataCenter {name: STRING, location: STRING}\nRouter {name: STRING, zone: INTEGER}\nEgress {name: STRING}\nInterface {ip: STRING}\nNetwork {ip: STRING, size: INTEGER, zone: INTEGER}\nZone {ip: STRING, size: INTEGER, zone: INTEGER}\nRack {name: STRING, zone: INTEGER, rack: INTEGER}\nSwitch {ip: STRING, rack: INTEGER}\nType {id: INTEGER, type: STRING, ram: INTEGER, name: STRING, disk: INTEGER, cpu: INTEGER}\nMachine {name: STRING}\nSoftware {name: STRING, versions: LIST, ports: LIST, dependencies: LIST}\nOS {name: STRING, startTime: INTEGER}\nService {pid: INTEGER, name: STRING, startTime: INTEGER}\nApplication {name: STRING, startTime: INTEGER, pid: INTEGER}\nVersion {name: STRING}\nProcess {name: STRING, startTime: INTEGER, pid: INTEGER}\nPort {port: INTEGER}\nRelationship properties:\n\nThe relationships:\n(:DataCenter)-[:CONTAINS]->(:Rack)\n(:DataCenter)-[:CONTAINS]->(:Router)\n(:DataCenter)-[:CONTAINS]->(:Egress)\n(:Router)-[:ROUTES]->(:Interface)\n(:Egress)-[:ROUTES]->(:Interface)\n(:Interface)-[:EXPOSES]->(:Port)\n(:Interface)-[:CONNECTS]->(:Interface)\n(:Network)-[:ROUTES]->(:Interface)\n(:Zone)-[:ROUTES]->(:Interface)\n(:Rack)-[:HOLDS]->(:Machine)\n(:Rack)-[:HOLDS]->(:Switch)\n(:Switch)-[:ROUTES]->(:Interface)\n(:Machine)-[:RUNS]->(:OS)\n(:Machine)-[:RUNS]->(:Process)\n(:Machine)-[:RUNS]->(:Application)\n(:Machine)-[:RUNS]->(:Service)\n(:Machine)-[:ROUTES]->(:Interface)\n(:Machine)-[:TYPE]->(:Type)\n(:Software)-[:VERSION]->(:Version)\n(:Software)-[:DEPENDS_ON]->(:Version)\n(:Software)-[:DEPENDS_ON]->(:Software)\n(:Software)-[:DEPENDS_ON]->(:Application)\n(:Software)-[:DEPENDS_ON]->(:Service)\n(:OS)-[:INSTANCE]->(:Version)\n(:Service)-[:INSTANCE]->(:Software)\n(:Service)-[:INSTANCE]->(:Service)\n(:Service)-[:INSTANCE]->(:Application)\n(:Service)-[:INSTANCE]->(:Version)\n(:Service)-[:LISTENS]->(:Port)\n(:Application)-[:LISTENS]->(:Port)\n(:Application)-[:INSTANCE]->(:Software)\n(:Application)-[:INSTANCE]->(:Application)\n(:Application)-[:DEPENDS_ON]->(:Service)\n(:Application)-[:DEPENDS_ON]->(:Process)\n(:Version)-[:PREVIOUS]->(:Version)\n(:Process)-[:INSTANCE]->(:Software)\n(:Process)-[:INSTANCE]->(:Application)\n(:Process)-[:INSTANCE]->(:Version)\n(:Process)-[:INSTANCE]->(:Service)\n(:Process)-[:LISTENS]->(:Port)\n(:Process)-[:DEPENDS_ON]->(:Service)\n(:Process)-[:DEPENDS_ON]->(:Process)",
        "gold_cypher": "MATCH (i:Interface {ip: '10.3.0.254'})-[:EXPOSES]->(p:Port) OPTIONAL MATCH (i)<-[:ROUTES]-(:Router)-[:ROUTES]->(i2:Interface)-[:EXPOSES]->(p2:Port) OPTIONAL MATCH (i)<-[:ROUTES]-(:Egress)-[:ROUTES]->(i3:Interface)-[:EXPOSES]->(p3:Port) OPTIONAL MATCH (i)<-[:ROUTES]-(:Network)-[:ROUTES]->(i4:Interface)-[:EXPOSES]->(p4:Port) OPTIONAL MATCH (i)<-[:ROUTES]-(:Zone)-[:ROUTES]->(i5:Interface)-[:EXPOSES]->(p5:Port) OPTIONAL MATCH (i)<-[:ROUTES]-(:Switch)-[:ROUTES]->(i6:Interface)-[:EXPOSES]->(p6:Port) OPTIONAL MATCH (i)<-[:ROUTES]-(:Machine)-[:ROUTES]->(i7:Interface)-[:EXPOSES]->(p7:Port) WITH p, p2, p3, p4, p5, p6, p7 UNWIND [p, p2, p3, p4, p5, p6, p7] AS port MATCH (port)<-[:LISTENS]-(proc:Process) RETURN DISTINCT port.port AS ExposedPort, proc.name AS ProcessName, proc.pid AS ProcessID",
        "database": "network",
        "full_responses": [
            "```\nMATCH (n:Interface)-[r:EXPOSES]->(p:Port)\nWHERE n.ip = '10.3.0.254'\nRETURN p.port, (p)-[r2:RUNS]->(m:Machine)\n```",
            "```\nMATCH (e:Network {ip: '10.3.0.254'})<-[:ROUTES]-(i:Interface)-[:EXPOSES]->(p:Port)\nMATCH (e)-[:ROUTES]->(r:Router)\nMATCH (r)-[:ROUTES]->(i)\nMATCH (i)-[:CONNECTS]->(o:Interface)\nMATCH (o)-[:ROUTES]->(r)\nMATCH (r)-[:ROUTES]->(i)\nMATCH (i)-[:CONNECTS]->(o:Interface)\nMATCH (o)-[:ROUTES]->(r)\nMATCH (r)-[:ROUTES]->(i)\nMATCH (i)-[:CONNECTS]->(o:Interface)\nMATCH (o)-[:ROUTES]->(r)\nMATCH (r)-[:ROUTES]->(i)\nMATCH (i)-[:CONNECTS]->(o:Interface)\nMATCH (o)-[:ROUTES]->(r)\nMATCH (r)-[:ROUTES]->(i)\nMATCH (i)-[:CONNECTS]->(o:Interface)\nMATCH (o)-[:ROUTES]->(r)\nMATCH (r)-[:ROUTES]->(i)\nMATCH (i)-[:CONNECTS]->(o:Interface)\nMATCH (o)-[:ROUTES]->(r)\nMATCH (r)-[:ROUTES]->(i)\nMATCH (i)-[:CONNECTS]->(o:Interface)\nMATCH (o)-[:ROUTES]->(r)\nMATCH (r)-[:ROUTES]->(i)\nMATCH (i)-[:CONNECTS]->(o:Interface)\nMATCH (o)-[:ROUTES]->(r)\nMATCH (r)-[:ROUTES]->(i)\nMATCH (i)-[:CONNECTS]->(o:Interface)\nMATCH (o)-[:ROUTES]->(r)\nMATCH (r)-[:ROUTES]->(i)\nMATCH (i)-[:CONNECTS]->(o:Interface)\nMATCH (o)-[:ROUTES]->(r)\nMATCH (r)-[:ROUTES]->(i)\nMATCH (i)-[:CONNECTS]->(o:Interface)\nMATCH (o)-[:ROUTES]->(r)\nMATCH (r)-[:ROUTES]->(i)\nMATCH (i)-[:CONNECTS]->(o:Interface)\nMATCH (o)-[:ROUTES]->(r)\nMATCH (r)-[:ROUTES]->(i)\nMATCH (i)-[:CONNECTS]->(o:Interface)\nMATCH (o)-[:ROUTES]->(r)\nMATCH (r)-[:ROUTES]->(i)\nMATCH (i)-[:CONNECTS]->(o:Interface)\nMATCH (o)-[:ROUTES]->(r)\nMATCH (r)-[:ROUTES]->(i)\nMATCH (i)-[:CONNECTS]->(o:Interface)\nMATCH (o)-[:ROUTES]->(r)\nMATCH (r)-[:ROUTES]->(i)\nMATCH (i)-[:CONNECTS]->(o:Interface)\nMATCH (o)-[:ROUTES]->(r)\nMATCH (r)-[:ROUTES]->(i)\nMATCH (i)-[:CONNECTS]->(o:Interface)\nMATCH (o)-[:ROUTES]->(r)\nMATCH (r)-[:ROUTES]->(i)\nMATCH (i)-[:CONNECTS]->(o:Interface)\nMATCH (o)-[:ROUTES]->(r)\nMATCH (r)-[:ROUTES]->(i)\nMATCH (i)-[:CONNECTS]->(o:Interface)\nMATCH (o)-[:ROUTES]->(r)\nMATCH (r)-[:ROUTES]->(i)\nMATCH (i)-[:CONNECTS]->(o:Interface)\nMATCH (o)-[:ROUTES]->(r)\nMATCH (r)-[:ROUTES]->(i)\nMATCH (i)-[:CONNECTS]->(o:Interface)\nMATCH (o)-[:ROUTES]->(r)\nMATCH (r)-[:ROUTES]->(i)\nMATCH (i)-[:CONNECTS]->(o:Interface)\nMATCH (o)-[:ROUTES]->(r)\nMATCH (r)-[:ROUTES]->(i)\nMATCH (i)-[:CONNECTS]->(o:Interface)\nMATCH (o)-[:ROUTES]->(r)\nMATCH (r)-[:ROUTES]->(i)\nMATCH (i)-[:CONNECTS]->(o:Interface)\nMATCH (o)-[:ROUTES]->(r)\nMATCH (r)-[:ROUTES]->(i)\nMATCH (i)-[:CONNECTS]->(o:Interface)\nMATCH (o)-[:ROUTES]->(r)\nMATCH (r)-[:ROUTES]->(i)\nMATCH (i)-[:CONNECTS]->(o:Interface)\nMATCH (o)-[:ROUTES]->(r)\nMATCH (r)-[:ROUTES]->(i)\nMATCH (i)-[:CONNECTS]->(o:Interface)\nMATCH (o)-[:ROUTES]->(r)\nMATCH (r)-[:ROUTES]->(i)\nMATCH (i)-[:CONNECTS]->(o:Interface)\n",
            "MATCH (n:Interface)-[r:EXPOSES]->(p:Port) WHERE n.ip = '10.3.0.254'\nOPTIONAL MATCH (n:Machine)-[rr:ROUTES]->(n2:Interface) WHERE n2.ip = '10.3.0.254'\nOPTIONAL MATCH (n2)-[rr2:RUNS]->(m:OS)\nOPTIONAL MATCH (m)-[rr3:INSTANCE]->(s:Version)\nRETURN p.port, s.name",
            "```\nMATCH (e:Interface)-[r:EXPOSES]->(p:Port)-[s:RUNS]->(m:Machine)\nWHERE e.ip = '10.3.0.254'\nRETURN p.port, m.name AS processName\nUNION\nMATCH (e:Interface)-[r:EXPOSES]->(p:Port)-[s:RUNS]->(m:Machine)-[:RUNS]->(o:OS)-[:INSTANCE]->(v:Version)\nWHERE e.ip = '10.3.0.254'\nRETURN p.port, m.name AS processName, o.name AS OSName, v.name AS VersionName\nUNION\nMATCH (e:Interface)-[r:EXPOSES]->(p:Port)-[s:RUNS]->(m:Machine)-[:RUNS]->(s:Service)-[:INSTANCE]->(v:Version)\nWHERE e.ip = '10.3.0.254'\nRETURN p.port, m.name AS processName, s.name AS serviceName, v.name AS VersionName\nUNION\nMATCH (e:Interface)-[r:EXPOSES]->(p:Port)-[s:RUNS]->(m:Machine)-[:RUNS]->(a:Application)-[:INSTANCE]->(v:Version)\nWHERE e.ip = '10.3.0.254'\nRETURN p.port, m.name AS processName, a.name AS appName, v.name AS VersionName\n```",
            "MATCH (n:Interface)-[r:EXPOSES]->(p:Port)\nWHERE n.ip = '10.3.0.254'\nRETURN p.port AS exposed_port, n.name AS interface_name, r.process AS process_name"
        ],
        "generated_cyphers": [
            "```\nMATCH (n:Interface)-[r:EXPOSES]->(p:Port)\nWHERE n.ip = '10.3.0.254'\nRETURN p.port, (p)-[r2:RUNS]->(m:Machine)\n```",
            "```\nMATCH (e:Network {ip: '10.3.0.254'})<-[:ROUTES]-(i:Interface)-[:EXPOSES]->(p:Port)\nMATCH (e)-[:ROUTES]->(r:Router)\nMATCH (r)-[:ROUTES]->(i)\nMATCH (i)-[:CONNECTS]->(o:Interface)\nMATCH (o)-[:ROUTES]->(r)\nMATCH (r)-[:ROUTES]->(i)\nMATCH (i)-[:CONNECTS]->(o:Interface)\nMATCH (o)-[:ROUTES]->(r)\nMATCH (r)-[:ROUTES]->(i)\nMATCH (i)-[:CONNECTS]->(o:Interface)\nMATCH (o)-[:ROUTES]->(r)\nMATCH (r)-[:ROUTES]->(i)\nMATCH (i)-[:CONNECTS]->(o:Interface)\nMATCH (o)-[:ROUTES]->(r)\nMATCH (r)-[:ROUTES]->(i)\nMATCH (i)-[:CONNECTS]->(o:Interface)\nMATCH (o)-[:ROUTES]->(r)\nMATCH (r)-[:ROUTES]->(i)\nMATCH (i)-[:CONNECTS]->(o:Interface)\nMATCH (o)-[:ROUTES]->(r)\nMATCH (r)-[:ROUTES]->(i)\nMATCH (i)-[:CONNECTS]->(o:Interface)\nMATCH (o)-[:ROUTES]->(r)\nMATCH (r)-[:ROUTES]->(i)\nMATCH (i)-[:CONNECTS]->(o:Interface)\nMATCH (o)-[:ROUTES]->(r)\nMATCH (r)-[:ROUTES]->(i)\nMATCH (i)-[:CONNECTS]->(o:Interface)\nMATCH (o)-[:ROUTES]->(r)\nMATCH (r)-[:ROUTES]->(i)\nMATCH (i)-[:CONNECTS]->(o:Interface)\nMATCH (o)-[:ROUTES]->(r)\nMATCH (r)-[:ROUTES]->(i)\nMATCH (i)-[:CONNECTS]->(o:Interface)\nMATCH (o)-[:ROUTES]->(r)\nMATCH (r)-[:ROUTES]->(i)\nMATCH (i)-[:CONNECTS]->(o:Interface)\nMATCH (o)-[:ROUTES]->(r)\nMATCH (r)-[:ROUTES]->(i)\nMATCH (i)-[:CONNECTS]->(o:Interface)\nMATCH (o)-[:ROUTES]->(r)\nMATCH (r)-[:ROUTES]->(i)\nMATCH (i)-[:CONNECTS]->(o:Interface)\nMATCH (o)-[:ROUTES]->(r)\nMATCH (r)-[:ROUTES]->(i)\nMATCH (i)-[:CONNECTS]->(o:Interface)\nMATCH (o)-[:ROUTES]->(r)\nMATCH (r)-[:ROUTES]->(i)\nMATCH (i)-[:CONNECTS]->(o:Interface)\nMATCH (o)-[:ROUTES]->(r)\nMATCH (r)-[:ROUTES]->(i)\nMATCH (i)-[:CONNECTS]->(o:Interface)\nMATCH (o)-[:ROUTES]->(r)\nMATCH (r)-[:ROUTES]->(i)\nMATCH (i)-[:CONNECTS]->(o:Interface)\nMATCH (o)-[:ROUTES]->(r)\nMATCH (r)-[:ROUTES]->(i)\nMATCH (i)-[:CONNECTS]->(o:Interface)\nMATCH (o)-[:ROUTES]->(r)\nMATCH (r)-[:ROUTES]->(i)\nMATCH (i)-[:CONNECTS]->(o:Interface)\nMATCH (o)-[:ROUTES]->(r)\nMATCH (r)-[:ROUTES]->(i)\nMATCH (i)-[:CONNECTS]->(o:Interface)\nMATCH (o)-[:ROUTES]->(r)\nMATCH (r)-[:ROUTES]->(i)\nMATCH (i)-[:CONNECTS]->(o:Interface)\nMATCH (o)-[:ROUTES]->(r)\nMATCH (r)-[:ROUTES]->(i)\nMATCH (i)-[:CONNECTS]->(o:Interface)\nMATCH (o)-[:ROUTES]->(r)\nMATCH (r)-[:ROUTES]->(i)\nMATCH (i)-[:CONNECTS]->(o:Interface)\nMATCH (o)-[:ROUTES]->(r)\nMATCH (r)-[:ROUTES]->(i)\nMATCH (i)-[:CONNECTS]->(o:Interface)\nMATCH (o)-[:ROUTES]->(r)\nMATCH (r)-[:ROUTES]->(i)\nMATCH (i)-[:CONNECTS]->(o:Interface)\nMATCH (o)-[:ROUTES]->(r)\nMATCH (r)-[:ROUTES]->(i)\nMATCH (i)-[:CONNECTS]->(o:Interface)\nMATCH (o)-[:ROUTES]->(r)\nMATCH (r)-[:ROUTES]->(i)\nMATCH (i)-[:CONNECTS]->(o:Interface)",
            "MATCH (n:Interface)-[r:EXPOSES]->(p:Port) WHERE n.ip = '10.3.0.254'\nOPTIONAL MATCH (n:Machine)-[rr:ROUTES]->(n2:Interface) WHERE n2.ip = '10.3.0.254'\nOPTIONAL MATCH (n2)-[rr2:RUNS]->(m:OS)\nOPTIONAL MATCH (m)-[rr3:INSTANCE]->(s:Version)\nRETURN p.port, s.name",
            "```\nMATCH (e:Interface)-[r:EXPOSES]->(p:Port)-[s:RUNS]->(m:Machine)\nWHERE e.ip = '10.3.0.254'\nRETURN p.port, m.name AS processName\nUNION\nMATCH (e:Interface)-[r:EXPOSES]->(p:Port)-[s:RUNS]->(m:Machine)-[:RUNS]->(o:OS)-[:INSTANCE]->(v:Version)\nWHERE e.ip = '10.3.0.254'\nRETURN p.port, m.name AS processName, o.name AS OSName, v.name AS VersionName\nUNION\nMATCH (e:Interface)-[r:EXPOSES]->(p:Port)-[s:RUNS]->(m:Machine)-[:RUNS]->(s:Service)-[:INSTANCE]->(v:Version)\nWHERE e.ip = '10.3.0.254'\nRETURN p.port, m.name AS processName, s.name AS serviceName, v.name AS VersionName\nUNION\nMATCH (e:Interface)-[r:EXPOSES]->(p:Port)-[s:RUNS]->(m:Machine)-[:RUNS]->(a:Application)-[:INSTANCE]->(v:Version)\nWHERE e.ip = '10.3.0.254'\nRETURN p.port, m.name AS processName, a.name AS appName, v.name AS VersionName\n```",
            "MATCH (n:Interface)-[r:EXPOSES]->(p:Port)\nWHERE n.ip = '10.3.0.254'\nRETURN p.port AS exposed_port, n.name AS interface_name, r.process AS process_name"
        ]
    },
    {
        "question": "What are the top 3 beneficiary entities in transactions from Asia?",
        "schema": "Node properties:\n- **Country**\n  - `location`: POINT \n  - `code`: STRING Example: \"AFG\"\n  - `name`: STRING Example: \"Afghanistan\"\n  - `tld`: STRING Example: \"AF\"\n- **Filing**\n  - `begin`: DATE_TIME Min: 2000-02-08T00:00:00Z, Max: 2017-09-05T00:00:00Z\n  - `end`: DATE_TIME Min: 2000-02-08T00:00:00Z, Max: 2017-11-03T00:00:00Z\n  - `originator_bank_id`: STRING Example: \"cimb-bank-berhad\"\n  - `sar_id`: STRING Example: \"3297\"\n  - `beneficiary_bank`: STRING Example: \"Barclays Bank Plc\"\n  - `filer_org_name_id`: STRING Example: \"the-bank-of-new-york-mellon-corp\"\n  - `originator_bank_country`: STRING Example: \"Singapore\"\n  - `beneficiary_bank_country`: STRING Example: \"United Kingdom\"\n  - `filer_org_name`: STRING Example: \"The Bank of New York Mellon Corp.\"\n  - `originator_iso`: STRING Example: \"SGP\"\n  - `beneficiary_bank_id`: STRING Example: \"barclays-bank-plc-london-england-gbr\"\n  - `origin_lat`: STRING Example: \"1.3667\"\n  - `origin_lng`: STRING Example: \"103.8\"\n  - `end_date_format`: STRING Example: \"2015-09-25T00:00:00Z\"\n  - `begin_date_format`: STRING Example: \"2015-03-25T00:00:00Z\"\n  - `originator_bank`: STRING Example: \"CIMB Bank Berhad\"\n  - `beneficiary_lat`: STRING Example: \"54\"\n  - `beneficiary_iso`: STRING Example: \"GBR\"\n  - `beneficiary_lng`: STRING Example: \"-2\"\n  - `begin_date`: STRING Example: \"Mar 25, 2015\"\n  - `id`: STRING Example: \"223254\"\n  - `end_date`: STRING Example: \"Sep 25, 2015\"\n  - `amount`: INTEGER Min: 1.18, Max: 2721000000\n  - `number`: INTEGER Min: 1, Max: 174\n- **Entity**\n  - `id`: STRING Example: \"the-bank-of-new-york-mellon-corp\"\n  - `location`: POINT \n  - `name`: STRING Example: \"The Bank of New York Mellon Corp.\"\n  - `country`: STRING Example: \"CHN\"\nRelationship properties:\n\nThe relationships:\n(:Filing)-[:BENEFITS]->(:Entity)\n(:Filing)-[:CONCERNS]->(:Entity)\n(:Filing)-[:ORIGINATOR]->(:Entity)\n(:Entity)-[:FILED]->(:Filing)\n(:Entity)-[:COUNTRY]->(:Country)",
        "gold_cypher": "MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country) WHERE c.name IN ['China', 'India', 'Indonesia', 'Pakistan', 'Bangladesh', 'Japan', 'Philippines', 'Vietnam', 'Turkey', 'Iran', 'Thailand', 'Myanmar', 'South Korea', 'Iraq', 'Afghanistan', 'Saudi Arabia', 'Uzbekistan', 'Malaysia', 'Yemen', 'Nepal', 'North Korea', 'Sri Lanka', 'Kazakhstan', 'Syria', 'Cambodia', 'Jordan', 'Azerbaijan', 'United Arab Emirates', 'Tajikistan', 'Israel', 'Laos', 'Lebanon', 'Kyrgyzstan', 'Turkmenistan', 'Singapore', 'Oman', 'State of Palestine', 'Kuwait', 'Georgia', 'Mongolia', 'Armenia', 'Qatar', 'Bahrain', 'Timor-Leste', 'Cyprus', 'Bhutan', 'Maldives', 'Brunei'] WITH e, count(f) AS transactions ORDER BY transactions DESC LIMIT 3 RETURN e.name AS EntityName, transactions",
        "database": "fincen",
        "full_responses": [
            "MATCH (f:Filing)-[b:BENEFITS]->(e:Entity)-[c:COUNTRY]->(co:Country)\nWHERE co.location.latitude < 30 AND co.location.longitude < 100\nRETURN e.name AS beneficiary_name, count(f) AS transactions_count\nORDER BY transactions_count DESC\nLIMIT 3",
            "```\nMATCH (f:Filing)<-[b:BENEFITS]-(e:Entity)\nWITH e, f.amount ORDER BY f.amount DESC LIMIT 3\nMATCH (e)-[c:COUNTRY]->(co:Country)\nWHERE co.code IN ['CN', 'TW', 'HK', 'JP', 'KR', 'SG']\nRETURN e.name, e.location, e.amount\n```",
            "MATCH (e:Entity)-[r:FILED]->(f:Filing) WHERE e.country = 'AS' RETURN e.name, COUNT(e) AS transaction_count ORDER BY transaction_count DESC LIMIT 3",
            "```\nMATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country)\nWHERE c.code IN ['CN', 'SG', 'IN', 'PK', 'KH', 'TW', 'BD', 'VN', 'MM', 'KH']\nRETURN e.name AS Beneficiary, count(*) AS Transactions\nORDER BY Transactions DESC\nLIMIT 3\n```",
            "```cypher\nMATCH (f:Filing)-[r:BENEFITS]->(e:Entity)-[r2:COUNTRY]->(c:Country)\nWHERE c.code IN ['JP', 'CN', 'IN'] // Asia countries\nRETURN e.name AS BeneficiaryEntityName, COUNT(r) AS TransactionCount\nORDER BY TransactionCount DESC\nLIMIT 3\n```"
        ],
        "generated_cyphers": [
            "MATCH (f:Filing)-[b:BENEFITS]->(e:Entity)-[c:COUNTRY]->(co:Country)\nWHERE co.location.latitude < 30 AND co.location.longitude < 100\nRETURN e.name AS beneficiary_name, count(f) AS transactions_count\nORDER BY transactions_count DESC\nLIMIT 3",
            "```\nMATCH (f:Filing)<-[b:BENEFITS]-(e:Entity)\nWITH e, f.amount ORDER BY f.amount DESC LIMIT 3\nMATCH (e)-[c:COUNTRY]->(co:Country)\nWHERE co.code IN ['CN', 'TW', 'HK', 'JP', 'KR', 'SG']\nRETURN e.name, e.location, e.amount\n```",
            "MATCH (e:Entity)-[r:FILED]->(f:Filing) WHERE e.country = 'AS' RETURN e.name, COUNT(e) AS transaction_count ORDER BY transaction_count DESC LIMIT 3",
            "```\nMATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country)\nWHERE c.code IN ['CN', 'SG', 'IN', 'PK', 'KH', 'TW', 'BD', 'VN', 'MM', 'KH']\nRETURN e.name AS Beneficiary, count(*) AS Transactions\nORDER BY Transactions DESC\nLIMIT 3\n```",
            "```cypher\nMATCH (f:Filing)-[r:BENEFITS]->(e:Entity)-[r2:COUNTRY]->(c:Country)\nWHERE c.code IN ['JP', 'CN', 'IN'] // Asia countries\nRETURN e.name AS BeneficiaryEntityName, COUNT(r) AS TransactionCount\nORDER BY TransactionCount DESC\nLIMIT 3\n```"
        ]
    },
    {
        "question": "What is the most common sentiment expressed in reviews for each business (positive, negative, or neutral)?",
        "schema": "Node properties:\n- **Business**\n  - `address`: STRING Available options: ['301 E Main St', '200 W Pine St', '313 N 1st St W', '1151 W Broadway St', '201 E Front St', '723 California Dr', '121 W Broadway St', '716 N San Mateo Dr', '111 E 5th Ave']\n  - `location`: POINT \n  - `city`: STRING Available options: ['Missoula', 'Burlingame', 'San Mateo']\n  - `state`: STRING Available options: ['MT', 'CA']\n  - `businessId`: STRING Available options: ['b5', 'b3', 'b1', 'b2', 'b4', 'b7', 'b6', 'b8', 'b9']\n  - `name`: STRING Available options: ['Missoula Public Library', \"Ninja Mike's\", 'KettleHouse Brewing Co.', 'Imagine Nation Brewing', 'Market on Front', 'Hanabi', 'Zootown Brew', \"Ducky's Car Wash\", 'Neo4j']\n- **User**\n  - `name`: STRING Available options: ['Will', 'Bob', 'Jenny', 'Angie']\n  - `userId`: STRING Available options: ['u1', 'u2', 'u3', 'u4']\n- **Review**\n  - `date`: DATE Min: 2015-08-29, Max: 2018-09-10\n  - `text`: STRING Available options: ['Not a great selection of books, but fortunately th', \"Best breakfast sandwich at the Farmer's Market. Al\", 'Great IPA selection!', \"Awesome full-service car wash. Love Ducky's!\", \"The world's leading graph database HQ!\"]\n  - `stars`: FLOAT Min: 3.0, Max: 5.0\n  - `reviewId`: STRING Example: \"r7\"\n- **Category**\n  - `name`: STRING Example: \"Library\"\nRelationship properties:\n\nThe relationships:\n(:Business)-[:IN_CATEGORY]->(:Category)\n(:User)-[:WROTE]->(:Review)\n(:Review)-[:REVIEWS]->(:Business)",
        "gold_cypher": "WITH [1, 2] AS negativeStars, [4, 5] AS positiveStars MATCH (b:Business)<-[:REVIEWS]-(r:Review) WITH b, r, CASE      WHEN r.stars IN negativeStars THEN \"negative\"     WHEN r.stars IN positiveStars THEN \"positive\"     ELSE \"neutral\"  END AS sentiment WITH b, sentiment, count(*) AS sentimentCount WITH b, collect({sentiment: sentiment, count: sentimentCount}) AS sentimentCounts RETURN b.name AS businessName,         reduce(            mostCommon = {sentiment: \"none\", count: 0},             sentimentCount IN sentimentCounts |             CASE                 WHEN sentimentCount.count > mostCommon.count THEN sentimentCount                 ELSE mostCommon             END        ) AS mostCommonSentiment",
        "database": "grandstack",
        "full_responses": [
            "MATCH (b:Business)-[:REVIEWS]->(r:Review)\nWITH b.name AS businessName, r.stars AS stars\nUNWIND ['positive', 'negative', 'neutral'] AS sentiment\nRETURN businessName, sentiment, COUNT(*) AS count\nORDER BY count DESC",
            "```\nMATCH (b:Business)-[r:REVIEWS]->(rev:Review)\nWITH b, COLLECT(CASE WHEN rev.stars >= 4 THEN 'Positive' WHEN rev.stars <= 2 THEN 'Negative' ELSE 'Neutral' END) AS sentiments\nRETURN b.name AS BusinessName, COLLECT(sentiments) AS SentimentCounts\nORDER BY COUNT(sentiments) DESC\n```",
            "MATCH (b:Business)-[r:REVIEWS]->(rev:Review)\nWITH b, r.text AS reviewText, rev.stars AS stars\nOPTIONAL MATCH (b)-[IN:IN_CATEGORY]->(cat:Category)\nRETURN b.name, cat.name AS category, CASE stars WHEN stars >= 4 THEN 'Positive' WHEN stars <= 2 THEN 'Negative' ELSE 'Neutral' END AS sentiment\nGROUP BY b.name, cat.name, sentiment\nORDER BY COUNT(*) DESC",
            "MATCH (b:Business)-[r:REVIEWS]->(rev:Review)\nWITH b, COUNT(rev) AS reviewCount, collect(rev.stars) AS stars\nRETURN b.name, reviewCount, avg(stars) AS averageStars\nORDER BY averageStars DESC",
            "MATCH (b:Business)-[r:REVIEWS]->(rev:Review)\nWITH b, COUNT(CASE WHEN rev.stars >= 4 THEN true ELSE false END) AS positiveCount,\n       COUNT(CASE WHEN rev.stars < 4 THEN true ELSE false END) AS negativeCount\nRETURN b.name AS businessName, positiveCount, negativeCount"
        ],
        "generated_cyphers": [
            "MATCH (b:Business)-[:REVIEWS]->(r:Review)\nWITH b.name AS businessName, r.stars AS stars\nUNWIND ['positive', 'negative', 'neutral'] AS sentiment\nRETURN businessName, sentiment, COUNT(*) AS count\nORDER BY count DESC",
            "```\nMATCH (b:Business)-[r:REVIEWS]->(rev:Review)\nWITH b, COLLECT(CASE WHEN rev.stars >= 4 THEN 'Positive' WHEN rev.stars <= 2 THEN 'Negative' ELSE 'Neutral' END) AS sentiments\nRETURN b.name AS BusinessName, COLLECT(sentiments) AS SentimentCounts\nORDER BY COUNT(sentiments) DESC\n```",
            "MATCH (b:Business)-[r:REVIEWS]->(rev:Review)\nWITH b, r.text AS reviewText, rev.stars AS stars\nOPTIONAL MATCH (b)-[IN:IN_CATEGORY]->(cat:Category)\nRETURN b.name, cat.name AS category, CASE stars WHEN stars >= 4 THEN 'Positive' WHEN stars <= 2 THEN 'Negative' ELSE 'Neutral' END AS sentiment\nGROUP BY b.name, cat.name, sentiment\nORDER BY COUNT(*) DESC",
            "MATCH (b:Business)-[r:REVIEWS]->(rev:Review)\nWITH b, COUNT(rev) AS reviewCount, collect(rev.stars) AS stars\nRETURN b.name, reviewCount, avg(stars) AS averageStars\nORDER BY averageStars DESC",
            "MATCH (b:Business)-[r:REVIEWS]->(rev:Review)\nWITH b, COUNT(CASE WHEN rev.stars >= 4 THEN true ELSE false END) AS positiveCount,\n       COUNT(CASE WHEN rev.stars < 4 THEN true ELSE false END) AS negativeCount\nRETURN b.name AS businessName, positiveCount, negativeCount"
        ]
    },
    {
        "question": "List the customers who have purchased products from the same supplier as 'Alfreds Futterkiste'.",
        "schema": "Node properties:\n- **Product**\n  - `productName`: STRING Example: \"Chai\"\n  - `quantityPerUnit`: STRING Example: \"10 boxes x 20 bags\"\n  - `unitsOnOrder`: INTEGER Min: 0, Max: 100\n  - `supplierID`: STRING Example: \"1\"\n  - `productID`: STRING Example: \"1\"\n  - `discontinued`: BOOLEAN \n  - `categoryID`: STRING Available options: ['1', '2', '7', '6', '8', '4', '3', '5']\n  - `reorderLevel`: INTEGER Min: 0, Max: 30\n  - `unitsInStock`: INTEGER Min: 0, Max: 125\n  - `unitPrice`: FLOAT Min: 2.5, Max: 263.5\n- **Category**\n  - `picture`: STRING Available options: ['0x151C2F00020000000D000E0014002100FFFFFFFF4269746D']\n  - `categoryID`: STRING Available options: ['1', '2', '3', '4', '5', '6', '7', '8']\n  - `description`: STRING Available options: ['Soft drinks, coffees, teas, beers, and ales', 'Sweet and savory sauces, relishes, spreads, and se', 'Desserts, candies, and sweet breads', 'Cheeses', 'Breads, crackers, pasta, and cereal', 'Prepared meats', 'Dried fruit and bean curd', 'Seaweed and fish']\n  - `categoryName`: STRING Available options: ['Beverages', 'Condiments', 'Confections', 'Dairy Products', 'Grains/Cereals', 'Meat/Poultry', 'Produce', 'Seafood']\n- **Supplier**\n  - `companyName`: STRING Example: \"Exotic Liquids\"\n  - `contactName`: STRING Example: \"Charlotte Cooper\"\n  - `homePage`: STRING Available options: ['NULL', '#CAJUN.HTM#', \"Mayumi's (on the World Wide Web)#http://www.micros\", '(03) 444-6588', 'Plutzer (on the World Wide Web)#http://www.microso', '(0544) 60603', '(1) 03.83.00.62', '(02) 555-4873', '(089) 6547667', '38.76.98.58']\n  - `phone`: STRING Example: \"(171) 555-2222\"\n  - `postalCode`: STRING Example: \"EC1 4SD\"\n  - `contactTitle`: STRING Example: \"Purchasing Manager\"\n  - `region`: STRING Example: \"NULL\"\n  - `address`: STRING Example: \"49 Gilbert St.\"\n  - `fax`: STRING Example: \"NULL\"\n  - `supplierID`: STRING Example: \"1\"\n  - `country`: STRING Example: \"UK\"\n  - `city`: STRING Example: \"London\"\n- **Customer**\n  - `fax`: STRING Example: \"030-0076545\"\n  - `companyName`: STRING Example: \"Alfreds Futterkiste\"\n  - `customerID`: STRING Example: \"ALFKI\"\n  - `phone`: STRING Example: \"030-0074321\"\n  - `contactName`: STRING Example: \"Maria Anders\"\n  - `contactTitle`: STRING Example: \"Sales Representative\"\n  - `region`: STRING Example: \"NULL\"\n  - `address`: STRING Example: \"Obere Str. 57\"\n  - `postalCode`: STRING Example: \"12209\"\n  - `country`: STRING Example: \"Germany\"\n  - `city`: STRING Example: \"Berlin\"\n- **Order**\n  - `shipName`: STRING Example: \"Vins et alcools Chevalier\"\n  - `requiredDate`: STRING Example: \"1996-08-01 00:00:00.000\"\n  - `shipCity`: STRING Example: \"Reims\"\n  - `employeeID`: STRING Available options: ['5', '6', '4', '3', '9', '1', '8', '2', '7']\n  - `shipPostalCode`: STRING Example: \"51100\"\n  - `shippedDate`: STRING Example: \"1996-07-16 00:00:00.000\"\n  - `freight`: STRING Example: \"32.38\"\n  - `orderDate`: STRING Example: \"1996-07-04 00:00:00.000\"\n  - `orderID`: STRING Example: \"10248\"\n  - `shipAddress`: STRING Example: \"59 rue de l'Abbaye\"\n  - `customerID`: STRING Example: \"VINET\"\n  - `shipCountry`: STRING Example: \"France\"\n  - `shipVia`: STRING Available options: ['3', '1', '2']\n  - `shipRegion`: STRING Example: \"NULL\"\nRelationship properties:\n- **ORDERS**\n  - `orderID: STRING` Example: \"10248\"\n  - `unitPrice: STRING` Example: \"34.80\"\n  - `productID: STRING` Example: \"72\"\n  - `quantity: INTEGER` Min: 1, Max:  130\n  - `discount: STRING` Example: \"0\"\nThe relationships:\n(:Product)-[:PART_OF]->(:Category)\n(:Supplier)-[:SUPPLIES]->(:Product)\n(:Customer)-[:PURCHASED]->(:Order)\n(:Order)-[:ORDERS]->(:Product)",
        "gold_cypher": "MATCH (targetCustomer:Customer {companyName: 'Alfreds Futterkiste'}) WITH targetCustomer.customerID AS targetCustomerID MATCH (targetCustomer:Customer {customerID: targetCustomerID})-[:PURCHASED]->(:Order)-[:ORDERS]->(product:Product)<-[:SUPPLIES]-(supplier:Supplier) WITH targetCustomerID, collect(DISTINCT supplier.supplierID) AS targetSupplierIDs MATCH (otherCustomer:Customer)-[:PURCHASED]->(:Order)-[:ORDERS]->(:Product)<-[:SUPPLIES]-(supplier:Supplier) WHERE supplier.supplierID IN targetSupplierIDs AND otherCustomer.companyName <> 'Alfreds Futterkiste' RETURN DISTINCT otherCustomer.companyName, otherCustomer.customerID",
        "database": "northwind",
        "full_responses": [
            "```\nMATCH (c:Customer)-[po:Purchased]->(o:Order)-[:ORDERS]->(p:Product)\nWHERE c.customerID = 'ALFKI'\nWITH p.productID AS productId, p.supplierID AS supplierID\nMATCH (o)-[:PART_OF]->(cat:Category)\nWITH productId, supplierID, cat.categoryName AS categoryName\nMATCH (s:Supplier)-[:SUPPLIES]->(p)\nWHERE s.supplierID = supplierID\nMATCH (c2:Customer)-[po2:Purchased]->(o2:Order)-[:ORDERS]->(p2:Product)\nWHERE po2.productID = productId AND po2.orderID = po.orderID AND c2.customerID <> c.customerID\nRETURN c2.customerID, c2.companyName, c2.contactName, c2.contactTitle, c2.address, c2.city, c2.country, c2.postalCode, categoryName\n```",
            "```cypher\nMATCH (c:Customer)-[p:PURCHASED]->(o:Order)-[o2:ORDERS]->(p2:Product)-[r:PART_OF]->(c2:Category)-[s:SUPPLIES]->(p3:Product) WHERE c.companyName = 'Alfreds Futterkiste' AND p2.supplierID = p3.supplierID AND c <> c2\nRETURN c\n```",
            "```cypher\nMATCH (c:Customer)-[o:PURCHASED]->(o2:Order)-[p:ORDERS]->(p2:Product)-[r:PART_OF]->(c2:Category)\nWHERE c.companyName = 'Alfreds Futterkiste' AND p.supplierID = p2.supplierID\nRETURN DISTINCT c\n```",
            "MATCH (c:Customer)-[r:Purchased]->(o:Order)-[p:ORDERS]->(pr:Product)<-[c:PART_OF]->(ct:Category)<-[s:SUPPLIES]->(sup:Supplier)\nWHERE c.companyName = 'Alfreds Futterkiste'\nRETURN DISTINCT c.customerID",
            "MATCH (c:Customer)-[pu:PURCHASED]->(o:Order)-[o2:ORDERS]->(p:Product)<-[p2:PART_OF]-(:Category)-[s:SUPPLIES]->(sp:Supplier {companyName: 'Alfreds Futterkiste'})\nRETURN DISTINCT c.customerID, c.companyName, c.contactName, c.address, c.city, c.region, c.postalCode, c.country"
        ],
        "generated_cyphers": [
            "```\nMATCH (c:Customer)-[po:Purchased]->(o:Order)-[:ORDERS]->(p:Product)\nWHERE c.customerID = 'ALFKI'\nWITH p.productID AS productId, p.supplierID AS supplierID\nMATCH (o)-[:PART_OF]->(cat:Category)\nWITH productId, supplierID, cat.categoryName AS categoryName\nMATCH (s:Supplier)-[:SUPPLIES]->(p)\nWHERE s.supplierID = supplierID\nMATCH (c2:Customer)-[po2:Purchased]->(o2:Order)-[:ORDERS]->(p2:Product)\nWHERE po2.productID = productId AND po2.orderID = po.orderID AND c2.customerID <> c.customerID\nRETURN c2.customerID, c2.companyName, c2.contactName, c2.contactTitle, c2.address, c2.city, c2.country, c2.postalCode, categoryName\n```",
            "```cypher\nMATCH (c:Customer)-[p:PURCHASED]->(o:Order)-[o2:ORDERS]->(p2:Product)-[r:PART_OF]->(c2:Category)-[s:SUPPLIES]->(p3:Product) WHERE c.companyName = 'Alfreds Futterkiste' AND p2.supplierID = p3.supplierID AND c <> c2\nRETURN c\n```",
            "```cypher\nMATCH (c:Customer)-[o:PURCHASED]->(o2:Order)-[p:ORDERS]->(p2:Product)-[r:PART_OF]->(c2:Category)\nWHERE c.companyName = 'Alfreds Futterkiste' AND p.supplierID = p2.supplierID\nRETURN DISTINCT c\n```",
            "MATCH (c:Customer)-[r:Purchased]->(o:Order)-[p:ORDERS]->(pr:Product)<-[c:PART_OF]->(ct:Category)<-[s:SUPPLIES]->(sup:Supplier)\nWHERE c.companyName = 'Alfreds Futterkiste'\nRETURN DISTINCT c.customerID",
            "MATCH (c:Customer)-[pu:PURCHASED]->(o:Order)-[o2:ORDERS]->(p:Product)<-[p2:PART_OF]-(:Category)-[s:SUPPLIES]->(sp:Supplier {companyName: 'Alfreds Futterkiste'})\nRETURN DISTINCT c.customerID, c.companyName, c.contactName, c.address, c.city, c.region, c.postalCode, c.country"
        ]
    },
    {
        "question": "Find the actors who have starred in movies with a runtime longer than their age at the time of filming.",
        "schema": "Node properties:\n- **Movie**\n  - `url`: STRING Example: \"https://themoviedb.org/movie/862\"\n  - `runtime`: INTEGER Min: 2, Max: 910\n  - `revenue`: INTEGER Min: 1, Max: 2787965087\n  - `imdbRating`: FLOAT Min: 1.6, Max: 9.6\n  - `released`: STRING Example: \"1995-11-22\"\n  - `countries`: LIST Min Size: 1, Max Size: 16\n  - `languages`: LIST Min Size: 1, Max Size: 19\n  - `plot`: STRING Example: \"A cowboy doll is profoundly threatened and jealous\"\n  - `imdbVotes`: INTEGER Min: 13, Max: 1626900\n  - `imdbId`: STRING Example: \"0114709\"\n  - `year`: INTEGER Min: 1902, Max: 2016\n  - `poster`: STRING Example: \"https://image.tmdb.org/t/p/w440_and_h660_face/uXDf\"\n  - `movieId`: STRING Example: \"1\"\n  - `tmdbId`: STRING Example: \"862\"\n  - `title`: STRING Example: \"Toy Story\"\n  - `budget`: INTEGER Min: 1, Max: 380000000\n- **Genre**\n  - `name`: STRING Example: \"Adventure\"\n- **User**\n  - `userId`: STRING Example: \"1\"\n  - `name`: STRING Example: \"Omar Huffman\"\n- **Actor**\n  - `url`: STRING Example: \"https://themoviedb.org/person/1271225\"\n  - `name`: STRING Example: \"Fran\u00e7ois Lallement\"\n  - `tmdbId`: STRING Example: \"1271225\"\n  - `bornIn`: STRING Example: \"France\"\n  - `bio`: STRING Example: \"\u200bFrom Wikipedia, the free encyclopedia  Lillian Di\"\n  - `died`: DATE Example: \"1954-01-01\"\n  - `born`: DATE Example: \"1877-02-04\"\n  - `imdbId`: STRING Example: \"2083046\"\n  - `poster`: STRING Example: \"https://image.tmdb.org/t/p/w440_and_h660_face/6DCW\"\n- **Director**\n  - `url`: STRING Example: \"https://themoviedb.org/person/88953\"\n  - `bornIn`: STRING Example: \"Burchard, Nebraska, USA\"\n  - `born`: DATE Min: 1861-12-08, Max: 2018-05-01\n  - `died`: DATE Min: 1930-08-26, Max: 2976-09-29\n  - `tmdbId`: STRING Example: \"88953\"\n  - `imdbId`: STRING Example: \"0516001\"\n  - `name`: STRING Example: \"Harold Lloyd\"\n  - `poster`: STRING Example: \"https://image.tmdb.org/t/p/w440_and_h660_face/er4Z\"\n  - `bio`: STRING Example: \"Harold Lloyd has been called the cinema\u2019s \u201cfirst m\"\n- **Person**\n  - `url`: STRING Example: \"https://themoviedb.org/person/1271225\"\n  - `died`: DATE Example: \"1954-01-01\"\n  - `bornIn`: STRING Example: \"France\"\n  - `born`: DATE Example: \"1877-02-04\"\n  - `imdbId`: STRING Example: \"2083046\"\n  - `name`: STRING Example: \"Fran\u00e7ois Lallement\"\n  - `poster`: STRING Example: \"https://image.tmdb.org/t/p/w440_and_h660_face/6DCW\"\n  - `tmdbId`: STRING Example: \"1271225\"\n  - `bio`: STRING Example: \"\u200bFrom Wikipedia, the free encyclopedia  Lillian Di\"\nRelationship properties:\n- **RATED**\n  - `rating: FLOAT` Example: \"2.0\"\n  - `timestamp: INTEGER` Example: \"1260759108\"\n- **ACTED_IN**\n  - `role: STRING` Example: \"Officer of the Marines (uncredited)\"\n- **DIRECTED**\n  - `role: STRING` \nThe relationships:\n(:Movie)-[:IN_GENRE]->(:Genre)\n(:User)-[:RATED]->(:Movie)\n(:Actor)-[:ACTED_IN]->(:Movie)\n(:Actor)-[:DIRECTED]->(:Movie)\n(:Director)-[:DIRECTED]->(:Movie)\n(:Director)-[:ACTED_IN]->(:Movie)\n(:Person)-[:ACTED_IN]->(:Movie)\n(:Person)-[:DIRECTED]->(:Movie)",
        "gold_cypher": "MATCH (actor:Actor)-[:ACTED_IN]->(movie:Movie) WITH actor, movie, toInteger(substring(movie.released, 0, 4)) AS releaseYear WITH actor, movie, releaseYear, releaseYear - toInteger(substring(toString(actor.born), 0, 4)) AS ageAtFilming WHERE movie.runtime > ageAtFilming RETURN DISTINCT actor.name, movie.title UNION MATCH (actor:Person)-[:ACTED_IN]->(movie:Movie) WITH actor, movie, toInteger(substring(movie.released, 0, 4)) AS releaseYear WITH actor, movie, releaseYear, releaseYear - toInteger(substring(toString(actor.born), 0, 4)) AS ageAtFilming WHERE movie.runtime > ageAtFilming RETURN DISTINCT actor.name, movie.title",
        "database": "recommendations",
        "full_responses": [
            "MATCH (m:Movie)-[r:ACTED_IN]->(a:Actor)\nWHERE m.runtime > (m.released.year - a.born.year)\nRETURN a.name",
            "MATCH (m:Movie)-[r:ACTED_IN]->(a:Actor)\nWHERE m.runtime > (m.released AS Timestamp) - a.born\nRETURN a.name",
            "MATCH (m:Movie)-[ra:RATED]->(u:User)\nMATCH (a:Actor)-[ai:ACTED_IN]->(m)\nWITH m, u, a, m.runtime AS runtime, a.born AS born, a.died AS died\nWHERE m.runtime > (YEAR(m.released) - YEAR(born)) - 1\nRETURN a.name",
            "MATCH (m:Movie)-[:ACTED_IN]->(a:Actor)\nWHERE m.runtime > (m.year - a.born.year)\nRETURN a.name",
            "MATCH (m:Movie)-[ACTED_IN:ACTED_IN]->(a:Actor)\nWHERE m.runtime > (YEAR(m.released) - YEAR(a.bornIn))\nRETURN a.name"
        ],
        "generated_cyphers": [
            "MATCH (m:Movie)-[r:ACTED_IN]->(a:Actor)\nWHERE m.runtime > (m.released.year - a.born.year)\nRETURN a.name",
            "MATCH (m:Movie)-[r:ACTED_IN]->(a:Actor)\nWHERE m.runtime > (m.released AS Timestamp) - a.born\nRETURN a.name",
            "MATCH (m:Movie)-[ra:RATED]->(u:User)\nMATCH (a:Actor)-[ai:ACTED_IN]->(m)\nWITH m, u, a, m.runtime AS runtime, a.born AS born, a.died AS died\nWHERE m.runtime > (YEAR(m.released) - YEAR(born)) - 1\nRETURN a.name",
            "MATCH (m:Movie)-[:ACTED_IN]->(a:Actor)\nWHERE m.runtime > (m.year - a.born.year)\nRETURN a.name",
            "MATCH (m:Movie)-[ACTED_IN:ACTED_IN]->(a:Actor)\nWHERE m.runtime > (YEAR(m.released) - YEAR(a.bornIn))\nRETURN a.name"
        ]
    },
    {
        "question": "List the characters who have interacted with 'Daenerys-Targaryen' in any book and have a 'degree' less than 5.",
        "schema": "Node properties:\n- **Character**\n  - `centrality`: FLOAT Min: 0.0, Max: 1.0\n  - `book45PageRank`: FLOAT Min: 0.15000000000000002, Max: 11.409916274911177\n  - `fastrf_embedding`: LIST Min Size: 10, Max Size: 10\n  - `book1BetweennessCentrality`: FLOAT Min: 0.0, Max: 4638.53495125504\n  - `book1PageRank`: FLOAT Min: 0.15000000000000002, Max: 8.164174336296284\n  - `louvain`: INTEGER Min: 0, Max: 10\n  - `community`: INTEGER Min: 504, Max: 795\n  - `degree`: FLOAT Min: 0.0, Max: 300.0\n  - `name`: STRING Example: \"Addam-Marbrand\"\n  - `pagerank`: FLOAT Min: 0.15000000000000002, Max: 9.473142454730429\nRelationship properties:\n- **INTERACTS**\n  - `weight: INTEGER` Min: 3, Max:  334\n- **INTERACTS1**\n  - `weight: INTEGER` Min: 3, Max:  291\n  - `book: INTEGER` Min: 1, Max:  1\n- **INTERACTS2**\n  - `weight: INTEGER` Min: 3, Max:  92\n  - `book: INTEGER` Min: 2, Max:  2\n- **INTERACTS3**\n  - `weight: INTEGER` Min: 3, Max:  95\n  - `book: INTEGER` Min: 3, Max:  3\n- **INTERACTS45**\n  - `weight: INTEGER` Min: 3, Max:  96\n  - `book: INTEGER` Min: 45, Max:  45\nThe relationships:\n(:Character)-[:INTERACTS45]->(:Character)\n(:Character)-[:INTERACTS]->(:Character)\n(:Character)-[:INTERACTS1]->(:Character)\n(:Character)-[:INTERACTS3]->(:Character)\n(:Character)-[:INTERACTS2]->(:Character)",
        "gold_cypher": "MATCH (dt:Character {name: 'Daenerys-Targaryen'}) CALL {   WITH dt   MATCH (dt)-[:INTERACTS]->(c:Character)   WHERE c.degree < 5   RETURN c.name AS name   UNION   WITH dt   MATCH (dt)-[:INTERACTS1]->(c:Character)   WHERE c.degree < 5   RETURN c.name AS name   UNION   WITH dt   MATCH (dt)-[:INTERACTS2]->(c:Character)   WHERE c.degree < 5   RETURN c.name AS name   UNION   WITH dt   MATCH (dt)-[:INTERACTS3]->(c:Character)   WHERE c.degree < 5   RETURN c.name AS name   UNION   WITH dt   MATCH (dt)-[:INTERACTS45]->(c:Character)   WHERE c.degree < 5   RETURN c.name AS name } RETURN DISTINCT name",
        "database": "gameofthrones",
        "full_responses": [
            "MATCH (c:Character)-[r:INTERACTS]->(c2:Character)\nWHERE c.name = 'Daenerys-Targaryen' AND c2.degree < 5\nRETURN c2.name",
            "MATCH (c1:Character)-[r:INTERACTS]->(c2:Character)\nWHERE c2.name = 'Daenerys-Targaryen' AND c1.degree < 5\nRETURN c1.name",
            "MATCH (a:Character)-[r:INTERACTS]->(b:Character)\nWHERE a.name = 'Daenerys-Targaryen'\nAND r.weight > 3 AND b.degree < 5\nRETURN b.name",
            "MATCH (c1:Character)-[r:INTERACTS45]->(c2:Character)\nWHERE c1.name = 'Daenerys-Targaryen' AND c2.degree < 5\nRETURN c2.name",
            "MATCH (c1:Character)-[r:INTERACTS*1..5]-(c2:Character)-[i:INTERACTS45]->(:Character {name: 'Daenerys-Targaryen'})\nWHERE c1.degree < 5\nRETURN c1.name, r.weight, i.weight"
        ],
        "generated_cyphers": [
            "MATCH (c:Character)-[r:INTERACTS]->(c2:Character)\nWHERE c.name = 'Daenerys-Targaryen' AND c2.degree < 5\nRETURN c2.name",
            "MATCH (c1:Character)-[r:INTERACTS]->(c2:Character)\nWHERE c2.name = 'Daenerys-Targaryen' AND c1.degree < 5\nRETURN c1.name",
            "MATCH (a:Character)-[r:INTERACTS]->(b:Character)\nWHERE a.name = 'Daenerys-Targaryen'\nAND r.weight > 3 AND b.degree < 5\nRETURN b.name",
            "MATCH (c1:Character)-[r:INTERACTS45]->(c2:Character)\nWHERE c1.name = 'Daenerys-Targaryen' AND c2.degree < 5\nRETURN c2.name",
            "MATCH (c1:Character)-[r:INTERACTS*1..5]-(c2:Character)-[i:INTERACTS45]->(:Character {name: 'Daenerys-Targaryen'})\nWHERE c1.degree < 5\nRETURN c1.name, r.weight, i.weight"
        ]
    },
    {
        "question": "List the orders placed by customers who have placed orders for products in all categories except 'Seafood'.",
        "schema": "Node properties:\n- **Product**\n  - `productName`: STRING Example: \"Chai\"\n  - `quantityPerUnit`: STRING Example: \"10 boxes x 20 bags\"\n  - `unitsOnOrder`: INTEGER Min: 0, Max: 100\n  - `supplierID`: STRING Example: \"1\"\n  - `productID`: STRING Example: \"1\"\n  - `discontinued`: BOOLEAN \n  - `categoryID`: STRING Available options: ['1', '2', '7', '6', '8', '4', '3', '5']\n  - `reorderLevel`: INTEGER Min: 0, Max: 30\n  - `unitsInStock`: INTEGER Min: 0, Max: 125\n  - `unitPrice`: FLOAT Min: 2.5, Max: 263.5\n- **Category**\n  - `picture`: STRING Available options: ['0x151C2F00020000000D000E0014002100FFFFFFFF4269746D']\n  - `categoryID`: STRING Available options: ['1', '2', '3', '4', '5', '6', '7', '8']\n  - `description`: STRING Available options: ['Soft drinks, coffees, teas, beers, and ales', 'Sweet and savory sauces, relishes, spreads, and se', 'Desserts, candies, and sweet breads', 'Cheeses', 'Breads, crackers, pasta, and cereal', 'Prepared meats', 'Dried fruit and bean curd', 'Seaweed and fish']\n  - `categoryName`: STRING Available options: ['Beverages', 'Condiments', 'Confections', 'Dairy Products', 'Grains/Cereals', 'Meat/Poultry', 'Produce', 'Seafood']\n- **Supplier**\n  - `companyName`: STRING Example: \"Exotic Liquids\"\n  - `contactName`: STRING Example: \"Charlotte Cooper\"\n  - `homePage`: STRING Available options: ['NULL', '#CAJUN.HTM#', \"Mayumi's (on the World Wide Web)#http://www.micros\", '(03) 444-6588', 'Plutzer (on the World Wide Web)#http://www.microso', '(0544) 60603', '(1) 03.83.00.62', '(02) 555-4873', '(089) 6547667', '38.76.98.58']\n  - `phone`: STRING Example: \"(171) 555-2222\"\n  - `postalCode`: STRING Example: \"EC1 4SD\"\n  - `contactTitle`: STRING Example: \"Purchasing Manager\"\n  - `region`: STRING Example: \"NULL\"\n  - `address`: STRING Example: \"49 Gilbert St.\"\n  - `fax`: STRING Example: \"NULL\"\n  - `supplierID`: STRING Example: \"1\"\n  - `country`: STRING Example: \"UK\"\n  - `city`: STRING Example: \"London\"\n- **Customer**\n  - `fax`: STRING Example: \"030-0076545\"\n  - `companyName`: STRING Example: \"Alfreds Futterkiste\"\n  - `customerID`: STRING Example: \"ALFKI\"\n  - `phone`: STRING Example: \"030-0074321\"\n  - `contactName`: STRING Example: \"Maria Anders\"\n  - `contactTitle`: STRING Example: \"Sales Representative\"\n  - `region`: STRING Example: \"NULL\"\n  - `address`: STRING Example: \"Obere Str. 57\"\n  - `postalCode`: STRING Example: \"12209\"\n  - `country`: STRING Example: \"Germany\"\n  - `city`: STRING Example: \"Berlin\"\n- **Order**\n  - `shipName`: STRING Example: \"Vins et alcools Chevalier\"\n  - `requiredDate`: STRING Example: \"1996-08-01 00:00:00.000\"\n  - `shipCity`: STRING Example: \"Reims\"\n  - `employeeID`: STRING Available options: ['5', '6', '4', '3', '9', '1', '8', '2', '7']\n  - `shipPostalCode`: STRING Example: \"51100\"\n  - `shippedDate`: STRING Example: \"1996-07-16 00:00:00.000\"\n  - `freight`: STRING Example: \"32.38\"\n  - `orderDate`: STRING Example: \"1996-07-04 00:00:00.000\"\n  - `orderID`: STRING Example: \"10248\"\n  - `shipAddress`: STRING Example: \"59 rue de l'Abbaye\"\n  - `customerID`: STRING Example: \"VINET\"\n  - `shipCountry`: STRING Example: \"France\"\n  - `shipVia`: STRING Available options: ['3', '1', '2']\n  - `shipRegion`: STRING Example: \"NULL\"\nRelationship properties:\n- **ORDERS**\n  - `orderID: STRING` Example: \"10248\"\n  - `unitPrice: STRING` Example: \"34.80\"\n  - `productID: STRING` Example: \"72\"\n  - `quantity: INTEGER` Min: 1, Max:  130\n  - `discount: STRING` Example: \"0\"\nThe relationships:\n(:Product)-[:PART_OF]->(:Category)\n(:Supplier)-[:SUPPLIES]->(:Product)\n(:Customer)-[:PURCHASED]->(:Order)\n(:Order)-[:ORDERS]->(:Product)",
        "gold_cypher": "MATCH (c:Customer)-[:PURCHASED]->(o:Order) WITH c, collect(DISTINCT o) AS customerOrders MATCH (p:Product)-[:PART_OF]->(cat:Category) WHERE cat.categoryID <> '8' WITH c, customerOrders, collect(DISTINCT cat.categoryID) AS allCategoriesExceptSeafood MATCH (c)-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)-[:PART_OF]->(cat:Category) WITH c, customerOrders, allCategoriesExceptSeafood, collect(DISTINCT cat.categoryID) AS customerOrderedCategories WHERE all(category IN allCategoriesExceptSeafood WHERE category IN customerOrderedCategories) UNWIND customerOrders AS order RETURN DISTINCT order",
        "database": "northwind",
        "full_responses": [
            "MATCH (c:Customer)-[r:Purchased]->(o:Order)-[p:ORDERS]->(product:Product)\nWHERE product.categoryID NOT IN ['8']\nRETURN DISTINCT o.orderID, c.customerName",
            "```\nMATCH (c:Customer)-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)-[:PART_OF]->(ca:Category)\nWHERE ca.categoryName <> 'Seafood'\nWITH c, o, COLLECT(DISTINCT ca.categoryName) AS allCategories\nWHERE SIZE(allCategories) = COUNT(DISTINCT ca.categoryName)\nRETURN o\n```",
            "MATCH (c:Customer)-[p:PURCHASED]->(o:Order)-[o2:ORDERS]->(pr:Product)\nWHERE c.customerID NOT IN\n  (MATCH (pr)-[r:PART_OF]->(cat:Category)\n  WHERE cat.categoryName = 'Seafood')\nRETURN o.orderID",
            "MATCH (c:Customer)-[p:PURCHASED]->(o:Order)-[pr:ORDERS]->(prod:Product)\nWHERE prod.categoryID <> '8'\nAND ALL (cat IN c.categories WHERE cat <> 'Seafood')\nRETURN o.orderID, o.orderDate, o.shipVia, o.freight",
            "MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[r:ORDERS]->(p:Product)\nWITH c, COLLECT(DISTINCT p.categoryID) AS categories\nWHERE NOT 'Seafood' IN categories\nRETURN DISTINCT c.customerID, c.companyName"
        ],
        "generated_cyphers": [
            "MATCH (c:Customer)-[r:Purchased]->(o:Order)-[p:ORDERS]->(product:Product)\nWHERE product.categoryID NOT IN ['8']\nRETURN DISTINCT o.orderID, c.customerName",
            "```\nMATCH (c:Customer)-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)-[:PART_OF]->(ca:Category)\nWHERE ca.categoryName <> 'Seafood'\nWITH c, o, COLLECT(DISTINCT ca.categoryName) AS allCategories\nWHERE SIZE(allCategories) = COUNT(DISTINCT ca.categoryName)\nRETURN o\n```",
            "MATCH (c:Customer)-[p:PURCHASED]->(o:Order)-[o2:ORDERS]->(pr:Product)\nWHERE c.customerID NOT IN\n  (MATCH (pr)-[r:PART_OF]->(cat:Category)\n  WHERE cat.categoryName = 'Seafood')\nRETURN o.orderID",
            "MATCH (c:Customer)-[p:PURCHASED]->(o:Order)-[pr:ORDERS]->(prod:Product)\nWHERE prod.categoryID <> '8'\nAND ALL (cat IN c.categories WHERE cat <> 'Seafood')\nRETURN o.orderID, o.orderDate, o.shipVia, o.freight",
            "MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[r:ORDERS]->(p:Product)\nWITH c, COLLECT(DISTINCT p.categoryID) AS categories\nWHERE NOT 'Seafood' IN categories\nRETURN DISTINCT c.customerID, c.companyName"
        ]
    },
    {
        "question": "Find all persons who are CEOs of organizations that are subsidiaries of organizations headquartered in Europe.",
        "schema": "Node properties:\n- **Person**\n  - `name`: STRING Example: \"Julie Spellman Sweet\"\n  - `id`: STRING Example: \"Eaf0bpz6NNoqLVUCqNZPAew\"\n  - `summary`: STRING Example: \"CEO at Accenture\"\n- **Organization**\n  - `revenue`: FLOAT Example: \"1.2E8\"\n  - `motto`: STRING Example: \"\"\n  - `nbrEmployees`: INTEGER Example: \"375\"\n  - `isDissolved`: BOOLEAN \n  - `id`: STRING Example: \"E0ZU8eCc5OaqS1LU9qE3n3w\"\n  - `isPublic`: BOOLEAN \n  - `name`: STRING Example: \"New Energy Group\"\n  - `summary`: STRING Example: \"Software company based in Rome, Metropolitan City \"\n- **IndustryCategory**\n  - `name`: STRING Example: \"Electronic Products Manufacturers\"\n  - `id`: STRING Example: \"EUNd__O4zMNW81lAXNK2GNw\"\n- **City**\n  - `id`: STRING Example: \"EZHWv2xKgN92oYDKSjhJ2gw\"\n  - `summary`: STRING Example: \"City in and county seat of King County, Washington\"\n  - `name`: STRING Example: \"Seattle\"\n- **Country**\n  - `name`: STRING Example: \"United States of America\"\n  - `id`: STRING Example: \"E01d4EK33MmCosgI2KXa4-A\"\n  - `summary`: STRING Example: \"Country in North America\"\n- **Article**\n  - `id`: STRING Example: \"ART176872705964\"\n  - `sentiment`: FLOAT Example: \"0.856\"\n  - `author`: STRING Example: \"David Correa\"\n  - `siteName`: STRING Example: \"MrWeb\"\n  - `summary`: STRING Example: \"Boston and Mumbai-based consumer behavior analyses\"\n  - `date`: DATE_TIME Example: \"2022-03-10T00:00:00Z\"\n  - `title`: STRING Example: \"Funds for Consumer Behavior Specialist Infinite An\"\n- **Chunk**\n  - `text`: STRING Example: \"Boston and Mumbai-based consumer behavior analyses\"\n- **Fewshot**\n  - `Question`: STRING Available options: ['How is Emil Eifrem connected to Michael Hunger? ', 'What are the latest news regarding Google? ', 'Are there any news regarding return to office poli', 'What is Microsoft policy regarding to the return t', 'How many levels of subsidiaries does Blackstone ha', 'How many Telecommunications Companies are from Mal']\n  - `Cypher`: STRING Available options: ['MATCH (p1:Person {{name:\"Emil Eifrem\"}}), (p2:Pers', 'MATCH (o:Organization {{name:\"Google\"}})<-[:MENTIO', 'CALL apoc.ml.openai.embedding([\"Are there any news', 'CALL apoc.ml.openai.embedding([\"What is Microsoft ', 'MATCH p=(o:Organization {name:\"Blackstone\"})-[:HAS', 'MATCH (o:Organization) WHERE EXISTS {(o)-[:HAS_CAT']\n  - `id`: INTEGER Min: 2, Max: 7\nRelationship properties:\n\nThe relationships:\n(:Person)-[:HAS_PARENT]->(:Person)\n(:Person)-[:HAS_CHILD]->(:Person)\n(:Organization)-[:IN_CITY]->(:City)\n(:Organization)-[:HAS_CEO]->(:Person)\n(:Organization)-[:HAS_CATEGORY]->(:IndustryCategory)\n(:Organization)-[:HAS_SUBSIDIARY]->(:Organization)\n(:Organization)-[:HAS_SUPPLIER]->(:Organization)\n(:Organization)-[:HAS_INVESTOR]->(:Organization)\n(:Organization)-[:HAS_INVESTOR]->(:Person)\n(:Organization)-[:HAS_BOARD_MEMBER]->(:Person)\n(:Organization)-[:HAS_COMPETITOR]->(:Organization)\n(:City)-[:IN_COUNTRY]->(:Country)\n(:Article)-[:HAS_CHUNK]->(:Chunk)\n(:Article)-[:MENTIONS]->(:Organization)",
        "gold_cypher": "MATCH (org:Organization)-[:IN_CITY]->(city:City)-[:IN_COUNTRY]->(country:Country) WHERE country.name IN ['Austria', 'Belgium', 'Bulgaria', 'Croatia', 'Cyprus', 'Czech Republic', 'Denmark', 'Estonia', 'Finland', 'France', 'Germany', 'Greece', 'Hungary', 'Iceland', 'Ireland', 'Italy', 'Latvia', 'Lithuania', 'Luxembourg', 'Malta', 'Netherlands', 'Norway', 'Poland', 'Portugal', 'Romania', 'Slovakia', 'Slovenia', 'Spain', 'Sweden', 'Switzerland', 'Ukraine', 'United Kingdom'] MATCH (parentOrg:Organization)-[:HAS_SUBSIDIARY]->(org) MATCH (parentOrg)-[:HAS_CEO]->(ceo:Person) RETURN DISTINCT ceo",
        "database": "companies",
        "full_responses": [
            "MATCH (o:Organization)-[:HAS_SUBSIDIARY]->(s:Organization)-[:HAS_CEO]->(p:Person)\nWHERE s.in_country.name = 'Europe'\nRETURN p",
            "MATCH (o1:Organization)-[:HAS_SUBSIDIARY]->(o2:Organization)<-[:HAS_CEO]-(p:Person)\nWHERE o2 IN (MATCH (c:Country {name: 'Europe'})<-[:IN_COUNTRY]-(o2))\nRETURN p",
            "MATCH (o1:Organization)-[:HAS_SUBSIDIARY]->(o2:Organization)<-[:HAS_CEO]-(p:Person)\nWHERE o2 IN (MATCH (o:Organization)-[:IN_COUNTRY]->(c:Country) WHERE c.name = 'Europe') AND o2.isPublic = true\nRETURN p.name",
            "```cypher\nMATCH p=(o1:Organization)-[r1:HAS_SUBSIDIARY]->(o2:Organization)-[r2:HAS_CEO]->(c1:Person)\nWHERE r1.isDissolved = false AND r2.isDissolved = false AND o1.country.name IN ['United Kingdom', 'France', 'Germany', 'Italy', 'Spain']\nRETURN c1.name AS CEOName\n```",
            "MATCH (o:Organization {name: 'European'})<-[:HAS_SUBSIDIARY]-(sub:Organization)-[:HAS_CEO]->(p:Person)\nRETURN p"
        ],
        "generated_cyphers": [
            "MATCH (o:Organization)-[:HAS_SUBSIDIARY]->(s:Organization)-[:HAS_CEO]->(p:Person)\nWHERE s.in_country.name = 'Europe'\nRETURN p",
            "MATCH (o1:Organization)-[:HAS_SUBSIDIARY]->(o2:Organization)<-[:HAS_CEO]-(p:Person)\nWHERE o2 IN (MATCH (c:Country {name: 'Europe'})<-[:IN_COUNTRY]-(o2))\nRETURN p",
            "MATCH (o1:Organization)-[:HAS_SUBSIDIARY]->(o2:Organization)<-[:HAS_CEO]-(p:Person)\nWHERE o2 IN (MATCH (o:Organization)-[:IN_COUNTRY]->(c:Country) WHERE c.name = 'Europe') AND o2.isPublic = true\nRETURN p.name",
            "```cypher\nMATCH p=(o1:Organization)-[r1:HAS_SUBSIDIARY]->(o2:Organization)-[r2:HAS_CEO]->(c1:Person)\nWHERE r1.isDissolved = false AND r2.isDissolved = false AND o1.country.name IN ['United Kingdom', 'France', 'Germany', 'Italy', 'Spain']\nRETURN c1.name AS CEOName\n```",
            "MATCH (o:Organization {name: 'European'})<-[:HAS_SUBSIDIARY]-(sub:Organization)-[:HAS_CEO]->(p:Person)\nRETURN p"
        ]
    },
    {
        "question": "Find the actors who have starred in both animated and live-action movies.",
        "schema": "Node properties:\n- **Movie**\n  - `url`: STRING Example: \"https://themoviedb.org/movie/862\"\n  - `runtime`: INTEGER Min: 2, Max: 910\n  - `revenue`: INTEGER Min: 1, Max: 2787965087\n  - `imdbRating`: FLOAT Min: 1.6, Max: 9.6\n  - `released`: STRING Example: \"1995-11-22\"\n  - `countries`: LIST Min Size: 1, Max Size: 16\n  - `languages`: LIST Min Size: 1, Max Size: 19\n  - `plot`: STRING Example: \"A cowboy doll is profoundly threatened and jealous\"\n  - `imdbVotes`: INTEGER Min: 13, Max: 1626900\n  - `imdbId`: STRING Example: \"0114709\"\n  - `year`: INTEGER Min: 1902, Max: 2016\n  - `poster`: STRING Example: \"https://image.tmdb.org/t/p/w440_and_h660_face/uXDf\"\n  - `movieId`: STRING Example: \"1\"\n  - `tmdbId`: STRING Example: \"862\"\n  - `title`: STRING Example: \"Toy Story\"\n  - `budget`: INTEGER Min: 1, Max: 380000000\n- **Genre**\n  - `name`: STRING Example: \"Adventure\"\n- **User**\n  - `userId`: STRING Example: \"1\"\n  - `name`: STRING Example: \"Omar Huffman\"\n- **Actor**\n  - `url`: STRING Example: \"https://themoviedb.org/person/1271225\"\n  - `name`: STRING Example: \"Fran\u00e7ois Lallement\"\n  - `tmdbId`: STRING Example: \"1271225\"\n  - `bornIn`: STRING Example: \"France\"\n  - `bio`: STRING Example: \"\u200bFrom Wikipedia, the free encyclopedia  Lillian Di\"\n  - `died`: DATE Example: \"1954-01-01\"\n  - `born`: DATE Example: \"1877-02-04\"\n  - `imdbId`: STRING Example: \"2083046\"\n  - `poster`: STRING Example: \"https://image.tmdb.org/t/p/w440_and_h660_face/6DCW\"\n- **Director**\n  - `url`: STRING Example: \"https://themoviedb.org/person/88953\"\n  - `bornIn`: STRING Example: \"Burchard, Nebraska, USA\"\n  - `born`: DATE Min: 1861-12-08, Max: 2018-05-01\n  - `died`: DATE Min: 1930-08-26, Max: 2976-09-29\n  - `tmdbId`: STRING Example: \"88953\"\n  - `imdbId`: STRING Example: \"0516001\"\n  - `name`: STRING Example: \"Harold Lloyd\"\n  - `poster`: STRING Example: \"https://image.tmdb.org/t/p/w440_and_h660_face/er4Z\"\n  - `bio`: STRING Example: \"Harold Lloyd has been called the cinema\u2019s \u201cfirst m\"\n- **Person**\n  - `url`: STRING Example: \"https://themoviedb.org/person/1271225\"\n  - `died`: DATE Example: \"1954-01-01\"\n  - `bornIn`: STRING Example: \"France\"\n  - `born`: DATE Example: \"1877-02-04\"\n  - `imdbId`: STRING Example: \"2083046\"\n  - `name`: STRING Example: \"Fran\u00e7ois Lallement\"\n  - `poster`: STRING Example: \"https://image.tmdb.org/t/p/w440_and_h660_face/6DCW\"\n  - `tmdbId`: STRING Example: \"1271225\"\n  - `bio`: STRING Example: \"\u200bFrom Wikipedia, the free encyclopedia  Lillian Di\"\nRelationship properties:\n- **RATED**\n  - `rating: FLOAT` Example: \"2.0\"\n  - `timestamp: INTEGER` Example: \"1260759108\"\n- **ACTED_IN**\n  - `role: STRING` Example: \"Officer of the Marines (uncredited)\"\n- **DIRECTED**\n  - `role: STRING` \nThe relationships:\n(:Movie)-[:IN_GENRE]->(:Genre)\n(:User)-[:RATED]->(:Movie)\n(:Actor)-[:ACTED_IN]->(:Movie)\n(:Actor)-[:DIRECTED]->(:Movie)\n(:Director)-[:DIRECTED]->(:Movie)\n(:Director)-[:ACTED_IN]->(:Movie)\n(:Person)-[:ACTED_IN]->(:Movie)\n(:Person)-[:DIRECTED]->(:Movie)",
        "gold_cypher": "MATCH (animationGenre:Genre {name: 'Animation'})<-[:IN_GENRE]-(animatedMovies:Movie) WITH animationGenre, animatedMovies MATCH (animatedMovies)<-[:ACTED_IN]-(animatedActors:Actor) WITH animationGenre, animatedMovies, animatedActors MATCH (otherMovies:Movie) WHERE NOT (:Genre {name: 'Animation'})<-[:IN_GENRE]-(otherMovies) WITH animationGenre, animatedMovies, animatedActors, otherMovies MATCH (otherMovies)<-[:ACTED_IN]-(otherActors:Actor) WITH animationGenre, animatedMovies, animatedActors, otherMovies, otherActors WHERE animatedActors = otherActors RETURN DISTINCT animatedActors.name",
        "database": "recommendations",
        "full_responses": [
            "MATCH (m1:Movie {title: 'Toy Story'})-[:IN_GENRE]->(g:Genre {name: 'Animation'})-[:IN_GENRE]->(m2:Movie)-[:IN_GENRE]->(g2:Genre {name: 'Live Action'})\nMATCH (a:Actor)-[:ACTED_IN]->(m1)\nMATCH (a)-[:ACTED_IN]->(m2)\nRETURN a.name",
            "MATCH (m:Movie)-[r:IN_GENRE]->(g:Genre {name: 'Animation'})-[:IN_GENRE]->(m2:Movie)-[r2:IN_GENRE]->(g2:Genre {name: 'Live Action'})\nRETURN m.title AS animated_movie, m2.title AS live_action_movie",
            "MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)\nWHERE m.title CONTAINS 'Animated' OR m.title CONTAINS 'Live Action'\nRETURN a.name",
            "MATCH (m1:Movie)-[:IN_GENRE]->(g:Genre {name: \"Animated\"})\nMATCH (m2:Movie)-[:IN_GENRE]->(g:Genre {name: \"Live Action\"})\nMATCH (actor:Actor)-[:ACTED_IN]->(m1)\nMATCH (actor:Actor)-[:ACTED_IN]->(m2)\nRETURN DISTINCT actor.name",
            "MATCH (m:Movie {year: 2016})\nWITH m\nMATCH (a:Actor)-[r:ACTED_IN]->(m)\nWHERE m.year = 2016 AND a.name CONTAINS 'animated' OR a.name CONTAINS 'live-action'\nRETURN DISTINCT a.name"
        ],
        "generated_cyphers": [
            "MATCH (m1:Movie {title: 'Toy Story'})-[:IN_GENRE]->(g:Genre {name: 'Animation'})-[:IN_GENRE]->(m2:Movie)-[:IN_GENRE]->(g2:Genre {name: 'Live Action'})\nMATCH (a:Actor)-[:ACTED_IN]->(m1)\nMATCH (a)-[:ACTED_IN]->(m2)\nRETURN a.name",
            "MATCH (m:Movie)-[r:IN_GENRE]->(g:Genre {name: 'Animation'})-[:IN_GENRE]->(m2:Movie)-[r2:IN_GENRE]->(g2:Genre {name: 'Live Action'})\nRETURN m.title AS animated_movie, m2.title AS live_action_movie",
            "MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)\nWHERE m.title CONTAINS 'Animated' OR m.title CONTAINS 'Live Action'\nRETURN a.name",
            "MATCH (m1:Movie)-[:IN_GENRE]->(g:Genre {name: \"Animated\"})\nMATCH (m2:Movie)-[:IN_GENRE]->(g:Genre {name: \"Live Action\"})\nMATCH (actor:Actor)-[:ACTED_IN]->(m1)\nMATCH (actor:Actor)-[:ACTED_IN]->(m2)\nRETURN DISTINCT actor.name",
            "MATCH (m:Movie {year: 2016})\nWITH m\nMATCH (a:Actor)-[r:ACTED_IN]->(m)\nWHERE m.year = 2016 AND a.name CONTAINS 'animated' OR a.name CONTAINS 'live-action'\nRETURN DISTINCT a.name"
        ]
    },
    {
        "question": "\"reflect all possible patterns linking DataCenters to IP adreses\"",
        "schema": "Node properties:\nDataCenter {name: STRING, location: STRING}\nRouter {name: STRING, zone: INTEGER}\nEgress {name: STRING}\nInterface {ip: STRING}\nNetwork {ip: STRING, size: INTEGER, zone: INTEGER}\nZone {ip: STRING, size: INTEGER, zone: INTEGER}\nRack {name: STRING, zone: INTEGER, rack: INTEGER}\nSwitch {ip: STRING, rack: INTEGER}\nType {id: INTEGER, type: STRING, ram: INTEGER, name: STRING, disk: INTEGER, cpu: INTEGER}\nMachine {name: STRING}\nSoftware {name: STRING, versions: LIST, ports: LIST, dependencies: LIST}\nOS {name: STRING, startTime: INTEGER}\nService {pid: INTEGER, name: STRING, startTime: INTEGER}\nApplication {name: STRING, startTime: INTEGER, pid: INTEGER}\nVersion {name: STRING}\nProcess {name: STRING, startTime: INTEGER, pid: INTEGER}\nPort {port: INTEGER}\nRelationship properties:\n\nThe relationships:\n(:DataCenter)-[:CONTAINS]->(:Rack)\n(:DataCenter)-[:CONTAINS]->(:Router)\n(:DataCenter)-[:CONTAINS]->(:Egress)\n(:Router)-[:ROUTES]->(:Interface)\n(:Egress)-[:ROUTES]->(:Interface)\n(:Interface)-[:EXPOSES]->(:Port)\n(:Interface)-[:CONNECTS]->(:Interface)\n(:Network)-[:ROUTES]->(:Interface)\n(:Zone)-[:ROUTES]->(:Interface)\n(:Rack)-[:HOLDS]->(:Machine)\n(:Rack)-[:HOLDS]->(:Switch)\n(:Switch)-[:ROUTES]->(:Interface)\n(:Machine)-[:RUNS]->(:OS)\n(:Machine)-[:RUNS]->(:Process)\n(:Machine)-[:RUNS]->(:Application)\n(:Machine)-[:RUNS]->(:Service)\n(:Machine)-[:ROUTES]->(:Interface)\n(:Machine)-[:TYPE]->(:Type)\n(:Software)-[:VERSION]->(:Version)\n(:Software)-[:DEPENDS_ON]->(:Version)\n(:Software)-[:DEPENDS_ON]->(:Software)\n(:Software)-[:DEPENDS_ON]->(:Application)\n(:Software)-[:DEPENDS_ON]->(:Service)\n(:OS)-[:INSTANCE]->(:Version)\n(:Service)-[:INSTANCE]->(:Software)\n(:Service)-[:INSTANCE]->(:Service)\n(:Service)-[:INSTANCE]->(:Application)\n(:Service)-[:INSTANCE]->(:Version)\n(:Service)-[:LISTENS]->(:Port)\n(:Application)-[:LISTENS]->(:Port)\n(:Application)-[:INSTANCE]->(:Software)\n(:Application)-[:INSTANCE]->(:Application)\n(:Application)-[:DEPENDS_ON]->(:Service)\n(:Application)-[:DEPENDS_ON]->(:Process)\n(:Version)-[:PREVIOUS]->(:Version)\n(:Process)-[:INSTANCE]->(:Software)\n(:Process)-[:INSTANCE]->(:Application)\n(:Process)-[:INSTANCE]->(:Version)\n(:Process)-[:INSTANCE]->(:Service)\n(:Process)-[:LISTENS]->(:Port)\n(:Process)-[:DEPENDS_ON]->(:Service)\n(:Process)-[:DEPENDS_ON]->(:Process)",
        "gold_cypher": "MATCH (dc:DataCenter)-[:CONTAINS]->(r:Router)-[:ROUTES]->(intf:Interface) RETURN dc.name AS DataCenterName, intf.ip AS IPAddress UNION MATCH (dc:DataCenter)-[:CONTAINS]->(e:Egress)-[:ROUTES]->(intf:Interface) RETURN dc.name AS DataCenterName, intf.ip AS IPAddress UNION MATCH (dc:DataCenter)-[:CONTAINS]->(:Rack)-[:HOLDS]->(:Machine)-[:ROUTES]->(intf:Interface) RETURN dc.name AS DataCenterName, intf.ip AS IPAddress UNION MATCH (dc:DataCenter)-[:CONTAINS]->(:Rack)-[:HOLDS]->(:Switch)-[:ROUTES]->(intf:Interface) RETURN dc.name AS DataCenterName, intf.ip AS IPAddress",
        "database": "network",
        "full_responses": [
            "MATCH (dc:DataCenter)-[:CONTAINS]->(r:Rack)-[:HOLDS]->(m:Machine)-[:RUNS]->(o:OS)-[:INSTANCE]->(v:Version)\nMATCH (dc)-[:CONTAINS]->(r)-[:HOLDS]->(m)-[:RUNS]->(p:Process)-[:INSTANCE]->(v)\nMATCH (dc)-[:CONTAINS]->(r)-[:HOLDS]->(m)-[:RUNS]->(app:Application)-[:INSTANCE]->(v)\nMATCH (dc)-[:CONTAINS]->(r)-[:HOLDS]->(m)-[:RUNS]->(s:Service)-[:INSTANCE]->(v)\nMATCH (dc)-[:CONTAINS]->(r)-[:HOLDS]->(m)-[:ROUTES]->(i:Interface)-[:EXPOSES]->(p)\nMATCH (dc)-[:CONTAINS]->(r)-[:HOLDS]->(m)-[:ROUTES]->(i:Interface)-[:CONNECTS]->(i2)\nMATCH (dc)-[:CONTAINS]->(r)-[:HOLDS]->(m)-[:ROUTES]->(n:Network)-[:ROUTES]->(i)\nMATCH (dc)-[:CONTAINS]->(r)-[:HOLDS]->(m)-[:ROUTES]->(z:Zone)-[:ROUTES]->(i)\nMATCH (dc)-[:CONTAINS]->(r)-[:HOLDS]->(m)-[:TYPE]->(t:Type)\nRETURN dc, r, m, o, v, p, app, s, i, i2, n, z, t",
            "MATCH p=(d:DataCenter)-[*]-(ip:Interface)\nRETURN p",
            "MATCH (d:DataCenter)-[*]->(i:Interface)-[*]->(ip:IP) RETURN d.name, i.name, ip.ip",
            "```cypher\nMATCH (dc:DataCenter)-[r:CONTAINS]->(rack:Rack)-[h:HOLDS]->(m:Machine)-[ro:ROUTES]->(i:Interface)-[ex:EXPOSES]->(p:Port)\nRETURN dc.name AS DataCenterName, dc.location AS DataCenterLocation, m.name AS MachineName, i.ip AS InterfaceIP, p.port AS Port\n```",
            "```\nMATCH p=(n:DataCenter)-[:CONTAINS*]->(m)\nRETURN p\n```"
        ],
        "generated_cyphers": [
            "MATCH (dc:DataCenter)-[:CONTAINS]->(r:Rack)-[:HOLDS]->(m:Machine)-[:RUNS]->(o:OS)-[:INSTANCE]->(v:Version)\nMATCH (dc)-[:CONTAINS]->(r)-[:HOLDS]->(m)-[:RUNS]->(p:Process)-[:INSTANCE]->(v)\nMATCH (dc)-[:CONTAINS]->(r)-[:HOLDS]->(m)-[:RUNS]->(app:Application)-[:INSTANCE]->(v)\nMATCH (dc)-[:CONTAINS]->(r)-[:HOLDS]->(m)-[:RUNS]->(s:Service)-[:INSTANCE]->(v)\nMATCH (dc)-[:CONTAINS]->(r)-[:HOLDS]->(m)-[:ROUTES]->(i:Interface)-[:EXPOSES]->(p)\nMATCH (dc)-[:CONTAINS]->(r)-[:HOLDS]->(m)-[:ROUTES]->(i:Interface)-[:CONNECTS]->(i2)\nMATCH (dc)-[:CONTAINS]->(r)-[:HOLDS]->(m)-[:ROUTES]->(n:Network)-[:ROUTES]->(i)\nMATCH (dc)-[:CONTAINS]->(r)-[:HOLDS]->(m)-[:ROUTES]->(z:Zone)-[:ROUTES]->(i)\nMATCH (dc)-[:CONTAINS]->(r)-[:HOLDS]->(m)-[:TYPE]->(t:Type)\nRETURN dc, r, m, o, v, p, app, s, i, i2, n, z, t",
            "MATCH p=(d:DataCenter)-[*]-(ip:Interface)\nRETURN p",
            "MATCH (d:DataCenter)-[*]->(i:Interface)-[*]->(ip:IP) RETURN d.name, i.name, ip.ip",
            "```cypher\nMATCH (dc:DataCenter)-[r:CONTAINS]->(rack:Rack)-[h:HOLDS]->(m:Machine)-[ro:ROUTES]->(i:Interface)-[ex:EXPOSES]->(p:Port)\nRETURN dc.name AS DataCenterName, dc.location AS DataCenterLocation, m.name AS MachineName, i.ip AS InterfaceIP, p.port AS Port\n```",
            "```\nMATCH p=(n:DataCenter)-[:CONTAINS*]->(m)\nRETURN p\n```"
        ]
    },
    {
        "question": "Find the filings where the 'originator_bank' and 'beneficiary_bank' are both located in countries that are members of the European Union.",
        "schema": "Node properties:\n- **Country**\n  - `location`: POINT \n  - `code`: STRING Example: \"AFG\"\n  - `name`: STRING Example: \"Afghanistan\"\n  - `tld`: STRING Example: \"AF\"\n- **Filing**\n  - `begin`: DATE_TIME Min: 2000-02-08T00:00:00Z, Max: 2017-09-05T00:00:00Z\n  - `end`: DATE_TIME Min: 2000-02-08T00:00:00Z, Max: 2017-11-03T00:00:00Z\n  - `originator_bank_id`: STRING Example: \"cimb-bank-berhad\"\n  - `sar_id`: STRING Example: \"3297\"\n  - `beneficiary_bank`: STRING Example: \"Barclays Bank Plc\"\n  - `filer_org_name_id`: STRING Example: \"the-bank-of-new-york-mellon-corp\"\n  - `originator_bank_country`: STRING Example: \"Singapore\"\n  - `beneficiary_bank_country`: STRING Example: \"United Kingdom\"\n  - `filer_org_name`: STRING Example: \"The Bank of New York Mellon Corp.\"\n  - `originator_iso`: STRING Example: \"SGP\"\n  - `beneficiary_bank_id`: STRING Example: \"barclays-bank-plc-london-england-gbr\"\n  - `origin_lat`: STRING Example: \"1.3667\"\n  - `origin_lng`: STRING Example: \"103.8\"\n  - `end_date_format`: STRING Example: \"2015-09-25T00:00:00Z\"\n  - `begin_date_format`: STRING Example: \"2015-03-25T00:00:00Z\"\n  - `originator_bank`: STRING Example: \"CIMB Bank Berhad\"\n  - `beneficiary_lat`: STRING Example: \"54\"\n  - `beneficiary_iso`: STRING Example: \"GBR\"\n  - `beneficiary_lng`: STRING Example: \"-2\"\n  - `begin_date`: STRING Example: \"Mar 25, 2015\"\n  - `id`: STRING Example: \"223254\"\n  - `end_date`: STRING Example: \"Sep 25, 2015\"\n  - `amount`: INTEGER Min: 1.18, Max: 2721000000\n  - `number`: INTEGER Min: 1, Max: 174\n- **Entity**\n  - `id`: STRING Example: \"the-bank-of-new-york-mellon-corp\"\n  - `location`: POINT \n  - `name`: STRING Example: \"The Bank of New York Mellon Corp.\"\n  - `country`: STRING Example: \"CHN\"\nRelationship properties:\n\nThe relationships:\n(:Filing)-[:BENEFITS]->(:Entity)\n(:Filing)-[:CONCERNS]->(:Entity)\n(:Filing)-[:ORIGINATOR]->(:Entity)\n(:Entity)-[:FILED]->(:Filing)\n(:Entity)-[:COUNTRY]->(:Country)",
        "gold_cypher": "MATCH (f:Filing)-[:ORIGINATOR]->(ob:Entity)-[:COUNTRY]->(oc:Country),       (f:Filing)-[:BENEFITS]->(bb:Entity)-[:COUNTRY]->(bc:Country) WHERE oc.code IN ['AUT', 'BEL', 'BGR', 'HRV', 'CYP', 'CZE', 'DNK', 'EST', 'FIN', 'FRA', 'DEU', 'GRC', 'HUN', 'IRL', 'ITA', 'LVA', 'LTU', 'LUX', 'MLT', 'NLD', 'POL', 'PRT', 'ROU', 'SVK', 'SVN', 'ESP', 'SWE']   AND bc.code IN ['AUT', 'BEL', 'BGR', 'HRV', 'CYP', 'CZE', 'DNK', 'EST', 'FIN', 'FRA', 'DEU', 'GRC', 'HUN', 'IRL', 'ITA', 'LVA', 'LTU', 'LUX', 'MLT', 'NLD', 'POL', 'PRT', 'ROU', 'SVK', 'SVN', 'ESP', 'SWE'] RETURN f.sar_id",
        "database": "fincen",
        "full_responses": [
            "```cypher\nMATCH (f:Filing)-[:ORIGINATOR]->(o:Entity)-[r:CONCERNS|BENEFITS]->(b:Entity)\nWHERE r.originator_bank_country IN ['AT', 'BE', 'BG', 'CY', 'CZ', 'DK', 'EE', 'FI', 'FR', 'DE', 'GR', 'HU', 'IE', 'IT', 'LV', 'LT', 'LU', 'MT', 'NL', 'PL', 'PT', 'RO', 'SK', 'SI', 'ES', 'SE', 'CH', 'CY', 'CZ', 'DK', 'EE', 'FI', 'FR', 'DE', 'GR', 'HU', 'IE', 'IT', 'LV', 'LT', 'LU', 'MT', 'NL', 'PL', 'PT', 'RO', 'SK', 'SI', 'ES', 'SE', 'CH', 'CY', 'CZ', 'DK', 'EE', 'FI', 'FR', 'DE', 'GR', 'HU', 'IE', 'IT', 'LV', 'LT', 'LU', 'MT', 'NL', 'PL', 'PT', 'RO', 'SK', 'SI', 'ES', 'SE', 'CH', 'CY', 'CZ', 'DK', 'EE', 'FI', 'FR', 'DE', 'GR', 'HU', 'IE', 'IT', 'LV', 'LT', 'LU', 'MT', 'NL', 'PL', 'PT', 'RO', 'SK', 'SI', 'ES', 'SE', 'CH', 'CY', 'CZ', 'DK', 'EE', 'FI', 'FR', 'DE', 'GR', 'HU', 'IE', 'IT', 'LV', 'LT', 'LU', 'MT', 'NL', 'PL', 'PT', 'RO', 'SK', 'SI', 'ES', 'SE', 'CH', 'CY', 'CZ', 'DK', 'EE', 'FI', 'FR', 'DE', 'GR', 'HU', 'IE', 'IT', 'LV', 'LT', 'LU', 'MT', 'NL', 'PL', 'PT', 'RO', 'SK', 'SI', 'ES', 'SE', 'CH', 'CY', 'CZ', 'DK', 'EE', 'FI', 'FR', 'DE', 'GR', 'HU', 'IE', 'IT', 'LV', 'LT', 'LU', 'MT', 'NL', 'PL', 'PT', 'RO', 'SK', 'SI', 'ES', 'SE', 'CH', 'CY', 'CZ', 'DK', 'EE', 'FI', 'FR', 'DE', 'GR', 'HU', 'IE', 'IT', 'LV', 'LT', 'LU', 'MT', 'NL', 'PL', 'PT', 'RO', 'SK', 'SI', 'ES', 'SE', 'CH', 'CY', 'CZ', 'DK', 'EE', 'FI', 'FR', 'DE', 'GR', 'HU', 'IE', 'IT', 'LV', 'LT', 'LU', 'MT', 'NL', 'PL', 'PT', 'RO', 'SK', 'SI', 'ES', 'SE', 'CH', 'CY', 'CZ', 'DK', 'EE', 'FI', 'FR', 'DE', 'GR', 'HU', 'IE', 'IT', 'LV', 'LT', 'LU', 'MT', 'NL', 'PL', 'PT', 'RO', 'SK', 'SI', 'ES', 'SE', 'CH', 'CY', 'CZ', 'DK', 'EE', 'FI', 'FR', 'DE', 'GR', 'HU', 'IE', 'IT', 'LV', 'LT', 'LU', 'MT', 'NL', 'PL', 'PT', 'RO', 'SK', 'SI', 'ES', 'SE', 'CH', 'CY', 'CZ', 'DK', 'EE', 'FI', 'FR', 'DE', 'GR', 'HU', 'IE', 'IT', 'LV', 'LT', 'LU', 'MT', 'NL', 'PL', 'PT', 'RO', 'SK', 'SI', 'ES', 'SE', 'CH', 'CY', 'CZ', 'DK', 'EE', 'FI', 'FR', 'DE', 'GR', 'HU', 'IE', 'IT', 'LV', 'LT', 'LU', 'MT', 'NL', 'PL', 'PT', 'RO', 'SK', 'SI', 'ES', 'SE', 'CH', 'CY', 'CZ', 'DK', 'EE', 'FI', 'FR', 'DE",
            "MATCH (c1:Country {name: \"United Kingdom\"}), (c2:Country {name: \"Germany\"}), (c3:Country {name: \"France\"}), (c4:Country {name: \"Belgium\"}), (c5:Country {name: \"Switzerland\"}), (c6:Country {name: \"Netherlands\"}), (c7:Country {name: \"Denmark\"}), (c8:Country {name: \"Lithuania\"}), (c9:Country {name: \"Croatia\"}), (c10:Country {name: \"Italy\"}), (c11:Country {name: \"Portugal\"}), (c12:Country {name: \"Spain\"}), (c13:Country {name: \"Greece\"}), (c14:Country {name: \"Ireland\"}), (c15:Country {name: \"Albania\"}), (c16:Country {name: \"Slovenia\"}), (c17:Country {name: \"Romania\"}), (c18:Country {name: \"Czech Republic\"}), (c19:Country {name: \"Austria\"}), (c20:Country {name: \"Bulgaria\"}), (c21:Country {name: \"Poland\"}), (c22:Country {name: \"Hungary\"}), (c23:Country {name: \"Serbia\"}), (c24:Country {name: \"Macedonia\"}), (c25:Country {name: \"Bosnia and Herzegovina\"}), (c26:Country {name: \"Estonia\"}), (c27:Country {name: \"Latvia\"}), (c28:Country {name: \"Slovakia\"}), (c29:Country {name: \"Czech Republic\"}), (c30:Country {name: \"Slovenia\"}), (c31:Country {name: \"Albania\"}), (c32:Country {name: \"Montenegro\"}), (c33:Country {name: \"Bosnia and Herzegovina\"}), (c34:Country {name: \"Kosovo\"}), (c35:Country {name: \"Slovenia\"}), (c36:Country {name: \"Croatia\"}), (c37:Country {name: \"Serbia\"}), (c38:Country {name: \"Bosnia and Herzegovina\"}), (c39:Country {name: \"Albania\"}), (c40:Country {name: \"Bosnia and Herzegovina\"}), (c41:Country {name: \"Croatia\"}), (c42:Country {name: \"Slovenia\"}), (c43:Country {name: \"Kosovo\"}), (c44:Country {name: \"Albania\"}), (c45:Country {name: \"Bosnia and Herzegovina\"}), (c46:Country {name: \"Croatia\"}), (c47:Country {name: \"Slovenia\"}), (c48:Country {name: \"Kosovo\"}), (c49:Country {name: \"Albania\"}), (c50:Country {name: \"Bosnia and Herzegovina\"}), (c51:Country {name: \"Croatia\"}), (c52:Country {name: \"Slovenia\"}), (c53:Country {name: \"Kosovo\"}), (c54:Country {name: \"Albania\"}), (c55:Country {name: \"Bosnia and Herzegovina\"}), (c56:Country {name: \"Croatia\"}), (c57:Country {name: \"Slovenia\"}), (c58:Country {name: \"Kosovo\"}), (c59:Country {name: \"Albania\"}), (c60:Country {name: \"Bosnia and Herzegovina\"}), (c61:Country {name: \"Croatia\"}), (c62:Country {name: \"Slovenia\"}), (c63:Country {name: \"Kosovo\"}), (c64:Country {name: \"Albania\"}), (c65:Country {name: \"Bosnia and Herzegovina\"}), (c66:Country {name: \"Croatia\"}), (c67:Country {name: \"Slovenia\"}), (c68:Country",
            "MATCH (f:Filing)-[:CONCERNS|:BENEFITS|:ORIGINATOR]->(e1:Entity)<-[:COUNTRY]->(e2:Country)\nWHERE e1.location IS NOT NULL AND e2.tld IN ['EU', 'GBR', 'CHN', 'DEU', 'ESP', 'ITA', 'FR', 'AT', 'LU', 'FI', 'SE', 'CZ', 'GR', 'NL', 'PL', 'ES', 'EE', 'LT', 'LV', 'HU', 'BG', 'RO', 'SI', 'SK', 'ES', 'TR']\nRETURN f",
            "```\nMATCH (f:Filing)-[:ORIGINATOR]->(o:Entity)-[:COUNTRY]->(oc:Country)-[:MEMBERS_OF_EU]->(:EU)\nMATCH (f)-[:BENEFICIARY]->(b:Entity)-[:COUNTRY]->(bc:Country)-[:MEMBERS_OF_EU]->(:EU)\nWHERE oc.id = bc.id\nRETURN f\n```",
            "MATCH (f:Filing)-[:ORIGINATOR]->(o:Entity)-[:COUNTRY]->(oc:Country)-[:MEMBER_OF]->(eu:EU)\nMATCH (f)-[:BENEFICIARY]->(b:Entity)-[:COUNTRY]->(bc:Country)-[:MEMBER_OF]->(eu)\nRETURN f"
        ],
        "generated_cyphers": [
            "```cypher\nMATCH (f:Filing)-[:ORIGINATOR]->(o:Entity)-[r:CONCERNS|BENEFITS]->(b:Entity)\nWHERE r.originator_bank_country IN ['AT', 'BE', 'BG', 'CY', 'CZ', 'DK', 'EE', 'FI', 'FR', 'DE', 'GR', 'HU', 'IE', 'IT', 'LV', 'LT', 'LU', 'MT', 'NL', 'PL', 'PT', 'RO', 'SK', 'SI', 'ES', 'SE', 'CH', 'CY', 'CZ', 'DK', 'EE', 'FI', 'FR', 'DE', 'GR', 'HU', 'IE', 'IT', 'LV', 'LT', 'LU', 'MT', 'NL', 'PL', 'PT', 'RO', 'SK', 'SI', 'ES', 'SE', 'CH', 'CY', 'CZ', 'DK', 'EE', 'FI', 'FR', 'DE', 'GR', 'HU', 'IE', 'IT', 'LV', 'LT', 'LU', 'MT', 'NL', 'PL', 'PT', 'RO', 'SK', 'SI', 'ES', 'SE', 'CH', 'CY', 'CZ', 'DK', 'EE', 'FI', 'FR', 'DE', 'GR', 'HU', 'IE', 'IT', 'LV', 'LT', 'LU', 'MT', 'NL', 'PL', 'PT', 'RO', 'SK', 'SI', 'ES', 'SE', 'CH', 'CY', 'CZ', 'DK', 'EE', 'FI', 'FR', 'DE', 'GR', 'HU', 'IE', 'IT', 'LV', 'LT', 'LU', 'MT', 'NL', 'PL', 'PT', 'RO', 'SK', 'SI', 'ES', 'SE', 'CH', 'CY', 'CZ', 'DK', 'EE', 'FI', 'FR', 'DE', 'GR', 'HU', 'IE', 'IT', 'LV', 'LT', 'LU', 'MT', 'NL', 'PL', 'PT', 'RO', 'SK', 'SI', 'ES', 'SE', 'CH', 'CY', 'CZ', 'DK', 'EE', 'FI', 'FR', 'DE', 'GR', 'HU', 'IE', 'IT', 'LV', 'LT', 'LU', 'MT', 'NL', 'PL', 'PT', 'RO', 'SK', 'SI', 'ES', 'SE', 'CH', 'CY', 'CZ', 'DK', 'EE', 'FI', 'FR', 'DE', 'GR', 'HU', 'IE', 'IT', 'LV', 'LT', 'LU', 'MT', 'NL', 'PL', 'PT', 'RO', 'SK', 'SI', 'ES', 'SE', 'CH', 'CY', 'CZ', 'DK', 'EE', 'FI', 'FR', 'DE', 'GR', 'HU', 'IE', 'IT', 'LV', 'LT', 'LU', 'MT', 'NL', 'PL', 'PT', 'RO', 'SK', 'SI', 'ES', 'SE', 'CH', 'CY', 'CZ', 'DK', 'EE', 'FI', 'FR', 'DE', 'GR', 'HU', 'IE', 'IT', 'LV', 'LT', 'LU', 'MT', 'NL', 'PL', 'PT', 'RO', 'SK', 'SI', 'ES', 'SE', 'CH', 'CY', 'CZ', 'DK', 'EE', 'FI', 'FR', 'DE', 'GR', 'HU', 'IE', 'IT', 'LV', 'LT', 'LU', 'MT', 'NL', 'PL', 'PT', 'RO', 'SK', 'SI', 'ES', 'SE', 'CH', 'CY', 'CZ', 'DK', 'EE', 'FI', 'FR', 'DE', 'GR', 'HU', 'IE', 'IT', 'LV', 'LT', 'LU', 'MT', 'NL', 'PL', 'PT', 'RO', 'SK', 'SI', 'ES', 'SE', 'CH', 'CY', 'CZ', 'DK', 'EE', 'FI', 'FR', 'DE', 'GR', 'HU', 'IE', 'IT', 'LV', 'LT', 'LU', 'MT', 'NL', 'PL', 'PT', 'RO', 'SK', 'SI', 'ES', 'SE', 'CH', 'CY', 'CZ', 'DK', 'EE', 'FI', 'FR', 'DE",
            "MATCH (c1:Country {name: \"United Kingdom\"}), (c2:Country {name: \"Germany\"}), (c3:Country {name: \"France\"}), (c4:Country {name: \"Belgium\"}), (c5:Country {name: \"Switzerland\"}), (c6:Country {name: \"Netherlands\"}), (c7:Country {name: \"Denmark\"}), (c8:Country {name: \"Lithuania\"}), (c9:Country {name: \"Croatia\"}), (c10:Country {name: \"Italy\"}), (c11:Country {name: \"Portugal\"}), (c12:Country {name: \"Spain\"}), (c13:Country {name: \"Greece\"}), (c14:Country {name: \"Ireland\"}), (c15:Country {name: \"Albania\"}), (c16:Country {name: \"Slovenia\"}), (c17:Country {name: \"Romania\"}), (c18:Country {name: \"Czech Republic\"}), (c19:Country {name: \"Austria\"}), (c20:Country {name: \"Bulgaria\"}), (c21:Country {name: \"Poland\"}), (c22:Country {name: \"Hungary\"}), (c23:Country {name: \"Serbia\"}), (c24:Country {name: \"Macedonia\"}), (c25:Country {name: \"Bosnia and Herzegovina\"}), (c26:Country {name: \"Estonia\"}), (c27:Country {name: \"Latvia\"}), (c28:Country {name: \"Slovakia\"}), (c29:Country {name: \"Czech Republic\"}), (c30:Country {name: \"Slovenia\"}), (c31:Country {name: \"Albania\"}), (c32:Country {name: \"Montenegro\"}), (c33:Country {name: \"Bosnia and Herzegovina\"}), (c34:Country {name: \"Kosovo\"}), (c35:Country {name: \"Slovenia\"}), (c36:Country {name: \"Croatia\"}), (c37:Country {name: \"Serbia\"}), (c38:Country {name: \"Bosnia and Herzegovina\"}), (c39:Country {name: \"Albania\"}), (c40:Country {name: \"Bosnia and Herzegovina\"}), (c41:Country {name: \"Croatia\"}), (c42:Country {name: \"Slovenia\"}), (c43:Country {name: \"Kosovo\"}), (c44:Country {name: \"Albania\"}), (c45:Country {name: \"Bosnia and Herzegovina\"}), (c46:Country {name: \"Croatia\"}), (c47:Country {name: \"Slovenia\"}), (c48:Country {name: \"Kosovo\"}), (c49:Country {name: \"Albania\"}), (c50:Country {name: \"Bosnia and Herzegovina\"}), (c51:Country {name: \"Croatia\"}), (c52:Country {name: \"Slovenia\"}), (c53:Country {name: \"Kosovo\"}), (c54:Country {name: \"Albania\"}), (c55:Country {name: \"Bosnia and Herzegovina\"}), (c56:Country {name: \"Croatia\"}), (c57:Country {name: \"Slovenia\"}), (c58:Country {name: \"Kosovo\"}), (c59:Country {name: \"Albania\"}), (c60:Country {name: \"Bosnia and Herzegovina\"}), (c61:Country {name: \"Croatia\"}), (c62:Country {name: \"Slovenia\"}), (c63:Country {name: \"Kosovo\"}), (c64:Country {name: \"Albania\"}), (c65:Country {name: \"Bosnia and Herzegovina\"}), (c66:Country {name: \"Croatia\"}), (c67:Country {name: \"Slovenia\"}), (c68:Country",
            "MATCH (f:Filing)-[:CONCERNS|:BENEFITS|:ORIGINATOR]->(e1:Entity)<-[:COUNTRY]->(e2:Country)\nWHERE e1.location IS NOT NULL AND e2.tld IN ['EU', 'GBR', 'CHN', 'DEU', 'ESP', 'ITA', 'FR', 'AT', 'LU', 'FI', 'SE', 'CZ', 'GR', 'NL', 'PL', 'ES', 'EE', 'LT', 'LV', 'HU', 'BG', 'RO', 'SI', 'SK', 'ES', 'TR']\nRETURN f",
            "```\nMATCH (f:Filing)-[:ORIGINATOR]->(o:Entity)-[:COUNTRY]->(oc:Country)-[:MEMBERS_OF_EU]->(:EU)\nMATCH (f)-[:BENEFICIARY]->(b:Entity)-[:COUNTRY]->(bc:Country)-[:MEMBERS_OF_EU]->(:EU)\nWHERE oc.id = bc.id\nRETURN f\n```",
            "MATCH (f:Filing)-[:ORIGINATOR]->(o:Entity)-[:COUNTRY]->(oc:Country)-[:MEMBER_OF]->(eu:EU)\nMATCH (f)-[:BENEFICIARY]->(b:Entity)-[:COUNTRY]->(bc:Country)-[:MEMBER_OF]->(eu)\nRETURN f"
        ]
    },
    {
        "question": "List the characters who interacted with both 'Stevron-Frey' and 'Walder-Rivers' in any book.",
        "schema": "Node properties:\n- **Character**\n  - `centrality`: FLOAT Min: 0.0, Max: 1.0\n  - `book45PageRank`: FLOAT Min: 0.15000000000000002, Max: 11.409916274911177\n  - `fastrf_embedding`: LIST Min Size: 10, Max Size: 10\n  - `book1BetweennessCentrality`: FLOAT Min: 0.0, Max: 4638.53495125504\n  - `book1PageRank`: FLOAT Min: 0.15000000000000002, Max: 8.164174336296284\n  - `louvain`: INTEGER Min: 0, Max: 10\n  - `community`: INTEGER Min: 504, Max: 795\n  - `degree`: FLOAT Min: 0.0, Max: 300.0\n  - `name`: STRING Example: \"Addam-Marbrand\"\n  - `pagerank`: FLOAT Min: 0.15000000000000002, Max: 9.473142454730429\nRelationship properties:\n- **INTERACTS**\n  - `weight: INTEGER` Min: 3, Max:  334\n- **INTERACTS1**\n  - `weight: INTEGER` Min: 3, Max:  291\n  - `book: INTEGER` Min: 1, Max:  1\n- **INTERACTS2**\n  - `weight: INTEGER` Min: 3, Max:  92\n  - `book: INTEGER` Min: 2, Max:  2\n- **INTERACTS3**\n  - `weight: INTEGER` Min: 3, Max:  95\n  - `book: INTEGER` Min: 3, Max:  3\n- **INTERACTS45**\n  - `weight: INTEGER` Min: 3, Max:  96\n  - `book: INTEGER` Min: 45, Max:  45\nThe relationships:\n(:Character)-[:INTERACTS45]->(:Character)\n(:Character)-[:INTERACTS]->(:Character)\n(:Character)-[:INTERACTS1]->(:Character)\n(:Character)-[:INTERACTS3]->(:Character)\n(:Character)-[:INTERACTS2]->(:Character)",
        "gold_cypher": "MATCH (stevron:Character {name: 'Stevron-Frey'}) CALL {     WITH stevron     MATCH (stevron)-[:INTERACTS|:INTERACTS1|:INTERACTS2|:INTERACTS3|:INTERACTS45]-(char1)     RETURN collect(DISTINCT char1) AS stevron_interacted_with } MATCH (walder:Character {name: 'Walder-Rivers'}) CALL {     WITH walder     MATCH (walder)-[:INTERACTS|:INTERACTS1|:INTERACTS2|:INTERACTS3|:INTERACTS45]-(char2)     RETURN collect(DISTINCT char2) AS walder_interacted_with } RETURN apoc.coll.intersection(stevron_interacted_with, walder_interacted_with) AS characters_interacted_with_both",
        "database": "gameofthrones",
        "full_responses": [
            "```\nMATCH (a:Character)-[r1:INTERACTS|INTERACTS1|INTERACTS2|INTERACTS3|INTERACTS45]->(b:Character)-[r2:INTERACTS|INTERACTS1|INTERACTS2|INTERACTS3|INTERACTS45]->(c:Character)\nWHERE a.name = 'Stevron-Frey' AND b.name = 'Walder-Rivers'\nRETURN DISTINCT c.name\n```",
            "MATCH (c1:Character)-[r:INTERACTS45]->(c2:Character)\nWHERE c1.name = 'Stevron-Frey' AND c2.name = 'Walder-Rivers'\nRETURN c1, c2",
            "MATCH (a:Character)-[:INTERACTS45]->(b:Character)\nWHERE a.name = 'Stevron-Frey' AND b.name = 'Walder-Rivers'\nRETURN DISTINCT a.name, b.name",
            "```cypher\nMATCH (c1:Character)-[r1:INTERACTS]->(c2:Character)-[r2:INTERACTS]->(c3:Character)\nWHERE c1.name = 'Stevron-Frey' AND c2.name = 'Walder-Rivers'\nRETURN c3.name\n```",
            "MATCH (a:Character)-[r:INTERACTS45]->(b:Character)\nWHERE a.name = 'Stevron-Frey' AND b.name = 'Walder-Rivers'\nRETURN a, b"
        ],
        "generated_cyphers": [
            "```\nMATCH (a:Character)-[r1:INTERACTS|INTERACTS1|INTERACTS2|INTERACTS3|INTERACTS45]->(b:Character)-[r2:INTERACTS|INTERACTS1|INTERACTS2|INTERACTS3|INTERACTS45]->(c:Character)\nWHERE a.name = 'Stevron-Frey' AND b.name = 'Walder-Rivers'\nRETURN DISTINCT c.name\n```",
            "MATCH (c1:Character)-[r:INTERACTS45]->(c2:Character)\nWHERE c1.name = 'Stevron-Frey' AND c2.name = 'Walder-Rivers'\nRETURN c1, c2",
            "MATCH (a:Character)-[:INTERACTS45]->(b:Character)\nWHERE a.name = 'Stevron-Frey' AND b.name = 'Walder-Rivers'\nRETURN DISTINCT a.name, b.name",
            "```cypher\nMATCH (c1:Character)-[r1:INTERACTS]->(c2:Character)-[r2:INTERACTS]->(c3:Character)\nWHERE c1.name = 'Stevron-Frey' AND c2.name = 'Walder-Rivers'\nRETURN c3.name\n```",
            "MATCH (a:Character)-[r:INTERACTS45]->(b:Character)\nWHERE a.name = 'Stevron-Frey' AND b.name = 'Walder-Rivers'\nRETURN a, b"
        ]
    },
    {
        "question": "List the orders placed by customers who have placed orders for products in all categories except 'Grains/Cereals'.",
        "schema": "Node properties:\n- **Product**\n  - `productName`: STRING Example: \"Chai\"\n  - `quantityPerUnit`: STRING Example: \"10 boxes x 20 bags\"\n  - `unitsOnOrder`: INTEGER Min: 0, Max: 100\n  - `supplierID`: STRING Example: \"1\"\n  - `productID`: STRING Example: \"1\"\n  - `discontinued`: BOOLEAN \n  - `categoryID`: STRING Available options: ['1', '2', '7', '6', '8', '4', '3', '5']\n  - `reorderLevel`: INTEGER Min: 0, Max: 30\n  - `unitsInStock`: INTEGER Min: 0, Max: 125\n  - `unitPrice`: FLOAT Min: 2.5, Max: 263.5\n- **Category**\n  - `picture`: STRING Available options: ['0x151C2F00020000000D000E0014002100FFFFFFFF4269746D']\n  - `categoryID`: STRING Available options: ['1', '2', '3', '4', '5', '6', '7', '8']\n  - `description`: STRING Available options: ['Soft drinks, coffees, teas, beers, and ales', 'Sweet and savory sauces, relishes, spreads, and se', 'Desserts, candies, and sweet breads', 'Cheeses', 'Breads, crackers, pasta, and cereal', 'Prepared meats', 'Dried fruit and bean curd', 'Seaweed and fish']\n  - `categoryName`: STRING Available options: ['Beverages', 'Condiments', 'Confections', 'Dairy Products', 'Grains/Cereals', 'Meat/Poultry', 'Produce', 'Seafood']\n- **Supplier**\n  - `companyName`: STRING Example: \"Exotic Liquids\"\n  - `contactName`: STRING Example: \"Charlotte Cooper\"\n  - `homePage`: STRING Available options: ['NULL', '#CAJUN.HTM#', \"Mayumi's (on the World Wide Web)#http://www.micros\", '(03) 444-6588', 'Plutzer (on the World Wide Web)#http://www.microso', '(0544) 60603', '(1) 03.83.00.62', '(02) 555-4873', '(089) 6547667', '38.76.98.58']\n  - `phone`: STRING Example: \"(171) 555-2222\"\n  - `postalCode`: STRING Example: \"EC1 4SD\"\n  - `contactTitle`: STRING Example: \"Purchasing Manager\"\n  - `region`: STRING Example: \"NULL\"\n  - `address`: STRING Example: \"49 Gilbert St.\"\n  - `fax`: STRING Example: \"NULL\"\n  - `supplierID`: STRING Example: \"1\"\n  - `country`: STRING Example: \"UK\"\n  - `city`: STRING Example: \"London\"\n- **Customer**\n  - `fax`: STRING Example: \"030-0076545\"\n  - `companyName`: STRING Example: \"Alfreds Futterkiste\"\n  - `customerID`: STRING Example: \"ALFKI\"\n  - `phone`: STRING Example: \"030-0074321\"\n  - `contactName`: STRING Example: \"Maria Anders\"\n  - `contactTitle`: STRING Example: \"Sales Representative\"\n  - `region`: STRING Example: \"NULL\"\n  - `address`: STRING Example: \"Obere Str. 57\"\n  - `postalCode`: STRING Example: \"12209\"\n  - `country`: STRING Example: \"Germany\"\n  - `city`: STRING Example: \"Berlin\"\n- **Order**\n  - `shipName`: STRING Example: \"Vins et alcools Chevalier\"\n  - `requiredDate`: STRING Example: \"1996-08-01 00:00:00.000\"\n  - `shipCity`: STRING Example: \"Reims\"\n  - `employeeID`: STRING Available options: ['5', '6', '4', '3', '9', '1', '8', '2', '7']\n  - `shipPostalCode`: STRING Example: \"51100\"\n  - `shippedDate`: STRING Example: \"1996-07-16 00:00:00.000\"\n  - `freight`: STRING Example: \"32.38\"\n  - `orderDate`: STRING Example: \"1996-07-04 00:00:00.000\"\n  - `orderID`: STRING Example: \"10248\"\n  - `shipAddress`: STRING Example: \"59 rue de l'Abbaye\"\n  - `customerID`: STRING Example: \"VINET\"\n  - `shipCountry`: STRING Example: \"France\"\n  - `shipVia`: STRING Available options: ['3', '1', '2']\n  - `shipRegion`: STRING Example: \"NULL\"\nRelationship properties:\n- **ORDERS**\n  - `orderID: STRING` Example: \"10248\"\n  - `unitPrice: STRING` Example: \"34.80\"\n  - `productID: STRING` Example: \"72\"\n  - `quantity: INTEGER` Min: 1, Max:  130\n  - `discount: STRING` Example: \"0\"\nThe relationships:\n(:Product)-[:PART_OF]->(:Category)\n(:Supplier)-[:SUPPLIES]->(:Product)\n(:Customer)-[:PURCHASED]->(:Order)\n(:Order)-[:ORDERS]->(:Product)",
        "gold_cypher": "MATCH (c:Category {categoryName: 'Grains/Cereals'}) WITH c.categoryID AS excludedCategory MATCH (p:Product)-[:PART_OF]->(cat:Category) WHERE cat.categoryID <> excludedCategory WITH DISTINCT cat.categoryID AS categoryID WITH collect(categoryID) AS allOtherCategories MATCH (cust:Customer)-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)-[:PART_OF]->(cat:Category) WITH cust, collect(DISTINCT cat.categoryID) AS customerCategories, allOtherCategories WHERE customerCategories = allOtherCategories MATCH (cust)-[:PURCHASED]->(order:Order) RETURN DISTINCT order.orderID",
        "database": "northwind",
        "full_responses": [
            "MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)<-[r:PART_OF]-(ct:Category)\nWHERE c.customerID <> 'VINET' AND ct.categoryName <> 'Grains/Cereals'\nRETURN DISTINCT o.orderID, o.orderDate, o.customerID, o.shipAddress, o.shipCity, o.shipPostalCode, o.shipCountry",
            "```cypher\nMATCH (c:Customer)-[p:PURCHASED]->(o:Order)-[o2:ORDERS]->(p2:Product)-[:PART_OF]->(c2:Category)\nWHERE c.customerID <> 'ALFKI' AND c.customerID <> 'VINET' AND c.customerID <> 'WOLZA' AND c.customerID <> 'HANAR'\nAND NOT c2.categoryName = 'Grains/Cereals'\nRETURN o\n```",
            "MATCH (c:Customer)-[o:ORDERS]->(p:Product)-[cpr:PART_OF]->(ctg:Category)\nWHERE ctg.categoryName != 'Grains/Cereals'\nWITH DISTINCT c.customerID, c.customerName\nMATCH (c)-[p:PURCHASED]->(o)-[p2:ORDERS]->(pc:Product)\nRETURN c.customerID, c.customerName, collect(DISTINCT p.productName) AS products",
            "MATCH (c:Customer)-[p:PURCHASED]->(o:Order)<-[r:ORDERS]-(pr:Product)-[:PART_OF]->(ca:Category)\nWHERE NOT (ca.categoryName = 'Grains/Cereals')\nRETURN DISTINCT c.customerID, c.companyName, c.contactName, c.contactTitle, c.address, c.city, c.postalCode, c.country, c.fax",
            "MATCH (c:Customer)-[p:PURCHASED]->(o:Order)-[o2:ORDERS]->(p2:Product)\nWITH c, o\nWHERE p2.categoryID != '5'\nRETURN DISTINCT o ORDER BY o.orderDate"
        ],
        "generated_cyphers": [
            "MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)<-[r:PART_OF]-(ct:Category)\nWHERE c.customerID <> 'VINET' AND ct.categoryName <> 'Grains/Cereals'\nRETURN DISTINCT o.orderID, o.orderDate, o.customerID, o.shipAddress, o.shipCity, o.shipPostalCode, o.shipCountry",
            "```cypher\nMATCH (c:Customer)-[p:PURCHASED]->(o:Order)-[o2:ORDERS]->(p2:Product)-[:PART_OF]->(c2:Category)\nWHERE c.customerID <> 'ALFKI' AND c.customerID <> 'VINET' AND c.customerID <> 'WOLZA' AND c.customerID <> 'HANAR'\nAND NOT c2.categoryName = 'Grains/Cereals'\nRETURN o\n```",
            "MATCH (c:Customer)-[o:ORDERS]->(p:Product)-[cpr:PART_OF]->(ctg:Category)\nWHERE ctg.categoryName != 'Grains/Cereals'\nWITH DISTINCT c.customerID, c.customerName\nMATCH (c)-[p:PURCHASED]->(o)-[p2:ORDERS]->(pc:Product)\nRETURN c.customerID, c.customerName, collect(DISTINCT p.productName) AS products",
            "MATCH (c:Customer)-[p:PURCHASED]->(o:Order)<-[r:ORDERS]-(pr:Product)-[:PART_OF]->(ca:Category)\nWHERE NOT (ca.categoryName = 'Grains/Cereals')\nRETURN DISTINCT c.customerID, c.companyName, c.contactName, c.contactTitle, c.address, c.city, c.postalCode, c.country, c.fax",
            "MATCH (c:Customer)-[p:PURCHASED]->(o:Order)-[o2:ORDERS]->(p2:Product)\nWITH c, o\nWHERE p2.categoryID != '5'\nRETURN DISTINCT o ORDER BY o.orderDate"
        ]
    },
    {
        "question": "What is the name of the country with the highest concentration of organizations in a specific industry?",
        "schema": "Node properties:\n- **Person**\n  - `name`: STRING Example: \"Julie Spellman Sweet\"\n  - `id`: STRING Example: \"Eaf0bpz6NNoqLVUCqNZPAew\"\n  - `summary`: STRING Example: \"CEO at Accenture\"\n- **Organization**\n  - `revenue`: FLOAT Example: \"1.2E8\"\n  - `motto`: STRING Example: \"\"\n  - `nbrEmployees`: INTEGER Example: \"375\"\n  - `isDissolved`: BOOLEAN \n  - `id`: STRING Example: \"E0ZU8eCc5OaqS1LU9qE3n3w\"\n  - `isPublic`: BOOLEAN \n  - `name`: STRING Example: \"New Energy Group\"\n  - `summary`: STRING Example: \"Software company based in Rome, Metropolitan City \"\n- **IndustryCategory**\n  - `name`: STRING Example: \"Electronic Products Manufacturers\"\n  - `id`: STRING Example: \"EUNd__O4zMNW81lAXNK2GNw\"\n- **City**\n  - `id`: STRING Example: \"EZHWv2xKgN92oYDKSjhJ2gw\"\n  - `summary`: STRING Example: \"City in and county seat of King County, Washington\"\n  - `name`: STRING Example: \"Seattle\"\n- **Country**\n  - `name`: STRING Example: \"United States of America\"\n  - `id`: STRING Example: \"E01d4EK33MmCosgI2KXa4-A\"\n  - `summary`: STRING Example: \"Country in North America\"\n- **Article**\n  - `id`: STRING Example: \"ART176872705964\"\n  - `sentiment`: FLOAT Example: \"0.856\"\n  - `author`: STRING Example: \"David Correa\"\n  - `siteName`: STRING Example: \"MrWeb\"\n  - `summary`: STRING Example: \"Boston and Mumbai-based consumer behavior analyses\"\n  - `date`: DATE_TIME Example: \"2022-03-10T00:00:00Z\"\n  - `title`: STRING Example: \"Funds for Consumer Behavior Specialist Infinite An\"\n- **Chunk**\n  - `text`: STRING Example: \"Boston and Mumbai-based consumer behavior analyses\"\n- **Fewshot**\n  - `Question`: STRING Available options: ['How is Emil Eifrem connected to Michael Hunger? ', 'What are the latest news regarding Google? ', 'Are there any news regarding return to office poli', 'What is Microsoft policy regarding to the return t', 'How many levels of subsidiaries does Blackstone ha', 'How many Telecommunications Companies are from Mal']\n  - `Cypher`: STRING Available options: ['MATCH (p1:Person {{name:\"Emil Eifrem\"}}), (p2:Pers', 'MATCH (o:Organization {{name:\"Google\"}})<-[:MENTIO', 'CALL apoc.ml.openai.embedding([\"Are there any news', 'CALL apoc.ml.openai.embedding([\"What is Microsoft ', 'MATCH p=(o:Organization {name:\"Blackstone\"})-[:HAS', 'MATCH (o:Organization) WHERE EXISTS {(o)-[:HAS_CAT']\n  - `id`: INTEGER Min: 2, Max: 7\nRelationship properties:\n\nThe relationships:\n(:Person)-[:HAS_PARENT]->(:Person)\n(:Person)-[:HAS_CHILD]->(:Person)\n(:Organization)-[:IN_CITY]->(:City)\n(:Organization)-[:HAS_CEO]->(:Person)\n(:Organization)-[:HAS_CATEGORY]->(:IndustryCategory)\n(:Organization)-[:HAS_SUBSIDIARY]->(:Organization)\n(:Organization)-[:HAS_SUPPLIER]->(:Organization)\n(:Organization)-[:HAS_INVESTOR]->(:Organization)\n(:Organization)-[:HAS_INVESTOR]->(:Person)\n(:Organization)-[:HAS_BOARD_MEMBER]->(:Person)\n(:Organization)-[:HAS_COMPETITOR]->(:Organization)\n(:City)-[:IN_COUNTRY]->(:Country)\n(:Article)-[:HAS_CHUNK]->(:Chunk)\n(:Article)-[:MENTIONS]->(:Organization)",
        "gold_cypher": "MATCH (o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory) WITH ic.name AS industryName, o, ic MATCH (o)-[:IN_CITY]->(ci:City)-[:IN_COUNTRY]->(co:Country) WITH industryName, co.name AS countryName, count(o) AS orgCount WITH industryName, countryName, collect({count: orgCount, country: countryName}) AS countryCounts, max(orgCount) as maxCount UNWIND countryCounts as countryCount WITH industryName, countryCount WHERE countryCount.count = maxCount RETURN industryName, countryCount.country AS countryName, countryCount.count AS orgCount ORDER BY industryName",
        "database": "companies",
        "full_responses": [
            "```cypher\nMATCH (c:Country)-[:IN_CITY]->(ci:City)-[:HAS_ORGANIZATION]->(o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory)\nWITH ic.name AS industry, COUNT(o) AS orgCount\nRETURN ic.name, orgCount\nORDER BY orgCount DESC\nLIMIT 1\n```",
            "MATCH (c:Country)-[r:IN_CITY]->(ci:City)-[o:IN_CITY]->(org:Organization)-[t:HAS_CATEGORY]->(ind:IndustryCategory)\nWHERE ind.name = 'Electronic Products Manufacturers'\nRETURN c.name, COUNT(org) AS organization_count\nORDER BY organization_count DESC\nLIMIT 1",
            "MATCH (ic:IndustryCategory)\nWITH ic\nMATCH (o:Organization)-[r:HAS_CATEGORY]->(ic)\nRETURN ic.name AS IndustryName, COUNT(o) AS NumberOfOrganizations, (SELECT name FROM Country WHERE id = (CALL apoc.coll.max(r.inCity)) LIMIT 1) AS CountryName",
            "MATCH (ic:IndustryCategory)\nWITH ic\nOPTIONAL MATCH (o:Organization)-[:HAS_CATEGORY {name: ic.name}]->()\nWITH ic, COUNT(o) AS organizationCount\nORDER BY organizationCount DESC\nLIMIT 1\nRETURN ic.name AS IndustryName, ic.summary AS IndustrySummary, ic.id AS IndustryId",
            "```cypher\nMATCH (o:Organization)<-[r:HAS_CATEGORY]-(ic:IndustryCategory)\nWITH ic, COUNT(o) AS orgCount\nORDER BY orgCount DESC\nLIMIT 1\nRETURN ic.name AS highestIndustryCategory, ic.name AS countryName\n```"
        ],
        "generated_cyphers": [
            "```cypher\nMATCH (c:Country)-[:IN_CITY]->(ci:City)-[:HAS_ORGANIZATION]->(o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory)\nWITH ic.name AS industry, COUNT(o) AS orgCount\nRETURN ic.name, orgCount\nORDER BY orgCount DESC\nLIMIT 1\n```",
            "MATCH (c:Country)-[r:IN_CITY]->(ci:City)-[o:IN_CITY]->(org:Organization)-[t:HAS_CATEGORY]->(ind:IndustryCategory)\nWHERE ind.name = 'Electronic Products Manufacturers'\nRETURN c.name, COUNT(org) AS organization_count\nORDER BY organization_count DESC\nLIMIT 1",
            "MATCH (ic:IndustryCategory)\nWITH ic\nMATCH (o:Organization)-[r:HAS_CATEGORY]->(ic)\nRETURN ic.name AS IndustryName, COUNT(o) AS NumberOfOrganizations, (SELECT name FROM Country WHERE id = (CALL apoc.coll.max(r.inCity)) LIMIT 1) AS CountryName",
            "MATCH (ic:IndustryCategory)\nWITH ic\nOPTIONAL MATCH (o:Organization)-[:HAS_CATEGORY {name: ic.name}]->()\nWITH ic, COUNT(o) AS organizationCount\nORDER BY organizationCount DESC\nLIMIT 1\nRETURN ic.name AS IndustryName, ic.summary AS IndustrySummary, ic.id AS IndustryId",
            "```cypher\nMATCH (o:Organization)<-[r:HAS_CATEGORY]-(ic:IndustryCategory)\nWITH ic, COUNT(o) AS orgCount\nORDER BY orgCount DESC\nLIMIT 1\nRETURN ic.name AS highestIndustryCategory, ic.name AS countryName\n```"
        ]
    },
    {
        "question": "What are the top 5 orders in terms of quantity for the product 'Chai'?",
        "schema": "Node properties:\n- **Product**\n  - `productName`: STRING Example: \"Chai\"\n  - `quantityPerUnit`: STRING Example: \"10 boxes x 20 bags\"\n  - `unitsOnOrder`: INTEGER Min: 0, Max: 100\n  - `supplierID`: STRING Example: \"1\"\n  - `productID`: STRING Example: \"1\"\n  - `discontinued`: BOOLEAN \n  - `categoryID`: STRING Available options: ['1', '2', '7', '6', '8', '4', '3', '5']\n  - `reorderLevel`: INTEGER Min: 0, Max: 30\n  - `unitsInStock`: INTEGER Min: 0, Max: 125\n  - `unitPrice`: FLOAT Min: 2.5, Max: 263.5\n- **Category**\n  - `picture`: STRING Available options: ['0x151C2F00020000000D000E0014002100FFFFFFFF4269746D']\n  - `categoryID`: STRING Available options: ['1', '2', '3', '4', '5', '6', '7', '8']\n  - `description`: STRING Available options: ['Soft drinks, coffees, teas, beers, and ales', 'Sweet and savory sauces, relishes, spreads, and se', 'Desserts, candies, and sweet breads', 'Cheeses', 'Breads, crackers, pasta, and cereal', 'Prepared meats', 'Dried fruit and bean curd', 'Seaweed and fish']\n  - `categoryName`: STRING Available options: ['Beverages', 'Condiments', 'Confections', 'Dairy Products', 'Grains/Cereals', 'Meat/Poultry', 'Produce', 'Seafood']\n- **Supplier**\n  - `companyName`: STRING Example: \"Exotic Liquids\"\n  - `contactName`: STRING Example: \"Charlotte Cooper\"\n  - `homePage`: STRING Available options: ['NULL', '#CAJUN.HTM#', \"Mayumi's (on the World Wide Web)#http://www.micros\", '(03) 444-6588', 'Plutzer (on the World Wide Web)#http://www.microso', '(0544) 60603', '(1) 03.83.00.62', '(02) 555-4873', '(089) 6547667', '38.76.98.58']\n  - `phone`: STRING Example: \"(171) 555-2222\"\n  - `postalCode`: STRING Example: \"EC1 4SD\"\n  - `contactTitle`: STRING Example: \"Purchasing Manager\"\n  - `region`: STRING Example: \"NULL\"\n  - `address`: STRING Example: \"49 Gilbert St.\"\n  - `fax`: STRING Example: \"NULL\"\n  - `supplierID`: STRING Example: \"1\"\n  - `country`: STRING Example: \"UK\"\n  - `city`: STRING Example: \"London\"\n- **Customer**\n  - `fax`: STRING Example: \"030-0076545\"\n  - `companyName`: STRING Example: \"Alfreds Futterkiste\"\n  - `customerID`: STRING Example: \"ALFKI\"\n  - `phone`: STRING Example: \"030-0074321\"\n  - `contactName`: STRING Example: \"Maria Anders\"\n  - `contactTitle`: STRING Example: \"Sales Representative\"\n  - `region`: STRING Example: \"NULL\"\n  - `address`: STRING Example: \"Obere Str. 57\"\n  - `postalCode`: STRING Example: \"12209\"\n  - `country`: STRING Example: \"Germany\"\n  - `city`: STRING Example: \"Berlin\"\n- **Order**\n  - `shipName`: STRING Example: \"Vins et alcools Chevalier\"\n  - `requiredDate`: STRING Example: \"1996-08-01 00:00:00.000\"\n  - `shipCity`: STRING Example: \"Reims\"\n  - `employeeID`: STRING Available options: ['5', '6', '4', '3', '9', '1', '8', '2', '7']\n  - `shipPostalCode`: STRING Example: \"51100\"\n  - `shippedDate`: STRING Example: \"1996-07-16 00:00:00.000\"\n  - `freight`: STRING Example: \"32.38\"\n  - `orderDate`: STRING Example: \"1996-07-04 00:00:00.000\"\n  - `orderID`: STRING Example: \"10248\"\n  - `shipAddress`: STRING Example: \"59 rue de l'Abbaye\"\n  - `customerID`: STRING Example: \"VINET\"\n  - `shipCountry`: STRING Example: \"France\"\n  - `shipVia`: STRING Available options: ['3', '1', '2']\n  - `shipRegion`: STRING Example: \"NULL\"\nRelationship properties:\n- **ORDERS**\n  - `orderID: STRING` Example: \"10248\"\n  - `unitPrice: STRING` Example: \"34.80\"\n  - `productID: STRING` Example: \"72\"\n  - `quantity: INTEGER` Min: 1, Max:  130\n  - `discount: STRING` Example: \"0\"\nThe relationships:\n(:Product)-[:PART_OF]->(:Category)\n(:Supplier)-[:SUPPLIES]->(:Product)\n(:Customer)-[:PURCHASED]->(:Order)\n(:Order)-[:ORDERS]->(:Product)",
        "gold_cypher": "MATCH (p:Product {productName: 'Chai'})<-[:ORDERS]-(o:Order) RETURN o.orderID AS orderID, o.orderDate AS orderDate, o.shipName AS shipName, o.shipCity AS shipCity, o.shipCountry AS shipCountry, o.shipPostalCode AS shipPostalCode, o.shipAddress AS shipAddress, o.shipVia AS shipVia, o.shipRegion AS shipRegion, o.freight AS freight, o.requiredDate AS requiredDate, o.shippedDate AS shippedDate, o.customerID AS customerID, o.employeeID AS employeeID, o.unitPrice AS unitPrice, o.quantity AS quantity, o.discount AS discount ORDER BY o.quantity DESC LIMIT 5",
        "database": "northwind",
        "full_responses": [
            "```cypher\nMATCH (p:Product {productName: 'Chai'})-[:PART_OF]->(c:Category)\nMATCH (p)-[o:ORDERS]->(order:Order)\nRETURN order, o.quantity\nORDER BY o.quantity DESC\nLIMIT 5;\n```",
            "MATCH (p:Product {productName: 'Chai'})<-[:PART_OF]-(c:Category)<-[:SUPPLIES]-(s:Supplier)-[:PURCHASED]->(o:Order)-[:ORDERS]->(p2:Product)\nWHERE p2.productName = 'Chai'\nRETURN o.orderID AS OrderID, o.quantity AS Quantity ORDER BY o.quantity DESC LIMIT 5",
            "```cypher\nMATCH (p:Product {productName: 'Chai'})<-[:PART_OF]->(c:Category)-[:SUPPLIES]->(pr:Product)\nWITH pr, COLLECT({orderID: o.orderID, quantity: o.quantity}) AS orders\nORDER BY orders DESC\nLIMIT 5\n```",
            "MATCH (p:Product {productName: 'Chai'})<-[:PART_OF]-(c:Category)<-[r:ORDERS]-(o:Order)\nWITH o, r.quantity AS quantity\nORDER BY quantity DESC\nLIMIT 5",
            "```cypher\nMATCH (p:Product {productName: 'Chai'})-[:PART_OF]->(c:Category)<-[:SUPPLIES]-(s:Supplier)\nMATCH (o:Order)<-[ord:ORDERS]-(p:Product)\nWITH o, ord.quantity AS quantity\nORDER BY quantity DESC\nLIMIT 5\n```"
        ],
        "generated_cyphers": [
            "```cypher\nMATCH (p:Product {productName: 'Chai'})-[:PART_OF]->(c:Category)\nMATCH (p)-[o:ORDERS]->(order:Order)\nRETURN order, o.quantity\nORDER BY o.quantity DESC\nLIMIT 5;\n```",
            "MATCH (p:Product {productName: 'Chai'})<-[:PART_OF]-(c:Category)<-[:SUPPLIES]-(s:Supplier)-[:PURCHASED]->(o:Order)-[:ORDERS]->(p2:Product)\nWHERE p2.productName = 'Chai'\nRETURN o.orderID AS OrderID, o.quantity AS Quantity ORDER BY o.quantity DESC LIMIT 5",
            "```cypher\nMATCH (p:Product {productName: 'Chai'})<-[:PART_OF]->(c:Category)-[:SUPPLIES]->(pr:Product)\nWITH pr, COLLECT({orderID: o.orderID, quantity: o.quantity}) AS orders\nORDER BY orders DESC\nLIMIT 5\n```",
            "MATCH (p:Product {productName: 'Chai'})<-[:PART_OF]-(c:Category)<-[r:ORDERS]-(o:Order)\nWITH o, r.quantity AS quantity\nORDER BY quantity DESC\nLIMIT 5",
            "```cypher\nMATCH (p:Product {productName: 'Chai'})-[:PART_OF]->(c:Category)<-[:SUPPLIES]-(s:Supplier)\nMATCH (o:Order)<-[ord:ORDERS]-(p:Product)\nWITH o, ord.quantity AS quantity\nORDER BY quantity DESC\nLIMIT 5\n```"
        ]
    },
    {
        "question": "What is the average 'book1BetweennessCentrality' of characters who have interacted with both 'Daenerys-Targaryen' and 'Haldon'?",
        "schema": "Node properties:\n- **Character**\n  - `centrality`: FLOAT Min: 0.0, Max: 1.0\n  - `book45PageRank`: FLOAT Min: 0.15000000000000002, Max: 11.409916274911177\n  - `fastrf_embedding`: LIST Min Size: 10, Max Size: 10\n  - `book1BetweennessCentrality`: FLOAT Min: 0.0, Max: 4638.53495125504\n  - `book1PageRank`: FLOAT Min: 0.15000000000000002, Max: 8.164174336296284\n  - `louvain`: INTEGER Min: 0, Max: 10\n  - `community`: INTEGER Min: 504, Max: 795\n  - `degree`: FLOAT Min: 0.0, Max: 300.0\n  - `name`: STRING Example: \"Addam-Marbrand\"\n  - `pagerank`: FLOAT Min: 0.15000000000000002, Max: 9.473142454730429\nRelationship properties:\n- **INTERACTS**\n  - `weight: INTEGER` Min: 3, Max:  334\n- **INTERACTS1**\n  - `weight: INTEGER` Min: 3, Max:  291\n  - `book: INTEGER` Min: 1, Max:  1\n- **INTERACTS2**\n  - `weight: INTEGER` Min: 3, Max:  92\n  - `book: INTEGER` Min: 2, Max:  2\n- **INTERACTS3**\n  - `weight: INTEGER` Min: 3, Max:  95\n  - `book: INTEGER` Min: 3, Max:  3\n- **INTERACTS45**\n  - `weight: INTEGER` Min: 3, Max:  96\n  - `book: INTEGER` Min: 45, Max:  45\nThe relationships:\n(:Character)-[:INTERACTS45]->(:Character)\n(:Character)-[:INTERACTS]->(:Character)\n(:Character)-[:INTERACTS1]->(:Character)\n(:Character)-[:INTERACTS3]->(:Character)\n(:Character)-[:INTERACTS2]->(:Character)",
        "gold_cypher": "MATCH (daenerys:Character { name: 'Daenerys-Targaryen' })-[:INTERACTS1]->(d_interaction:Character) WITH daenerys, collect(d_interaction) AS daenerys_interactions MATCH (haldon:Character { name: 'Haldon' })-[:INTERACTS1]->(h_interaction:Character) WITH daenerys, daenerys_interactions, haldon, collect(h_interaction) AS haldon_interactions WITH apoc.coll.intersection(daenerys_interactions, haldon_interactions) AS common_characters UNWIND common_characters AS common_character RETURN avg(common_character.book1BetweennessCentrality) AS average_centrality",
        "database": "gameofthrones",
        "full_responses": [
            "MATCH (char:Character)-[r:INTERACTS]->(otherChar:Character)\nWHERE char.name = 'Daenerys-Targaryen' AND otherChar.name = 'Haldon'\nRETURN avg(char.book1BetweennessCentrality)",
            "MATCH (c1:Character)-[:INTERACTS45]->(c2:Character)<-[:INTERACTS45]-(c3:Character)\nWHERE c2.name = 'Daenerys-Targaryen' AND c3.name = 'Haldon'\nRETURN avg(c1.book1BetweennessCentrality)",
            "MATCH (c1:Character)-[r1:INTERACTS45]->(c2:Character)-[r2:INTERACTS45]->(c3:Character)\nWHERE c1.name = 'Daenerys-Targaryen' AND c2.name = 'Haldon'\nRETURN AVG(c3.book1BetweennessCentrality)",
            "```\nMATCH (a:Character)-[r:INTERACTS45]->(b:Character)\nWHERE b.name = 'Daenerys-Targaryen' AND a.name = 'Haldon'\nRETURN avg(a.book1BetweennessCentrality)\n```",
            "MATCH (c1:Character)-[r:INTERACTS]->(c2:Character)\nMATCH (c2)-[r2:INTERACTS]->(c3:Character)\nWHERE c1.name = 'Daenerys-Targaryen' AND c3.name = 'Haldon'\nRETURN AVG(c1.book1BetweennessCentrality)"
        ],
        "generated_cyphers": [
            "MATCH (char:Character)-[r:INTERACTS]->(otherChar:Character)\nWHERE char.name = 'Daenerys-Targaryen' AND otherChar.name = 'Haldon'\nRETURN avg(char.book1BetweennessCentrality)",
            "MATCH (c1:Character)-[:INTERACTS45]->(c2:Character)<-[:INTERACTS45]-(c3:Character)\nWHERE c2.name = 'Daenerys-Targaryen' AND c3.name = 'Haldon'\nRETURN avg(c1.book1BetweennessCentrality)",
            "MATCH (c1:Character)-[r1:INTERACTS45]->(c2:Character)-[r2:INTERACTS45]->(c3:Character)\nWHERE c1.name = 'Daenerys-Targaryen' AND c2.name = 'Haldon'\nRETURN AVG(c3.book1BetweennessCentrality)",
            "```\nMATCH (a:Character)-[r:INTERACTS45]->(b:Character)\nWHERE b.name = 'Daenerys-Targaryen' AND a.name = 'Haldon'\nRETURN avg(a.book1BetweennessCentrality)\n```",
            "MATCH (c1:Character)-[r:INTERACTS]->(c2:Character)\nMATCH (c2)-[r2:INTERACTS]->(c3:Character)\nWHERE c1.name = 'Daenerys-Targaryen' AND c3.name = 'Haldon'\nRETURN AVG(c1.book1BetweennessCentrality)"
        ]
    },
    {
        "question": "What is the total revenue generated by orders placed by customers located in the same country as the supplier of the most expensive product?",
        "schema": "Node properties:\n- **Product**\n  - `productName`: STRING Example: \"Chai\"\n  - `quantityPerUnit`: STRING Example: \"10 boxes x 20 bags\"\n  - `unitsOnOrder`: INTEGER Min: 0, Max: 100\n  - `supplierID`: STRING Example: \"1\"\n  - `productID`: STRING Example: \"1\"\n  - `discontinued`: BOOLEAN \n  - `categoryID`: STRING Available options: ['1', '2', '7', '6', '8', '4', '3', '5']\n  - `reorderLevel`: INTEGER Min: 0, Max: 30\n  - `unitsInStock`: INTEGER Min: 0, Max: 125\n  - `unitPrice`: FLOAT Min: 2.5, Max: 263.5\n- **Category**\n  - `picture`: STRING Available options: ['0x151C2F00020000000D000E0014002100FFFFFFFF4269746D']\n  - `categoryID`: STRING Available options: ['1', '2', '3', '4', '5', '6', '7', '8']\n  - `description`: STRING Available options: ['Soft drinks, coffees, teas, beers, and ales', 'Sweet and savory sauces, relishes, spreads, and se', 'Desserts, candies, and sweet breads', 'Cheeses', 'Breads, crackers, pasta, and cereal', 'Prepared meats', 'Dried fruit and bean curd', 'Seaweed and fish']\n  - `categoryName`: STRING Available options: ['Beverages', 'Condiments', 'Confections', 'Dairy Products', 'Grains/Cereals', 'Meat/Poultry', 'Produce', 'Seafood']\n- **Supplier**\n  - `companyName`: STRING Example: \"Exotic Liquids\"\n  - `contactName`: STRING Example: \"Charlotte Cooper\"\n  - `homePage`: STRING Available options: ['NULL', '#CAJUN.HTM#', \"Mayumi's (on the World Wide Web)#http://www.micros\", '(03) 444-6588', 'Plutzer (on the World Wide Web)#http://www.microso', '(0544) 60603', '(1) 03.83.00.62', '(02) 555-4873', '(089) 6547667', '38.76.98.58']\n  - `phone`: STRING Example: \"(171) 555-2222\"\n  - `postalCode`: STRING Example: \"EC1 4SD\"\n  - `contactTitle`: STRING Example: \"Purchasing Manager\"\n  - `region`: STRING Example: \"NULL\"\n  - `address`: STRING Example: \"49 Gilbert St.\"\n  - `fax`: STRING Example: \"NULL\"\n  - `supplierID`: STRING Example: \"1\"\n  - `country`: STRING Example: \"UK\"\n  - `city`: STRING Example: \"London\"\n- **Customer**\n  - `fax`: STRING Example: \"030-0076545\"\n  - `companyName`: STRING Example: \"Alfreds Futterkiste\"\n  - `customerID`: STRING Example: \"ALFKI\"\n  - `phone`: STRING Example: \"030-0074321\"\n  - `contactName`: STRING Example: \"Maria Anders\"\n  - `contactTitle`: STRING Example: \"Sales Representative\"\n  - `region`: STRING Example: \"NULL\"\n  - `address`: STRING Example: \"Obere Str. 57\"\n  - `postalCode`: STRING Example: \"12209\"\n  - `country`: STRING Example: \"Germany\"\n  - `city`: STRING Example: \"Berlin\"\n- **Order**\n  - `shipName`: STRING Example: \"Vins et alcools Chevalier\"\n  - `requiredDate`: STRING Example: \"1996-08-01 00:00:00.000\"\n  - `shipCity`: STRING Example: \"Reims\"\n  - `employeeID`: STRING Available options: ['5', '6', '4', '3', '9', '1', '8', '2', '7']\n  - `shipPostalCode`: STRING Example: \"51100\"\n  - `shippedDate`: STRING Example: \"1996-07-16 00:00:00.000\"\n  - `freight`: STRING Example: \"32.38\"\n  - `orderDate`: STRING Example: \"1996-07-04 00:00:00.000\"\n  - `orderID`: STRING Example: \"10248\"\n  - `shipAddress`: STRING Example: \"59 rue de l'Abbaye\"\n  - `customerID`: STRING Example: \"VINET\"\n  - `shipCountry`: STRING Example: \"France\"\n  - `shipVia`: STRING Available options: ['3', '1', '2']\n  - `shipRegion`: STRING Example: \"NULL\"\nRelationship properties:\n- **ORDERS**\n  - `orderID: STRING` Example: \"10248\"\n  - `unitPrice: STRING` Example: \"34.80\"\n  - `productID: STRING` Example: \"72\"\n  - `quantity: INTEGER` Min: 1, Max:  130\n  - `discount: STRING` Example: \"0\"\nThe relationships:\n(:Product)-[:PART_OF]->(:Category)\n(:Supplier)-[:SUPPLIES]->(:Product)\n(:Customer)-[:PURCHASED]->(:Order)\n(:Order)-[:ORDERS]->(:Product)",
        "gold_cypher": "MATCH (mostExpensiveProduct:Product) WITH max(mostExpensiveProduct.unitPrice) AS maxPrice, mostExpensiveProduct MATCH (mostExpensiveProduct)-[:SUPPLIES]->(supplier:Supplier) WITH mostExpensiveProduct, supplier.country AS supplierCountry MATCH (customer:Customer {country: supplierCountry})-[:PURCHASED]->(order:Order) WITH order, customer MATCH (order)-[orders:ORDERS]->(product:Product) WITH order, sum(toFloat(orders.quantity) * toFloat(orders.unitPrice) * (1 - toFloat(orders.discount))) AS orderRevenue RETURN sum(orderRevenue) AS totalRevenue",
        "database": "northwind",
        "full_responses": [
            "MATCH (p:Product)-[r:PART_OF]->(c:Category)-[s:SUPPLIES]->(sp:Supplier) \nWITH p, s \nORDER BY p.unitPrice DESC LIMIT 1\nMATCH (c:Category)-[r:PART_OF]->(p:Product)-[o:ORDERS]->(o:Order)-[pr:PART_OF]->(sp:Supplier) \nWHERE o.customer.address.country = sp.address.country\nWITH p, s, o \nMATCH (o:Order)-[pr:PART_OF]->(sp:Supplier)\nWHERE o.customer.address.country = sp.address.country\nRETURN SUM(o.totalPrice) AS totalRevenue",
            "MATCH (p:Product)-[r:PART_OF]->(c:Category), (s:Supplier)-[:SUPPLIES]->(p)\nWHERE c.categoryName = 'Beverages'\nWITH p ORDER BY p.unitPrice DESC LIMIT 1\nMATCH (c:Category)-[r:PART_OF]->(p:Product), (s:Supplier)-[:SUPPLIES]->(p)\nRETURN SUM(o.quantity * o.unitPrice) AS TotalRevenue\nWHERE s.country = p.supplierID",
            "```\nMATCH (p:Product) -[:PART_OF]-> (c:Category) -[:SUPPLIES]-> (s:Supplier)\nWHERE p.unitPrice = MAX(p.unitPrice)\nMATCH (s)-[:SUPPLIES]->(prod)-[:PART_OF]->(cat)\nMATCH (c)-[:SUPPLIES]->(prod2)-[:PART_OF]->(cat2)\nWHERE cat.categoryID = cat2.categoryID\nMATCH (c)-[:SUPPLIES]->(prod3)-[:PART_OF]->(cat3)\nWHERE cat.categoryID = cat3.categoryID\nMATCH (c)-[:SUPPLIES]->(prod4)-[:PART_OF]->(cat4)\nWHERE cat.categoryID = cat4.categoryID\nMATCH (c)-[:SUPPLIES]->(prod5)-[:PART_OF]->(cat5)\nWHERE cat.categoryID = cat5.categoryID\nMATCH (c)-[:SUPPLIES]->(prod6)-[:PART_OF]->(cat6)\nWHERE cat.categoryID = cat6.categoryID\nMATCH (c)-[:SUPPLIES]->(prod7)-[:PART_OF]->(cat7)\nWHERE cat.categoryID = cat7.categoryID\nMATCH (c)-[:SUPPLIES]->(prod8)-[:PART_OF]->(cat8)\nWHERE cat.categoryID = cat8.categoryID\nMATCH (c)-[:SUPPLIES]->(prod9)-[:PART_OF]->(cat9)\nWHERE cat.categoryID = cat9.categoryID\nMATCH (c)-[:SUPPLIES]->(prod10)-[:PART_OF]->(cat10)\nWHERE cat.categoryID = cat10.categoryID\nMATCH (c)-[:SUPPLIES]->(prod11)-[:PART_OF]->(cat11)\nWHERE cat.categoryID = cat11.categoryID\nMATCH (c)-[:SUPPLIES]->(prod12)-[:PART_OF]->(cat12)\nWHERE cat.categoryID = cat12.categoryID\nMATCH (c)-[:SUPPLIES]->(prod13)-[:PART_OF]->(cat13)\nWHERE cat.categoryID = cat13.categoryID\nMATCH (c)-[:SUPPLIES]->(prod14)-[:PART_OF]->(cat14)\nWHERE cat.categoryID = cat14.categoryID\nMATCH (c)-[:SUPPLIES]->(prod15)-[:PART_OF]->(cat15)\nWHERE cat.categoryID = cat15.categoryID\nMATCH (c)-[:SUPPLIES]->(prod16)-[:PART_OF]->(cat16)\nWHERE cat.categoryID = cat16.categoryID\nMATCH (c)-[:SUPPLIES]->(prod17)-[:PART_OF]->(cat17)\nWHERE cat.categoryID = cat17.categoryID\nMATCH (c)-[:SUPPLIES]->(prod18)-[:PART_OF]->(cat18)\nWHERE cat.categoryID = cat18.categoryID\nMATCH (c)-[:SUPPLIES]->(prod19)-[:PART_OF]->(cat19)\nWHERE cat.categoryID = cat19.categoryID\nMATCH (c)-[:SUPPLIES]->(prod20)-[:PART_OF]->(cat20)\nWHERE cat.categoryID = cat20.categoryID\nMATCH (c)-[:SUPPLIES]->(prod21)-[:PART_OF]->(cat21)\nWHERE cat.categoryID = cat21.categoryID\nMATCH (c)-[:SUPPLIES]->(prod22)-[:PART_OF]->(cat22)\nWHERE cat.categoryID = cat22.categoryID\nMATCH (c)-[:SUPPLIES]->(prod23)-[:PART_OF]->(cat23)\nWHERE cat.categoryID = cat23.categoryID\nMATCH (c)-[:SUPPLIES]->(prod24)-[:PART_OF]->(cat24)\nWHERE cat.categoryID = cat24.categoryID\nMATCH (c)-[:SUPPLIES]->(prod25)-[:PART_OF]->(cat25)\nWHERE cat.categoryID = cat25.categoryID\nMATCH (c)-[:SUPPLIES]->(prod26)-[:PART_OF]->(cat26)\nWHERE cat.categoryID = cat26.categoryID\nMATCH (c)-[:SUPPLIES]->(prod27)-[:PART_OF]->(cat27)\nWHERE cat.categoryID = cat27.categoryID\nMATCH (c)-[:SUPPLIES]->(prod28)-[:PART_OF]->(cat28)\nWHERE cat.categoryID = cat28.categoryID\nMATCH (c)-[:SUPPLIES]->(prod29)-[:PART_OF]->(cat29)\nWHERE cat.categoryID = cat29.categoryID\nMATCH (c)-[:SUPPLIES]->(prod30)-[:PART_OF]->(cat30)\nWHERE cat.categoryID = cat30.categoryID\nMATCH (c)-",
            "MATCH (p:Product)-[:PART_OF]->(c:Category)<-[:SUPPLIES]-(s:Supplier)\nWHERE p.unitPrice = MAX(p.unitPrice)\nMATCH (s)-[:SUPPLIES]->(p2)\nMATCH (c)<-[:PART_OF]-(p3)-[:PART_OF]->(c4)\nWHERE c4.country = s.country\nMATCH (o:Order)-[:ORDERS]->(p3)\nWHERE o.customerID = p2.customerID\nRETURN SUM(o.unitPrice * o.quantity) AS totalRevenue",
            "MATCH (p:Product)-[r:PART_OF]->(c:Category)-[:SUPPLIES]->(s:Supplier)\nWHERE c.categoryID IN ['1', '2', '3', '4', '5', '6', '7', '8']\nRETURN SUM(p.unitPrice * r.quantity) AS totalRevenue\nORDER BY totalRevenue DESC\nLIMIT 1\nUNION\nMATCH (p:Product)-[r:PART_OF]->(c:Category)-[:SUPPLIES]->(s:Supplier)\nWHERE c.categoryID IN ['1', '2', '3', '4', '5', '6', '7', '8']\nRETURN SUM(p.unitPrice * r.quantity) AS totalRevenue\nORDER BY totalRevenue DESC\nLIMIT 1"
        ],
        "generated_cyphers": [
            "MATCH (p:Product)-[r:PART_OF]->(c:Category)-[s:SUPPLIES]->(sp:Supplier) \nWITH p, s \nORDER BY p.unitPrice DESC LIMIT 1\nMATCH (c:Category)-[r:PART_OF]->(p:Product)-[o:ORDERS]->(o:Order)-[pr:PART_OF]->(sp:Supplier) \nWHERE o.customer.address.country = sp.address.country\nWITH p, s, o \nMATCH (o:Order)-[pr:PART_OF]->(sp:Supplier)\nWHERE o.customer.address.country = sp.address.country\nRETURN SUM(o.totalPrice) AS totalRevenue",
            "MATCH (p:Product)-[r:PART_OF]->(c:Category), (s:Supplier)-[:SUPPLIES]->(p)\nWHERE c.categoryName = 'Beverages'\nWITH p ORDER BY p.unitPrice DESC LIMIT 1\nMATCH (c:Category)-[r:PART_OF]->(p:Product), (s:Supplier)-[:SUPPLIES]->(p)\nRETURN SUM(o.quantity * o.unitPrice) AS TotalRevenue\nWHERE s.country = p.supplierID",
            "```\nMATCH (p:Product) -[:PART_OF]-> (c:Category) -[:SUPPLIES]-> (s:Supplier)\nWHERE p.unitPrice = MAX(p.unitPrice)\nMATCH (s)-[:SUPPLIES]->(prod)-[:PART_OF]->(cat)\nMATCH (c)-[:SUPPLIES]->(prod2)-[:PART_OF]->(cat2)\nWHERE cat.categoryID = cat2.categoryID\nMATCH (c)-[:SUPPLIES]->(prod3)-[:PART_OF]->(cat3)\nWHERE cat.categoryID = cat3.categoryID\nMATCH (c)-[:SUPPLIES]->(prod4)-[:PART_OF]->(cat4)\nWHERE cat.categoryID = cat4.categoryID\nMATCH (c)-[:SUPPLIES]->(prod5)-[:PART_OF]->(cat5)\nWHERE cat.categoryID = cat5.categoryID\nMATCH (c)-[:SUPPLIES]->(prod6)-[:PART_OF]->(cat6)\nWHERE cat.categoryID = cat6.categoryID\nMATCH (c)-[:SUPPLIES]->(prod7)-[:PART_OF]->(cat7)\nWHERE cat.categoryID = cat7.categoryID\nMATCH (c)-[:SUPPLIES]->(prod8)-[:PART_OF]->(cat8)\nWHERE cat.categoryID = cat8.categoryID\nMATCH (c)-[:SUPPLIES]->(prod9)-[:PART_OF]->(cat9)\nWHERE cat.categoryID = cat9.categoryID\nMATCH (c)-[:SUPPLIES]->(prod10)-[:PART_OF]->(cat10)\nWHERE cat.categoryID = cat10.categoryID\nMATCH (c)-[:SUPPLIES]->(prod11)-[:PART_OF]->(cat11)\nWHERE cat.categoryID = cat11.categoryID\nMATCH (c)-[:SUPPLIES]->(prod12)-[:PART_OF]->(cat12)\nWHERE cat.categoryID = cat12.categoryID\nMATCH (c)-[:SUPPLIES]->(prod13)-[:PART_OF]->(cat13)\nWHERE cat.categoryID = cat13.categoryID\nMATCH (c)-[:SUPPLIES]->(prod14)-[:PART_OF]->(cat14)\nWHERE cat.categoryID = cat14.categoryID\nMATCH (c)-[:SUPPLIES]->(prod15)-[:PART_OF]->(cat15)\nWHERE cat.categoryID = cat15.categoryID\nMATCH (c)-[:SUPPLIES]->(prod16)-[:PART_OF]->(cat16)\nWHERE cat.categoryID = cat16.categoryID\nMATCH (c)-[:SUPPLIES]->(prod17)-[:PART_OF]->(cat17)\nWHERE cat.categoryID = cat17.categoryID\nMATCH (c)-[:SUPPLIES]->(prod18)-[:PART_OF]->(cat18)\nWHERE cat.categoryID = cat18.categoryID\nMATCH (c)-[:SUPPLIES]->(prod19)-[:PART_OF]->(cat19)\nWHERE cat.categoryID = cat19.categoryID\nMATCH (c)-[:SUPPLIES]->(prod20)-[:PART_OF]->(cat20)\nWHERE cat.categoryID = cat20.categoryID\nMATCH (c)-[:SUPPLIES]->(prod21)-[:PART_OF]->(cat21)\nWHERE cat.categoryID = cat21.categoryID\nMATCH (c)-[:SUPPLIES]->(prod22)-[:PART_OF]->(cat22)\nWHERE cat.categoryID = cat22.categoryID\nMATCH (c)-[:SUPPLIES]->(prod23)-[:PART_OF]->(cat23)\nWHERE cat.categoryID = cat23.categoryID\nMATCH (c)-[:SUPPLIES]->(prod24)-[:PART_OF]->(cat24)\nWHERE cat.categoryID = cat24.categoryID\nMATCH (c)-[:SUPPLIES]->(prod25)-[:PART_OF]->(cat25)\nWHERE cat.categoryID = cat25.categoryID\nMATCH (c)-[:SUPPLIES]->(prod26)-[:PART_OF]->(cat26)\nWHERE cat.categoryID = cat26.categoryID\nMATCH (c)-[:SUPPLIES]->(prod27)-[:PART_OF]->(cat27)\nWHERE cat.categoryID = cat27.categoryID\nMATCH (c)-[:SUPPLIES]->(prod28)-[:PART_OF]->(cat28)\nWHERE cat.categoryID = cat28.categoryID\nMATCH (c)-[:SUPPLIES]->(prod29)-[:PART_OF]->(cat29)\nWHERE cat.categoryID = cat29.categoryID\nMATCH (c)-[:SUPPLIES]->(prod30)-[:PART_OF]->(cat30)\nWHERE cat.categoryID = cat30.categoryID\nMATCH (c)-",
            "MATCH (p:Product)-[:PART_OF]->(c:Category)<-[:SUPPLIES]-(s:Supplier)\nWHERE p.unitPrice = MAX(p.unitPrice)\nMATCH (s)-[:SUPPLIES]->(p2)\nMATCH (c)<-[:PART_OF]-(p3)-[:PART_OF]->(c4)\nWHERE c4.country = s.country\nMATCH (o:Order)-[:ORDERS]->(p3)\nWHERE o.customerID = p2.customerID\nRETURN SUM(o.unitPrice * o.quantity) AS totalRevenue",
            "MATCH (p:Product)-[r:PART_OF]->(c:Category)-[:SUPPLIES]->(s:Supplier)\nWHERE c.categoryID IN ['1', '2', '3', '4', '5', '6', '7', '8']\nRETURN SUM(p.unitPrice * r.quantity) AS totalRevenue\nORDER BY totalRevenue DESC\nLIMIT 1\nUNION\nMATCH (p:Product)-[r:PART_OF]->(c:Category)-[:SUPPLIES]->(s:Supplier)\nWHERE c.categoryID IN ['1', '2', '3', '4', '5', '6', '7', '8']\nRETURN SUM(p.unitPrice * r.quantity) AS totalRevenue\nORDER BY totalRevenue DESC\nLIMIT 1"
        ]
    },
    {
        "question": "Which customers have placed orders that include products from both the 'Beverages' and 'Confections' categories?",
        "schema": "Node properties:\n- **Product**\n  - `productName`: STRING Example: \"Chai\"\n  - `quantityPerUnit`: STRING Example: \"10 boxes x 20 bags\"\n  - `unitsOnOrder`: INTEGER Min: 0, Max: 100\n  - `supplierID`: STRING Example: \"1\"\n  - `productID`: STRING Example: \"1\"\n  - `discontinued`: BOOLEAN \n  - `categoryID`: STRING Available options: ['1', '2', '7', '6', '8', '4', '3', '5']\n  - `reorderLevel`: INTEGER Min: 0, Max: 30\n  - `unitsInStock`: INTEGER Min: 0, Max: 125\n  - `unitPrice`: FLOAT Min: 2.5, Max: 263.5\n- **Category**\n  - `picture`: STRING Available options: ['0x151C2F00020000000D000E0014002100FFFFFFFF4269746D']\n  - `categoryID`: STRING Available options: ['1', '2', '3', '4', '5', '6', '7', '8']\n  - `description`: STRING Available options: ['Soft drinks, coffees, teas, beers, and ales', 'Sweet and savory sauces, relishes, spreads, and se', 'Desserts, candies, and sweet breads', 'Cheeses', 'Breads, crackers, pasta, and cereal', 'Prepared meats', 'Dried fruit and bean curd', 'Seaweed and fish']\n  - `categoryName`: STRING Available options: ['Beverages', 'Condiments', 'Confections', 'Dairy Products', 'Grains/Cereals', 'Meat/Poultry', 'Produce', 'Seafood']\n- **Supplier**\n  - `companyName`: STRING Example: \"Exotic Liquids\"\n  - `contactName`: STRING Example: \"Charlotte Cooper\"\n  - `homePage`: STRING Available options: ['NULL', '#CAJUN.HTM#', \"Mayumi's (on the World Wide Web)#http://www.micros\", '(03) 444-6588', 'Plutzer (on the World Wide Web)#http://www.microso', '(0544) 60603', '(1) 03.83.00.62', '(02) 555-4873', '(089) 6547667', '38.76.98.58']\n  - `phone`: STRING Example: \"(171) 555-2222\"\n  - `postalCode`: STRING Example: \"EC1 4SD\"\n  - `contactTitle`: STRING Example: \"Purchasing Manager\"\n  - `region`: STRING Example: \"NULL\"\n  - `address`: STRING Example: \"49 Gilbert St.\"\n  - `fax`: STRING Example: \"NULL\"\n  - `supplierID`: STRING Example: \"1\"\n  - `country`: STRING Example: \"UK\"\n  - `city`: STRING Example: \"London\"\n- **Customer**\n  - `fax`: STRING Example: \"030-0076545\"\n  - `companyName`: STRING Example: \"Alfreds Futterkiste\"\n  - `customerID`: STRING Example: \"ALFKI\"\n  - `phone`: STRING Example: \"030-0074321\"\n  - `contactName`: STRING Example: \"Maria Anders\"\n  - `contactTitle`: STRING Example: \"Sales Representative\"\n  - `region`: STRING Example: \"NULL\"\n  - `address`: STRING Example: \"Obere Str. 57\"\n  - `postalCode`: STRING Example: \"12209\"\n  - `country`: STRING Example: \"Germany\"\n  - `city`: STRING Example: \"Berlin\"\n- **Order**\n  - `shipName`: STRING Example: \"Vins et alcools Chevalier\"\n  - `requiredDate`: STRING Example: \"1996-08-01 00:00:00.000\"\n  - `shipCity`: STRING Example: \"Reims\"\n  - `employeeID`: STRING Available options: ['5', '6', '4', '3', '9', '1', '8', '2', '7']\n  - `shipPostalCode`: STRING Example: \"51100\"\n  - `shippedDate`: STRING Example: \"1996-07-16 00:00:00.000\"\n  - `freight`: STRING Example: \"32.38\"\n  - `orderDate`: STRING Example: \"1996-07-04 00:00:00.000\"\n  - `orderID`: STRING Example: \"10248\"\n  - `shipAddress`: STRING Example: \"59 rue de l'Abbaye\"\n  - `customerID`: STRING Example: \"VINET\"\n  - `shipCountry`: STRING Example: \"France\"\n  - `shipVia`: STRING Available options: ['3', '1', '2']\n  - `shipRegion`: STRING Example: \"NULL\"\nRelationship properties:\n- **ORDERS**\n  - `orderID: STRING` Example: \"10248\"\n  - `unitPrice: STRING` Example: \"34.80\"\n  - `productID: STRING` Example: \"72\"\n  - `quantity: INTEGER` Min: 1, Max:  130\n  - `discount: STRING` Example: \"0\"\nThe relationships:\n(:Product)-[:PART_OF]->(:Category)\n(:Supplier)-[:SUPPLIES]->(:Product)\n(:Customer)-[:PURCHASED]->(:Order)\n(:Order)-[:ORDERS]->(:Product)",
        "gold_cypher": "MATCH (bev:Category {categoryName: 'Beverages'})<-[:PART_OF]-(p1:Product)<-[:ORDERS]-(:Order)<-[:PURCHASED]-(c1:Customer) WITH collect(DISTINCT c1.customerID) AS bevCust MATCH (conf:Category {categoryName: 'Confections'})<-[:PART_OF]-(p2:Product)<-[:ORDERS]-(:Order)<-[:PURCHASED]-(c2:Customer) WITH bevCust, collect(DISTINCT c2.customerID) AS confCust WITH apoc.coll.intersection(bevCust, confCust) AS commonCust UNWIND commonCust AS custID MATCH (customer:Customer {customerID: custID}) RETURN DISTINCT customer.customerID, customer.companyName",
        "database": "northwind",
        "full_responses": [
            "```cypher\nMATCH (c:Customer)-[o:PURCHASED]->(ord:Order)-[r:ORDERS]->(p:Product)-[:PART_OF]->(cat:Category)\nWHERE cat.categoryName IN ['Beverages', 'Confections']\nRETURN c.companyName, o.orderID\n```",
            "```cypher\nMATCH (c:Customer)-[o:PURCHASED]->(ord:Order)-[r:ORDERS]->(p:Product)\nWHERE p.categoryID IN ['1', '2']\nAND c.customerID NOT IN (\n    MATCH (c:Customer)-[o:PURCHASED]->(ord:Order)-[r:ORDERS]->(p:Product)\n    WHERE p.categoryID IN ['3', '5']\n)\nRETURN DISTINCT c.customerName\n```",
            "MATCH (c:Customer)-[p:PURCHASED]->(o:Order)-[rp:ORDERS]->(pr:Product)-[c2:PART_OF]->(c3:Category)\nWHERE c3.categoryName = 'Beverages' AND c3 <> c2\nWITH c, o, pr, c3, c2\nMATCH (pr)-[c4:PART_OF]->(c5:Category)\nWHERE c5.categoryName = 'Confections'\nRETURN DISTINCT c.customerID",
            "MATCH (customer:Customer)-[:PURCHASED]->(order:Order)-[r:ORDERS]->(product:Product)-[:PART_OF]->(category:Category)\nWHERE category.categoryName IN ['Beverages', 'Confections']\nAND customer.customerID <> 'ANATR'\nRETURN DISTINCT customer.customerName",
            "MATCH (c:Customer)-[p:PURCHASED]->(o:Order)-[pr:ORDERS]->(pd:Product)\nWHERE pd.categoryID = '1' OR pd.categoryID = '4'\nRETURN c.customerID, c.companyName"
        ],
        "generated_cyphers": [
            "```cypher\nMATCH (c:Customer)-[o:PURCHASED]->(ord:Order)-[r:ORDERS]->(p:Product)-[:PART_OF]->(cat:Category)\nWHERE cat.categoryName IN ['Beverages', 'Confections']\nRETURN c.companyName, o.orderID\n```",
            "```cypher\nMATCH (c:Customer)-[o:PURCHASED]->(ord:Order)-[r:ORDERS]->(p:Product)\nWHERE p.categoryID IN ['1', '2']\nAND c.customerID NOT IN (\n    MATCH (c:Customer)-[o:PURCHASED]->(ord:Order)-[r:ORDERS]->(p:Product)\n    WHERE p.categoryID IN ['3', '5']\n)\nRETURN DISTINCT c.customerName\n```",
            "MATCH (c:Customer)-[p:PURCHASED]->(o:Order)-[rp:ORDERS]->(pr:Product)-[c2:PART_OF]->(c3:Category)\nWHERE c3.categoryName = 'Beverages' AND c3 <> c2\nWITH c, o, pr, c3, c2\nMATCH (pr)-[c4:PART_OF]->(c5:Category)\nWHERE c5.categoryName = 'Confections'\nRETURN DISTINCT c.customerID",
            "MATCH (customer:Customer)-[:PURCHASED]->(order:Order)-[r:ORDERS]->(product:Product)-[:PART_OF]->(category:Category)\nWHERE category.categoryName IN ['Beverages', 'Confections']\nAND customer.customerID <> 'ANATR'\nRETURN DISTINCT customer.customerName",
            "MATCH (c:Customer)-[p:PURCHASED]->(o:Order)-[pr:ORDERS]->(pd:Product)\nWHERE pd.categoryID = '1' OR pd.categoryID = '4'\nRETURN c.customerID, c.companyName"
        ]
    },
    {
        "question": "Which organizations are mentioned in articles that also mention organizations in the same industry?",
        "schema": "Node properties:\n- **Person**\n  - `name`: STRING Example: \"Julie Spellman Sweet\"\n  - `id`: STRING Example: \"Eaf0bpz6NNoqLVUCqNZPAew\"\n  - `summary`: STRING Example: \"CEO at Accenture\"\n- **Organization**\n  - `revenue`: FLOAT Example: \"1.2E8\"\n  - `motto`: STRING Example: \"\"\n  - `nbrEmployees`: INTEGER Example: \"375\"\n  - `isDissolved`: BOOLEAN \n  - `id`: STRING Example: \"E0ZU8eCc5OaqS1LU9qE3n3w\"\n  - `isPublic`: BOOLEAN \n  - `name`: STRING Example: \"New Energy Group\"\n  - `summary`: STRING Example: \"Software company based in Rome, Metropolitan City \"\n- **IndustryCategory**\n  - `name`: STRING Example: \"Electronic Products Manufacturers\"\n  - `id`: STRING Example: \"EUNd__O4zMNW81lAXNK2GNw\"\n- **City**\n  - `id`: STRING Example: \"EZHWv2xKgN92oYDKSjhJ2gw\"\n  - `summary`: STRING Example: \"City in and county seat of King County, Washington\"\n  - `name`: STRING Example: \"Seattle\"\n- **Country**\n  - `name`: STRING Example: \"United States of America\"\n  - `id`: STRING Example: \"E01d4EK33MmCosgI2KXa4-A\"\n  - `summary`: STRING Example: \"Country in North America\"\n- **Article**\n  - `id`: STRING Example: \"ART176872705964\"\n  - `sentiment`: FLOAT Example: \"0.856\"\n  - `author`: STRING Example: \"David Correa\"\n  - `siteName`: STRING Example: \"MrWeb\"\n  - `summary`: STRING Example: \"Boston and Mumbai-based consumer behavior analyses\"\n  - `date`: DATE_TIME Example: \"2022-03-10T00:00:00Z\"\n  - `title`: STRING Example: \"Funds for Consumer Behavior Specialist Infinite An\"\n- **Chunk**\n  - `text`: STRING Example: \"Boston and Mumbai-based consumer behavior analyses\"\n- **Fewshot**\n  - `Question`: STRING Available options: ['How is Emil Eifrem connected to Michael Hunger? ', 'What are the latest news regarding Google? ', 'Are there any news regarding return to office poli', 'What is Microsoft policy regarding to the return t', 'How many levels of subsidiaries does Blackstone ha', 'How many Telecommunications Companies are from Mal']\n  - `Cypher`: STRING Available options: ['MATCH (p1:Person {{name:\"Emil Eifrem\"}}), (p2:Pers', 'MATCH (o:Organization {{name:\"Google\"}})<-[:MENTIO', 'CALL apoc.ml.openai.embedding([\"Are there any news', 'CALL apoc.ml.openai.embedding([\"What is Microsoft ', 'MATCH p=(o:Organization {name:\"Blackstone\"})-[:HAS', 'MATCH (o:Organization) WHERE EXISTS {(o)-[:HAS_CAT']\n  - `id`: INTEGER Min: 2, Max: 7\nRelationship properties:\n\nThe relationships:\n(:Person)-[:HAS_PARENT]->(:Person)\n(:Person)-[:HAS_CHILD]->(:Person)\n(:Organization)-[:IN_CITY]->(:City)\n(:Organization)-[:HAS_CEO]->(:Person)\n(:Organization)-[:HAS_CATEGORY]->(:IndustryCategory)\n(:Organization)-[:HAS_SUBSIDIARY]->(:Organization)\n(:Organization)-[:HAS_SUPPLIER]->(:Organization)\n(:Organization)-[:HAS_INVESTOR]->(:Organization)\n(:Organization)-[:HAS_INVESTOR]->(:Person)\n(:Organization)-[:HAS_BOARD_MEMBER]->(:Person)\n(:Organization)-[:HAS_COMPETITOR]->(:Organization)\n(:City)-[:IN_COUNTRY]->(:Country)\n(:Article)-[:HAS_CHUNK]->(:Chunk)\n(:Article)-[:MENTIONS]->(:Organization)",
        "gold_cypher": "MATCH (article:Article)-[:MENTIONS]->(org1:Organization) WITH article, collect(org1) AS mentionedOrganizations, count(DISTINCT org1) AS orgCount WHERE orgCount > 1 UNWIND mentionedOrganizations AS org MATCH (org)-[:HAS_CATEGORY]->(industry:IndustryCategory) WITH article, industry, collect(org) AS orgsByIndustry WITH article, collect(industry) AS industries, collect(orgsByIndustry) as orgsByIndustryPerArticle WHERE size(industries) > 1 UNWIND orgsByIndustryPerArticle AS orgsByIndustry UNWIND orgsByIndustry AS org RETURN DISTINCT org",
        "database": "companies",
        "full_responses": [
            "MATCH (o1:Organization)-[r:HAS_CATEGORY]->(ic:IndustryCategory)\nWITH ic, o1\nMATCH (o2:Organization)-[r:HAS_CATEGORY]->(ic)\nWHERE id(o1) < id(o2)\nRETURN o1.name, o2.name",
            "MATCH (a:Article)-[:MENTIONS]->(o1:Organization)-[:HAS_CATEGORY]->(c:IndustryCategory)\nWITH o1, c\nMATCH (o2:Organization)-[:MENTIONS]->(a)\nWHERE o1 != o2 AND c = o2.category\nRETURN o1.name",
            "MATCH (o1:Organization)-[:HAS_CATEGORY]->(ic1:IndustryCategory)\nMATCH (o2:Organization)-[:HAS_CATEGORY]->(ic1)\nMATCH (a:Article)-[:MENTIONS]->(o1)\nMATCH (a:Article)-[:MENTIONS]->(o2)\nRETURN o1.name, o2.name",
            "```cypher\nMATCH (a:Article)<-[r:MENTIONS]-(o1:Organization)-[:HAS_CATEGORY]->(ic1:IndustryCategory)\nMATCH (a2:Article)<-[r2:MENTIONS]-(o2:Organization)-[:HAS_CATEGORY]->(ic1)\nRETURN o2.name AS OrganizationName\n```",
            "MATCH (o1:Organization)-[:HAS_CEO]->(p1:Person)-[:MENTIONS]->(a1:Article)-[:HAS_CHUNK]->(c1:Chunk)\nMATCH (o2:Organization)-[:HAS_CEO]->(p2:Person)-[:MENTIONS]->(a1:Article)-[:HAS_CHUNK]->(c1:Chunk)\nMATCH (o1)-[:HAS_CATEGORY]->(ic1:IndustryCategory)\nMATCH (o2)-[:HAS_CATEGORY]->(ic1)\nRETURN o1.name, o2.name"
        ],
        "generated_cyphers": [
            "MATCH (o1:Organization)-[r:HAS_CATEGORY]->(ic:IndustryCategory)\nWITH ic, o1\nMATCH (o2:Organization)-[r:HAS_CATEGORY]->(ic)\nWHERE id(o1) < id(o2)\nRETURN o1.name, o2.name",
            "MATCH (a:Article)-[:MENTIONS]->(o1:Organization)-[:HAS_CATEGORY]->(c:IndustryCategory)\nWITH o1, c\nMATCH (o2:Organization)-[:MENTIONS]->(a)\nWHERE o1 != o2 AND c = o2.category\nRETURN o1.name",
            "MATCH (o1:Organization)-[:HAS_CATEGORY]->(ic1:IndustryCategory)\nMATCH (o2:Organization)-[:HAS_CATEGORY]->(ic1)\nMATCH (a:Article)-[:MENTIONS]->(o1)\nMATCH (a:Article)-[:MENTIONS]->(o2)\nRETURN o1.name, o2.name",
            "```cypher\nMATCH (a:Article)<-[r:MENTIONS]-(o1:Organization)-[:HAS_CATEGORY]->(ic1:IndustryCategory)\nMATCH (a2:Article)<-[r2:MENTIONS]-(o2:Organization)-[:HAS_CATEGORY]->(ic1)\nRETURN o2.name AS OrganizationName\n```",
            "MATCH (o1:Organization)-[:HAS_CEO]->(p1:Person)-[:MENTIONS]->(a1:Article)-[:HAS_CHUNK]->(c1:Chunk)\nMATCH (o2:Organization)-[:HAS_CEO]->(p2:Person)-[:MENTIONS]->(a1:Article)-[:HAS_CHUNK]->(c1:Chunk)\nMATCH (o1)-[:HAS_CATEGORY]->(ic1:IndustryCategory)\nMATCH (o2)-[:HAS_CATEGORY]->(ic1)\nRETURN o1.name, o2.name"
        ]
    },
    {
        "question": "What is the average 'book45PageRank' of characters who have interacted with both 'Aemon-Targaryen-(Maester-Aemon)' and 'Aegon-V-Targaryen'?",
        "schema": "Node properties:\n- **Character**\n  - `centrality`: FLOAT Min: 0.0, Max: 1.0\n  - `book45PageRank`: FLOAT Min: 0.15000000000000002, Max: 11.409916274911177\n  - `fastrf_embedding`: LIST Min Size: 10, Max Size: 10\n  - `book1BetweennessCentrality`: FLOAT Min: 0.0, Max: 4638.53495125504\n  - `book1PageRank`: FLOAT Min: 0.15000000000000002, Max: 8.164174336296284\n  - `louvain`: INTEGER Min: 0, Max: 10\n  - `community`: INTEGER Min: 504, Max: 795\n  - `degree`: FLOAT Min: 0.0, Max: 300.0\n  - `name`: STRING Example: \"Addam-Marbrand\"\n  - `pagerank`: FLOAT Min: 0.15000000000000002, Max: 9.473142454730429\nRelationship properties:\n- **INTERACTS**\n  - `weight: INTEGER` Min: 3, Max:  334\n- **INTERACTS1**\n  - `weight: INTEGER` Min: 3, Max:  291\n  - `book: INTEGER` Min: 1, Max:  1\n- **INTERACTS2**\n  - `weight: INTEGER` Min: 3, Max:  92\n  - `book: INTEGER` Min: 2, Max:  2\n- **INTERACTS3**\n  - `weight: INTEGER` Min: 3, Max:  95\n  - `book: INTEGER` Min: 3, Max:  3\n- **INTERACTS45**\n  - `weight: INTEGER` Min: 3, Max:  96\n  - `book: INTEGER` Min: 45, Max:  45\nThe relationships:\n(:Character)-[:INTERACTS45]->(:Character)\n(:Character)-[:INTERACTS]->(:Character)\n(:Character)-[:INTERACTS1]->(:Character)\n(:Character)-[:INTERACTS3]->(:Character)\n(:Character)-[:INTERACTS2]->(:Character)",
        "gold_cypher": "MATCH (aemon:Character { name: 'Aemon-Targaryen-(Maester-Aemon)' })-[:INTERACTS45]->(char1:Character) MATCH (aegon:Character { name: 'Aegon-V-Targaryen' })-[:INTERACTS45]->(char2:Character) WITH collect(DISTINCT char1) AS interacted_with_aemon, collect(DISTINCT char2) AS interacted_with_aegon WITH apoc.coll.intersection(interacted_with_aemon, interacted_with_aegon) AS common_characters UNWIND common_characters AS common_character WITH avg(common_character.book45PageRank) AS average_book45PageRank RETURN average_book45PageRank",
        "database": "gameofthrones",
        "full_responses": [
            "MATCH (a:Character)-[:INTERACTS45]->(b:Character)-[:INTERACTS]->(c:Character)\nWHERE a.name = 'Aemon-Targaryen-(Maester-Aemon)' AND c.name = 'Aegon-V-Targaryen'\nRETURN avg(b.book45PageRank)",
            "MATCH (c1:Character)-[r1:INTERACTS45]->(c2:Character)-[r2:INTERACTS45]->(c3:Character)\nWHERE c1.name = 'Aemon-Targaryen-(Maester-Aemon)' AND c2.name = 'Aegon-V-Targaryen'\nRETURN AVG(c2.book45PageRank)",
            "MATCH (a:Character)-[r:INTERACTS45]->(b:Character)\nMATCH (a:Character)-[r2:INTERACTS45]->(c:Character)\nWHERE a.name = 'Aemon-Targaryen-(Maester-Aemon)' AND b.name = 'Aegon-V-Targaryen'\nRETURN avg(b.book45PageRank) AS averageBook45PageRank",
            "```cypher\nMATCH (c1:Character {name: 'Aemon-Targaryen-(Maester-Aemon)'})\nMATCH (c2:Character {name: 'Aegon-V-Targaryen'})\nMATCH (c1)-[r1:INTERACTS45]->(c2)\nMATCH (c2)-[r2:INTERACTS45]->(c1)\nRETURN avg(c1.book45PageRank)\n```",
            "MATCH (a:Character)-[r:INTERACTS45]->(b:Character)\nWHERE a.name = 'Aemon-Targaryen-(Maester-Aemon)' AND b.name = 'Aegon-V-Targaryen'\nRETURN AVG(b.book45PageRank)"
        ],
        "generated_cyphers": [
            "MATCH (a:Character)-[:INTERACTS45]->(b:Character)-[:INTERACTS]->(c:Character)\nWHERE a.name = 'Aemon-Targaryen-(Maester-Aemon)' AND c.name = 'Aegon-V-Targaryen'\nRETURN avg(b.book45PageRank)",
            "MATCH (c1:Character)-[r1:INTERACTS45]->(c2:Character)-[r2:INTERACTS45]->(c3:Character)\nWHERE c1.name = 'Aemon-Targaryen-(Maester-Aemon)' AND c2.name = 'Aegon-V-Targaryen'\nRETURN AVG(c2.book45PageRank)",
            "MATCH (a:Character)-[r:INTERACTS45]->(b:Character)\nMATCH (a:Character)-[r2:INTERACTS45]->(c:Character)\nWHERE a.name = 'Aemon-Targaryen-(Maester-Aemon)' AND b.name = 'Aegon-V-Targaryen'\nRETURN avg(b.book45PageRank) AS averageBook45PageRank",
            "```cypher\nMATCH (c1:Character {name: 'Aemon-Targaryen-(Maester-Aemon)'})\nMATCH (c2:Character {name: 'Aegon-V-Targaryen'})\nMATCH (c1)-[r1:INTERACTS45]->(c2)\nMATCH (c2)-[r2:INTERACTS45]->(c1)\nRETURN avg(c1.book45PageRank)\n```",
            "MATCH (a:Character)-[r:INTERACTS45]->(b:Character)\nWHERE a.name = 'Aemon-Targaryen-(Maester-Aemon)' AND b.name = 'Aegon-V-Targaryen'\nRETURN AVG(b.book45PageRank)"
        ]
    },
    {
        "question": "Which business has the highest ratio of 5-star reviews to total reviews?",
        "schema": "Node properties:\n- **Business**\n  - `address`: STRING Available options: ['301 E Main St', '200 W Pine St', '313 N 1st St W', '1151 W Broadway St', '201 E Front St', '723 California Dr', '121 W Broadway St', '716 N San Mateo Dr', '111 E 5th Ave']\n  - `location`: POINT \n  - `city`: STRING Available options: ['Missoula', 'Burlingame', 'San Mateo']\n  - `state`: STRING Available options: ['MT', 'CA']\n  - `businessId`: STRING Available options: ['b5', 'b3', 'b1', 'b2', 'b4', 'b7', 'b6', 'b8', 'b9']\n  - `name`: STRING Available options: ['Missoula Public Library', \"Ninja Mike's\", 'KettleHouse Brewing Co.', 'Imagine Nation Brewing', 'Market on Front', 'Hanabi', 'Zootown Brew', \"Ducky's Car Wash\", 'Neo4j']\n- **User**\n  - `name`: STRING Available options: ['Will', 'Bob', 'Jenny', 'Angie']\n  - `userId`: STRING Available options: ['u1', 'u2', 'u3', 'u4']\n- **Review**\n  - `date`: DATE Min: 2015-08-29, Max: 2018-09-10\n  - `text`: STRING Available options: ['Not a great selection of books, but fortunately th', \"Best breakfast sandwich at the Farmer's Market. Al\", 'Great IPA selection!', \"Awesome full-service car wash. Love Ducky's!\", \"The world's leading graph database HQ!\"]\n  - `stars`: FLOAT Min: 3.0, Max: 5.0\n  - `reviewId`: STRING Example: \"r7\"\n- **Category**\n  - `name`: STRING Example: \"Library\"\nRelationship properties:\n\nThe relationships:\n(:Business)-[:IN_CATEGORY]->(:Category)\n(:User)-[:WROTE]->(:Review)\n(:Review)-[:REVIEWS]->(:Business)",
        "gold_cypher": "MATCH (b:Business)<-[:REVIEWS]-(review:Review) WITH b, count(review) AS totalReviews, count(CASE WHEN review.stars = 5 THEN review ELSE null END) AS fiveStarReviews WITH b, fiveStarReviews /toFloat(totalReviews)  AS ratio WITH max(ratio) AS maxRatio MATCH (b:Business)<-[:REVIEWS]-(review:Review) WITH b, count(review) AS totalReviews, count(CASE WHEN review.stars = 5 THEN review ELSE null END) AS fiveStarReviews, maxRatio WITH b, fiveStarReviews /toFloat(totalReviews)  AS ratio, maxRatio WHERE ratio = maxRatio RETURN b.name",
        "database": "grandstack",
        "full_responses": [
            "MATCH (b:Business)-[:REVIEWS]->(r:Review)\nWHERE r.stars = 5\nWITH b, COUNT(r) AS totalReviews\nORDER BY totalReviews DESC\nLIMIT 1\nRETURN b.name AS businessName",
            "MATCH (b:Business)-[r:REVIEWS]->(rev:Review)\nWHERE rev.stars = 5\nRETURN b.name AS BusinessName, COUNT(rev) AS TotalReviews, COUNT(CASE WHEN rev.stars = 5 THEN 1 ELSE NULL END) AS PositiveReviews, (COUNT(CASE WHEN rev.stars = 5 THEN 1 ELSE NULL END) / COUNT(rev)) AS PositiveReviewRatio\nORDER BY PositiveReviewRatio DESC\nLIMIT 1",
            "MATCH (b:Business)<-[r:REVIEWS]-(:Review {stars: 5.0}) WITH b, COUNT(r) AS totalReviews MATCH (b)<-[r:REVIEWS]-(:Review) WITH b, totalReviews, COUNT(r) AS totalReviewsAnd5s ORDER BY totalReviewsAnd5s DESC LIMIT 1 RETURN b.name",
            "```cypher\nMATCH (b:Business)\nWITH b, count(r) AS totalReviews, sum(CASE WHEN r.stars = 5 THEN 1 ELSE 0 END) AS fiveStarReviews\nRETURN b.name AS BusinessName, totalReviews, fiveStarReviews, fiveStarReviews / totalReviews AS ratio\nORDER BY ratio DESC\nLIMIT 1\n```",
            "MATCH (b:Business)-[r:REVIEWS]->(rev:Review)\nWHERE rev.stars = 5\nRETURN b.name, COUNT(r) AS totalReviews, COUNT(CASE WHEN rev.stars = 5 THEN 1 ELSE NULL END) AS fiveStarReviews, (totalReviews / fiveStarReviews) AS ratio\nORDER BY ratio DESC\nLIMIT 1"
        ],
        "generated_cyphers": [
            "MATCH (b:Business)-[:REVIEWS]->(r:Review)\nWHERE r.stars = 5\nWITH b, COUNT(r) AS totalReviews\nORDER BY totalReviews DESC\nLIMIT 1\nRETURN b.name AS businessName",
            "MATCH (b:Business)-[r:REVIEWS]->(rev:Review)\nWHERE rev.stars = 5\nRETURN b.name AS BusinessName, COUNT(rev) AS TotalReviews, COUNT(CASE WHEN rev.stars = 5 THEN 1 ELSE NULL END) AS PositiveReviews, (COUNT(CASE WHEN rev.stars = 5 THEN 1 ELSE NULL END) / COUNT(rev)) AS PositiveReviewRatio\nORDER BY PositiveReviewRatio DESC\nLIMIT 1",
            "MATCH (b:Business)<-[r:REVIEWS]-(:Review {stars: 5.0}) WITH b, COUNT(r) AS totalReviews MATCH (b)<-[r:REVIEWS]-(:Review) WITH b, totalReviews, COUNT(r) AS totalReviewsAnd5s ORDER BY totalReviewsAnd5s DESC LIMIT 1 RETURN b.name",
            "```cypher\nMATCH (b:Business)\nWITH b, count(r) AS totalReviews, sum(CASE WHEN r.stars = 5 THEN 1 ELSE 0 END) AS fiveStarReviews\nRETURN b.name AS BusinessName, totalReviews, fiveStarReviews, fiveStarReviews / totalReviews AS ratio\nORDER BY ratio DESC\nLIMIT 1\n```",
            "MATCH (b:Business)-[r:REVIEWS]->(rev:Review)\nWHERE rev.stars = 5\nRETURN b.name, COUNT(r) AS totalReviews, COUNT(CASE WHEN rev.stars = 5 THEN 1 ELSE NULL END) AS fiveStarReviews, (totalReviews / fiveStarReviews) AS ratio\nORDER BY ratio DESC\nLIMIT 1"
        ]
    },
    {
        "question": "List the businesses and the percentage of their reviews that are positive, negative, and neutral.",
        "schema": "Node properties:\n- **Business**\n  - `address`: STRING Available options: ['301 E Main St', '200 W Pine St', '313 N 1st St W', '1151 W Broadway St', '201 E Front St', '723 California Dr', '121 W Broadway St', '716 N San Mateo Dr', '111 E 5th Ave']\n  - `location`: POINT \n  - `city`: STRING Available options: ['Missoula', 'Burlingame', 'San Mateo']\n  - `state`: STRING Available options: ['MT', 'CA']\n  - `businessId`: STRING Available options: ['b5', 'b3', 'b1', 'b2', 'b4', 'b7', 'b6', 'b8', 'b9']\n  - `name`: STRING Available options: ['Missoula Public Library', \"Ninja Mike's\", 'KettleHouse Brewing Co.', 'Imagine Nation Brewing', 'Market on Front', 'Hanabi', 'Zootown Brew', \"Ducky's Car Wash\", 'Neo4j']\n- **User**\n  - `name`: STRING Available options: ['Will', 'Bob', 'Jenny', 'Angie']\n  - `userId`: STRING Available options: ['u1', 'u2', 'u3', 'u4']\n- **Review**\n  - `date`: DATE Min: 2015-08-29, Max: 2018-09-10\n  - `text`: STRING Available options: ['Not a great selection of books, but fortunately th', \"Best breakfast sandwich at the Farmer's Market. Al\", 'Great IPA selection!', \"Awesome full-service car wash. Love Ducky's!\", \"The world's leading graph database HQ!\"]\n  - `stars`: FLOAT Min: 3.0, Max: 5.0\n  - `reviewId`: STRING Example: \"r7\"\n- **Category**\n  - `name`: STRING Example: \"Library\"\nRelationship properties:\n\nThe relationships:\n(:Business)-[:IN_CATEGORY]->(:Category)\n(:User)-[:WROTE]->(:Review)\n(:Review)-[:REVIEWS]->(:Business)",
        "gold_cypher": "MATCH (b:Business)<-[:REVIEWS]-(r:Review) WITH b, count(r) AS totalReviews,   sum(CASE WHEN r.stars >= 4 THEN 1 ELSE 0 END) AS positiveReviews,  sum(CASE WHEN r.stars = 3 OR r.stars = 2 THEN 1 ELSE 0 END) AS neutralReviews,  sum(CASE WHEN r.stars = 1 THEN 1 ELSE 0 END) AS negativeReviews RETURN b.name AS businessName,        (positiveReviews / totalReviews * 100) AS positivePercentage,        (neutralReviews / totalReviews * 100) AS neutralPercentage,        (negativeReviews / totalReviews * 100) AS negativePercentage",
        "database": "grandstack",
        "full_responses": [
            "```\nMATCH (b:Business)-[r:REVIEWS]->(rev:Review)\nWITH b, count(*) AS totalReviews\nMATCH (b)-[:IN_CATEGORY]->(c:Category)\nWITH b, totalReviews, c.name AS category\nWITH b, totalReviews, category, collect({stars: rev.stars, reviewText: rev.text}) AS reviews\nWITH b, totalReviews, category, sum(CASE WHEN rev.stars = 5 THEN 1 ELSE 0 END) AS positiveReviews, sum(CASE WHEN rev.stars = 1 THEN 1 ELSE 0 END) AS negativeReviews, sum(CASE WHEN rev.stars BETWEEN 2 AND 4 THEN 1 ELSE 0 END) AS neutralReviews\nRETURN b.name AS Business, category, positiveReviews, negativeReviews, neutralReviews, (positiveReviews * 100.0 / totalReviews) AS PositivePercentage, (negativeReviews * 100.0 / totalReviews) AS NegativePercentage, (neutralReviews * 100.0 / totalReviews) AS NeutralPercentage\nORDER BY b.name, category\n```",
            "MATCH (b:Business)-[r:REVIEWS]->(rev:Review)\nWITH b, COUNT(CASE WHEN rev.stars > 4 THEN 1 ELSE NULL END) AS positive, COUNT(CASE WHEN rev.stars < 2 THEN 1 ELSE NULL END) AS negative, COUNT(*) AS totalReviews\nRETURN b.name AS Business, ((positive * 100) / totalReviews) AS PositivePercentage, ((negative * 100) / totalReviews) AS NegativePercentage, ((totalReviews - (positive + negative)) * 100) / totalReviews AS NeutralPercentage",
            "MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)\nWITH b, c\nOPTIONAL MATCH (b)-[r:REVIEWS]->(rev:Review)\nRETURN b.name AS Business, c.name AS Category, \n    SUM(CASE WHEN rev.stars >= 4 THEN 1 ELSE 0 END) / COUNT(*) * 100 AS Positive,\n    SUM(CASE WHEN rev.stars <= 2 THEN 1 ELSE 0 END) / COUNT(*) * 100 AS Negative,\n    SUM(CASE WHEN rev.stars = 3 THEN 1 ELSE 0 END) / COUNT(*) * 100 AS Neutral",
            "MATCH (b:Business)-[r:REVIEWS]->(rev:Review)\nWITH b, collect(CASE WHEN rev.stars > 3 THEN 1 ELSE 0 END) AS positive, collect(CASE WHEN rev.stars < 3 THEN 1 ELSE 0 END) AS negative, collect(CASE WHEN rev.stars = 3 THEN 1 ELSE 0 END) AS neutral\nRETURN b.name, SUM(positive) AS positive_reviews, SUM(negative) AS negative_reviews, SUM(neutral) AS neutral_reviews, SUM(positive) / SIZE(positive) * 100 AS positive_percentage, SUM(negative) / SIZE(negative) * 100 AS negative_percentage, SUM(neutral) / SIZE(neutral) * 100 AS neutral_percentage",
            "MATCH (b:Business)\nWITH b\nOPTIONAL MATCH (b)-[r:REVIEWS]->(r:Review)\nWITH b, COUNT(r) AS reviewCount, SUM(CASE WHEN r.stars > 4 THEN 1 ELSE 0 END) AS positiveCount, SUM(CASE WHEN r.stars < 4 THEN 1 ELSE 0 END) AS negativeCount\nWITH b, reviewCount, positiveCount, negativeCount, (positiveCount + negativeCount) AS totalReviews\nRETURN b.name AS businessName, (positiveCount / totalReviews * 100) AS positivePercentage, (negativeCount / totalReviews * 100) AS negativePercentage, (100 - (positivePercentage + negativePercentage)) AS neutralPercentage"
        ],
        "generated_cyphers": [
            "```\nMATCH (b:Business)-[r:REVIEWS]->(rev:Review)\nWITH b, count(*) AS totalReviews\nMATCH (b)-[:IN_CATEGORY]->(c:Category)\nWITH b, totalReviews, c.name AS category\nWITH b, totalReviews, category, collect({stars: rev.stars, reviewText: rev.text}) AS reviews\nWITH b, totalReviews, category, sum(CASE WHEN rev.stars = 5 THEN 1 ELSE 0 END) AS positiveReviews, sum(CASE WHEN rev.stars = 1 THEN 1 ELSE 0 END) AS negativeReviews, sum(CASE WHEN rev.stars BETWEEN 2 AND 4 THEN 1 ELSE 0 END) AS neutralReviews\nRETURN b.name AS Business, category, positiveReviews, negativeReviews, neutralReviews, (positiveReviews * 100.0 / totalReviews) AS PositivePercentage, (negativeReviews * 100.0 / totalReviews) AS NegativePercentage, (neutralReviews * 100.0 / totalReviews) AS NeutralPercentage\nORDER BY b.name, category\n```",
            "MATCH (b:Business)-[r:REVIEWS]->(rev:Review)\nWITH b, COUNT(CASE WHEN rev.stars > 4 THEN 1 ELSE NULL END) AS positive, COUNT(CASE WHEN rev.stars < 2 THEN 1 ELSE NULL END) AS negative, COUNT(*) AS totalReviews\nRETURN b.name AS Business, ((positive * 100) / totalReviews) AS PositivePercentage, ((negative * 100) / totalReviews) AS NegativePercentage, ((totalReviews - (positive + negative)) * 100) / totalReviews AS NeutralPercentage",
            "MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)\nWITH b, c\nOPTIONAL MATCH (b)-[r:REVIEWS]->(rev:Review)\nRETURN b.name AS Business, c.name AS Category, \n    SUM(CASE WHEN rev.stars >= 4 THEN 1 ELSE 0 END) / COUNT(*) * 100 AS Positive,\n    SUM(CASE WHEN rev.stars <= 2 THEN 1 ELSE 0 END) / COUNT(*) * 100 AS Negative,\n    SUM(CASE WHEN rev.stars = 3 THEN 1 ELSE 0 END) / COUNT(*) * 100 AS Neutral",
            "MATCH (b:Business)-[r:REVIEWS]->(rev:Review)\nWITH b, collect(CASE WHEN rev.stars > 3 THEN 1 ELSE 0 END) AS positive, collect(CASE WHEN rev.stars < 3 THEN 1 ELSE 0 END) AS negative, collect(CASE WHEN rev.stars = 3 THEN 1 ELSE 0 END) AS neutral\nRETURN b.name, SUM(positive) AS positive_reviews, SUM(negative) AS negative_reviews, SUM(neutral) AS neutral_reviews, SUM(positive) / SIZE(positive) * 100 AS positive_percentage, SUM(negative) / SIZE(negative) * 100 AS negative_percentage, SUM(neutral) / SIZE(neutral) * 100 AS neutral_percentage",
            "MATCH (b:Business)\nWITH b\nOPTIONAL MATCH (b)-[r:REVIEWS]->(r:Review)\nWITH b, COUNT(r) AS reviewCount, SUM(CASE WHEN r.stars > 4 THEN 1 ELSE 0 END) AS positiveCount, SUM(CASE WHEN r.stars < 4 THEN 1 ELSE 0 END) AS negativeCount\nWITH b, reviewCount, positiveCount, negativeCount, (positiveCount + negativeCount) AS totalReviews\nRETURN b.name AS businessName, (positiveCount / totalReviews * 100) AS positivePercentage, (negativeCount / totalReviews * 100) AS negativePercentage, (100 - (positivePercentage + negativePercentage)) AS neutralPercentage"
        ]
    },
    {
        "question": "How many characters interacted with both \"Aegon-V-Targaryen\" and \"Cersei-Lannister\" in any book?",
        "schema": "Node properties:\n- **Character**\n  - `centrality`: FLOAT Min: 0.0, Max: 1.0\n  - `book45PageRank`: FLOAT Min: 0.15000000000000002, Max: 11.409916274911177\n  - `fastrf_embedding`: LIST Min Size: 10, Max Size: 10\n  - `book1BetweennessCentrality`: FLOAT Min: 0.0, Max: 4638.53495125504\n  - `book1PageRank`: FLOAT Min: 0.15000000000000002, Max: 8.164174336296284\n  - `louvain`: INTEGER Min: 0, Max: 10\n  - `community`: INTEGER Min: 504, Max: 795\n  - `degree`: FLOAT Min: 0.0, Max: 300.0\n  - `name`: STRING Example: \"Addam-Marbrand\"\n  - `pagerank`: FLOAT Min: 0.15000000000000002, Max: 9.473142454730429\nRelationship properties:\n- **INTERACTS**\n  - `weight: INTEGER` Min: 3, Max:  334\n- **INTERACTS1**\n  - `weight: INTEGER` Min: 3, Max:  291\n  - `book: INTEGER` Min: 1, Max:  1\n- **INTERACTS2**\n  - `weight: INTEGER` Min: 3, Max:  92\n  - `book: INTEGER` Min: 2, Max:  2\n- **INTERACTS3**\n  - `weight: INTEGER` Min: 3, Max:  95\n  - `book: INTEGER` Min: 3, Max:  3\n- **INTERACTS45**\n  - `weight: INTEGER` Min: 3, Max:  96\n  - `book: INTEGER` Min: 45, Max:  45\nThe relationships:\n(:Character)-[:INTERACTS45]->(:Character)\n(:Character)-[:INTERACTS]->(:Character)\n(:Character)-[:INTERACTS1]->(:Character)\n(:Character)-[:INTERACTS3]->(:Character)\n(:Character)-[:INTERACTS2]->(:Character)",
        "gold_cypher": "MATCH (aegon:Character {name: \"Aegon-V-Targaryen\"})-[:INTERACTS|:INTERACTS1|:INTERACTS2|:INTERACTS3|:INTERACTS45]-(char1:Character) WITH aegon, collect(char1) AS aegon_interacted_characters MATCH (cersei:Character {name: \"Cersei-Lannister\"})-[:INTERACTS|:INTERACTS1|:INTERACTS2|:INTERACTS3|:INTERACTS45]-(char2:Character) WITH aegon_interacted_characters, collect(char2) AS cersei_interacted_characters RETURN size(apoc.coll.intersection(aegon_interacted_characters, cersei_interacted_characters)) AS count",
        "database": "gameofthrones",
        "full_responses": [
            "MATCH (a:Character)-[r:INTERACTS45]->(b:Character)\nWHERE a.name = 'Aegon-V-Targaryen' AND b.name = 'Cersei-Lannister'\nRETURN count(DISTINCT r)",
            "MATCH (char1:Character {name: \"Aegon-V-Targaryen\"})-[:INTERACTS45|INTERACTS1|INTERACTS2|INTERACTS3|INTERACTS]->(char2:Character {name: \"Cersei-Lannister\"})\nRETURN count(DISTINCT char2)",
            "MATCH (a:Character {name: 'Aegon-V-Targaryen'})-[:INTERACTS45]->(b:Character {name: 'Cersei-Lannister'})\nRETURN COUNT(DISTINCT b)",
            "MATCH (char1:Character)-[rel:INTERACTS45]->(char2:Character)\nWHERE char1.name = \"Aegon-V-Targaryen\" AND char2.name = \"Cersei-Lannister\"\nRETURN count(rel)",
            "MATCH (c1:Character)-[r1:INTERACTS45]->(c2:Character)\nMATCH (c1:Character)-[r2:INTERACTS45]->(c3:Character)\nWHERE c1.name = 'Aegon-V-Targaryen' AND c2.name = 'Cersei-Lannister'\nRETURN c2.name AS interacted_with_cersei"
        ],
        "generated_cyphers": [
            "MATCH (a:Character)-[r:INTERACTS45]->(b:Character)\nWHERE a.name = 'Aegon-V-Targaryen' AND b.name = 'Cersei-Lannister'\nRETURN count(DISTINCT r)",
            "MATCH (char1:Character {name: \"Aegon-V-Targaryen\"})-[:INTERACTS45|INTERACTS1|INTERACTS2|INTERACTS3|INTERACTS]->(char2:Character {name: \"Cersei-Lannister\"})\nRETURN count(DISTINCT char2)",
            "MATCH (a:Character {name: 'Aegon-V-Targaryen'})-[:INTERACTS45]->(b:Character {name: 'Cersei-Lannister'})\nRETURN COUNT(DISTINCT b)",
            "MATCH (char1:Character)-[rel:INTERACTS45]->(char2:Character)\nWHERE char1.name = \"Aegon-V-Targaryen\" AND char2.name = \"Cersei-Lannister\"\nRETURN count(rel)",
            "MATCH (c1:Character)-[r1:INTERACTS45]->(c2:Character)\nMATCH (c1:Character)-[r2:INTERACTS45]->(c3:Character)\nWHERE c1.name = 'Aegon-V-Targaryen' AND c2.name = 'Cersei-Lannister'\nRETURN c2.name AS interacted_with_cersei"
        ]
    },
    {
        "question": "Which person has produced the most movies?",
        "schema": "Node properties:\n- **Movie**\n  - `title`: STRING Example: \"The Matrix\"\n  - `votes`: INTEGER Min: 1, Max: 5259\n  - `tagline`: STRING Example: \"Welcome to the Real World\"\n  - `released`: INTEGER Min: 1975, Max: 2012\n- **Person**\n  - `born`: INTEGER Min: 1929, Max: 1996\n  - `name`: STRING Example: \"Keanu Reeves\"\nRelationship properties:\n- **ACTED_IN**\n  - `roles: LIST` Min Size: 1, Max Size: 6\n- **REVIEWED**\n  - `summary: STRING` Available options: ['Pretty funny at times', 'A solid romp', 'Silly, but fun', 'You had me at Jerry', 'An amazing journey', 'Slapstick redeemed only by the Robin Williams and ', 'Dark, but compelling', 'The coolest football movie ever', 'Fun, but a little far fetched']\n  - `rating: INTEGER` Min: 45, Max:  100\nThe relationships:\n(:Person)-[:ACTED_IN]->(:Movie)\n(:Person)-[:DIRECTED]->(:Movie)\n(:Person)-[:PRODUCED]->(:Movie)\n(:Person)-[:WROTE]->(:Movie)\n(:Person)-[:FOLLOWS]->(:Person)\n(:Person)-[:REVIEWED]->(:Movie)",
        "gold_cypher": "MATCH (p:Person)-[:PRODUCED]->(m:Movie) RETURN p.name AS producer, count(m) AS movie_count ORDER BY movie_count DESC LIMIT 1",
        "database": "movies",
        "full_responses": [
            "MATCH (p:Person)-[r:PRODUCED]->(m:Movie)\nRETURN p.name, COUNT(m) AS production_count\nORDER BY production_count DESC\nLIMIT 1",
            "MATCH (p:Person)-[:PRODUCED]->(m:Movie)\nRETURN p.name, COUNT(m) AS num_movies\nORDER BY num_movies DESC\nLIMIT 1",
            "MATCH (p:Person)-[r:PRODUCED]->(m:Movie)\nRETURN p.name AS Producer, COUNT(m) AS MovieCount\nORDER BY MovieCount DESC\nLIMIT 1",
            "MATCH (p:Person)-[r:PRODUCED]->(m:Movie)\nRETURN p.name, COUNT(m) AS movie_count\nORDER BY movie_count DESC\nLIMIT 1",
            "MATCH (p:Person)-[r:PRODUCED]->(m:Movie)\nRETURN p.name, COUNT(m) AS movie_count\nORDER BY movie_count DESC\nLIMIT 1"
        ],
        "generated_cyphers": [
            "MATCH (p:Person)-[r:PRODUCED]->(m:Movie)\nRETURN p.name, COUNT(m) AS production_count\nORDER BY production_count DESC\nLIMIT 1",
            "MATCH (p:Person)-[:PRODUCED]->(m:Movie)\nRETURN p.name, COUNT(m) AS num_movies\nORDER BY num_movies DESC\nLIMIT 1",
            "MATCH (p:Person)-[r:PRODUCED]->(m:Movie)\nRETURN p.name AS Producer, COUNT(m) AS MovieCount\nORDER BY MovieCount DESC\nLIMIT 1",
            "MATCH (p:Person)-[r:PRODUCED]->(m:Movie)\nRETURN p.name, COUNT(m) AS movie_count\nORDER BY movie_count DESC\nLIMIT 1",
            "MATCH (p:Person)-[r:PRODUCED]->(m:Movie)\nRETURN p.name, COUNT(m) AS movie_count\nORDER BY movie_count DESC\nLIMIT 1"
        ]
    },
    {
        "question": "List all tweets by 'neo4j' that have more than 200 favorites and show the first 5.",
        "schema": "Node properties:\n- **User**\n  - `betweenness`: FLOAT Example: \"3.49332601E8\"\n  - `location`: STRING Example: \"Graphs Are Everywhere\"\n  - `followers`: INTEGER Example: \"34507\"\n  - `following`: INTEGER Example: \"10124\"\n  - `profile_image_url`: STRING Example: \"http://pbs.twimg.com/profile_images/11837552737537\"\n  - `screen_name`: STRING Example: \"neo4j\"\n  - `name`: STRING Example: \"Neo4j\"\n  - `url`: STRING Example: \"https://t.co/JSIaZFJEaE\"\n  - `statuses`: INTEGER Example: \"512\"\n- **Me**\n  - `profile_image_url`: STRING Available options: ['http://pbs.twimg.com/profile_images/11837552737537']\n  - `betweenness`: FLOAT Min: 3.49332601E8, Max: 3.49332601E8\n  - `following`: INTEGER Min: 10124, Max: 10124\n  - `url`: STRING Available options: ['https://t.co/JSIaZFJEaE']\n  - `location`: STRING Available options: ['Graphs Are Everywhere']\n  - `followers`: INTEGER Min: 34507, Max: 34507\n  - `screen_name`: STRING Available options: ['neo4j']\n  - `name`: STRING Available options: ['Neo4j']\n- **Tweet**\n  - `created_at`: DATE_TIME Min: 2020-12-06T05:12:02Z, Max: 2021-03-16T15:30:07Z\n  - `id`: INTEGER Min: 690028662083612672, Max: 1371846247913512966\n  - `id_str`: STRING Example: \"1371815021265747970\"\n  - `text`: STRING Example: \"Proud to help @educationgovuk deliver critical ser\"\n  - `favorites`: INTEGER Min: 0, Max: 394\n  - `import_method`: STRING Available options: ['user']\n- **Hashtag**\n  - `name`: STRING Example: \"education\"\n- **Link**\n  - `url`: STRING Example: \"https://twitter.com/i/web/status/13718150212657479\"\n- **Source**\n  - `name`: STRING Example: \"Buffer\"\nRelationship properties:\n- **SIMILAR_TO**\n  - `score: FLOAT` Min: 0.0030581039755351682, Max:  1.0\nThe relationships:\n(:User)-[:FOLLOWS]->(:User)\n(:User)-[:FOLLOWS]->(:Me)\n(:User)-[:POSTS]->(:Tweet)\n(:User)-[:INTERACTS_WITH]->(:User)\n(:User)-[:SIMILAR_TO]->(:User)\n(:User)-[:SIMILAR_TO]->(:Me)\n(:Me)-[:FOLLOWS]->(:User)\n(:Me)-[:POSTS]->(:Tweet)\n(:Me)-[:INTERACTS_WITH]->(:User)\n(:Me)-[:RT_MENTIONS]->(:User)\n(:Me)-[:AMPLIFIES]->(:User)\n(:Tweet)-[:MENTIONS]->(:User)\n(:Tweet)-[:MENTIONS]->(:Me)\n(:Tweet)-[:USING]->(:Source)\n(:Tweet)-[:TAGS]->(:Hashtag)\n(:Tweet)-[:CONTAINS]->(:Link)\n(:Tweet)-[:RETWEETS]->(:Tweet)\n(:Tweet)-[:REPLY_TO]->(:Tweet)",
        "gold_cypher": "MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet) WHERE t.favorites > 200 RETURN t ORDER BY t.favorites DESC LIMIT 5",
        "database": "twitter",
        "full_responses": [
            "MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)\nWHERE t.favorites > 200\nRETURN t\nLIMIT 5",
            "MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)\nWHERE t.favorites > 200\nRETURN t LIMIT 5",
            "MATCH (u:User {screen_name: 'neo4j'})-[p:POSTS]->(t:Tweet)\nWHERE t.favorites > 200\nRETURN t ORDER BY t.created_at DESC LIMIT 5",
            "```cypher\nMATCH (neo4j:User {screen_name: 'neo4j'})-[:POSTS]->(tweet:Tweet)\nWHERE tweet.favorites > 200\nRETURN tweet ORDER BY tweet.created_at DESC LIMIT 5\n```",
            "```cypher\nMATCH (u:User {screen_name: 'neo4j'})<-[:POSTS]-(t:Tweet)\nWHERE t.favorites > 200\nRETURN t.id, t.text LIMIT 5\n```"
        ],
        "generated_cyphers": [
            "MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)\nWHERE t.favorites > 200\nRETURN t\nLIMIT 5",
            "MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)\nWHERE t.favorites > 200\nRETURN t LIMIT 5",
            "MATCH (u:User {screen_name: 'neo4j'})-[p:POSTS]->(t:Tweet)\nWHERE t.favorites > 200\nRETURN t ORDER BY t.created_at DESC LIMIT 5",
            "```cypher\nMATCH (neo4j:User {screen_name: 'neo4j'})-[:POSTS]->(tweet:Tweet)\nWHERE tweet.favorites > 200\nRETURN tweet ORDER BY tweet.created_at DESC LIMIT 5\n```",
            "```cypher\nMATCH (u:User {screen_name: 'neo4j'})<-[:POSTS]-(t:Tweet)\nWHERE t.favorites > 200\nRETURN t.id, t.text LIMIT 5\n```"
        ]
    },
    {
        "question": "What are the top 5 movies with the longest runtime and released after 2010?",
        "schema": "Node properties:\n- **Movie**\n  - `average_vote`: FLOAT Example: \"7.7\"\n  - `overview`: STRING Example: \"Led by Woody, Andy's toys live happily in his room\"\n  - `revenue`: FLOAT Example: \"3.73554033E8\"\n  - `vote_count`: INTEGER Example: \"5415\"\n  - `tagline`: STRING Example: \"Roll the dice and unleash the excitement!\"\n  - `budget`: INTEGER Example: \"30000000\"\n  - `title`: STRING Example: \"Toy Story\"\n  - `poster_path`: STRING Example: \"/rhIRbceoE9lR4veEXuwCC2wARtG.jpg\"\n  - `imdb_id`: STRING Example: \"tt0114709\"\n  - `status`: STRING Example: \"Released\"\n  - `runtime`: FLOAT Example: \"81.0\"\n  - `popularity`: FLOAT Example: \"21.946943\"\n  - `homepage`: STRING Example: \"http://toystory.disney.com/toy-story\"\n  - `release_date`: DATE Example: \"1995-10-30\"\n  - `id`: INTEGER Min: 862, Max: 31357\n  - `original_title`: STRING Example: \"Toy Story\"\n  - `original_language`: STRING Example: \"en\"\n- **Language**\n  - `id`: STRING Example: \"en\"\n  - `name`: STRING Available options: ['', 'Gaeilge', 'Kiswahili', 'Az\u0259rbaycan', 'Somali', '\u0431\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f \u043c\u043e\u0432\u0430', 'Fulfulde', 'Hausa']\n- **Country**\n  - `id`: STRING Example: \"US\"\n  - `name`: STRING Example: \"United States of America\"\n- **Genre**\n  - `id`: INTEGER Min: 12, Max: 10770\n  - `name`: STRING Example: \"Animation\"\n- **ProductionCompany**\n  - `id`: INTEGER Min: 3, Max: 10201\n  - `name`: STRING Example: \"Pixar Animation Studios\"\n- **Collection**\n  - `name`: STRING Example: \"Toy Story Collection\"\n  - `id`: INTEGER Min: 10, Max: 480160\n  - `backdrop_path`: STRING Example: \"/9FBwqcd9IRruEDUrTdcaafOMKUq.jpg\"\n  - `poster_path`: STRING Example: \"/7G9915LfUQ2lVfwMEEhDsn3kT4B.jpg\"\n- **Person**\n  - `gender`: INTEGER Example: \"2\"\n  - `profile_path`: STRING Example: \"/pQFoyx7rp09CJTAb932F2g8Nlho.jpg\"\n  - `id`: INTEGER Min: 31, Max: 12900\n  - `name`: STRING Example: \"Tom Hanks\"\n- **User**\n  - `id`: INTEGER Min: 27490cf6-22eb-495d-9dd6-902c0f89c627, Max: 4\n- **Keyword**\n  - `id`: INTEGER Min: 931, Max: 9713\n  - `name`: STRING Example: \"jealousy\"\n- **Video**\n  - `tagline`: STRING Example: \"Fresh Fish. Mixed Vegetables.\"\n  - `average_vote`: FLOAT Min: 0.0, Max: 10.0\n  - `overview`: STRING Example: \"Get ready as Bob the Tomato, Larry the Cucumber an\"\n  - `revenue`: FLOAT Min: 0.0, Max: 0.0\n  - `poster_path`: STRING Example: \"/iWahPsY3hsKOizZHgzQcAxv4O3B.jpg\"\n  - `vote_count`: INTEGER Min: 0, Max: 115\n  - `title`: STRING Example: \"Jonah: A VeggieTales Movie\"\n  - `release_date`: DATE Min: 1973-01-12, Max: 2017-03-17\n  - `status`: STRING Available options: ['Released']\n  - `budget`: INTEGER Min: 0, Max: 2219684\n  - `popularity`: FLOAT Min: 0.0, Max: 9.22546\n  - `imdb_id`: STRING Example: \"tt0298388\"\n  - `original_title`: STRING Example: \"Jonah: A VeggieTales Movie\"\n  - `id`: INTEGER Min: 13284, Max: 461088\n  - `runtime`: FLOAT Min: 0.0, Max: 583.0\n  - `original_language`: STRING Example: \"en\"\n  - `homepage`: STRING Example: \"http://www.loosechange911.com/\"\n- **Adult**\n  - `average_vote`: FLOAT Min: 0.0, Max: 6.3\n  - `overview`: STRING Available options: ['A sailor takes an American businessman and his gir', 'The FBI and Texas police make ready to storm the h', 'Electrical Girl centers around a horny young woman', '\u00c1gata suffers from a psychological disorder which ', \"Shane Ryan's sequel to the disturbing Amateur Porn\", 'Australian film about a fictional sub-par Australi', 'Olaf and his mother run a boarding house and a whi', 'A man who returns home to find his wife cheating o', 'An American scientific research facility opens a p']\n  - `revenue`: FLOAT Min: 0.0, Max: 0.0\n  - `poster_path`: STRING Available options: ['/tzVK7nTnzUiVeFSZhOAIHmrgXUS.jpg', '/1VzwIa8HTykNiCCW8PBaJnyTvO8.jpg', '/yTfqRQlJMTAuTNDG01XjNg5KPPg.jpg', '/oP2WvKIWxqSBVHjfYAizFHOqBLG.jpg', '/zpycBSiBFp5Uib6gWJpgEvfOgdn.jpg', '/e7CAc8OadcUoKNPIX86SEPSX7f.jpg', '/jjncR0vECvXVrBvr0A1vLghL4pN.jpg', '/pJLmZBruOmn2c9mYWe3h1xcXaA0.jpg', '/3uv9oaqOJkkdZiQp6r9lf24tkHW.jpg']\n  - `vote_count`: INTEGER Min: 0, Max: 16\n  - `title`: STRING Available options: ['Erotic Nights of the Living Dead', 'Standoff', 'Electrical Girl', 'Diet of Sex', 'Amateur Porn Star Killer 2', 'The Band', 'The Sinful Dwarf', 'Adulterers', 'Half -Life']\n  - `release_date`: DATE Min: 1973-12-20, Max: 2016-01-05\n  - `status`: STRING Available options: ['Released', 'In Production']\n  - `budget`: INTEGER Min: 0, Max: 750000\n  - `popularity`: FLOAT Min: 0.001803, Max: 6.889832\n  - `imdb_id`: STRING Available options: ['tt0079642', 'tt0119931', 'tt0322232', 'tt3094816', 'tt1161951', 'tt1153101', 'tt0070696', 'tt4044464', 'tt2697688']\n  - `original_title`: STRING Available options: ['Le notti erotiche dei morti viventi', 'Standoff', '\u767c\u96fb\u6084\u5b0c\u5a03', 'Diet of Sex', 'Amateur Porn Star Killer 2', 'The Band', 'Dv\u00e6rgen', 'Adulterers', 'Half -Life']\n  - `id`: INTEGER Min: 5422, Max: 448290\n  - `runtime`: FLOAT Min: 0.0, Max: 112.0\n  - `original_language`: STRING Available options: ['it', 'en', 'cn', 'es', 'da']\n  - `tagline`: STRING Available options: ['Trust Will Get You Killed', 'Comedy, food, drama and sex, a lot of sex', 'Humiliation. Rape. Murder. You know the drill.', \"Sex, drugs and Rock 'n Roll\", 'The Mother of all Dwarfsploitation films!', 'Love. Betrayal. Vengeance']\n  - `homepage`: STRING Available options: ['http://www.imdb.com/title/tt0119931/', 'http://www.dietofsex.com/']\n- **Package**\n  - `price`: FLOAT Min: 0.0, Max: 99.99\n  - `duration`: DURATION \n  - `id`: INTEGER Min: 0, Max: 6\n  - `name`: STRING Available options: ['Childrens', 'Bronze', 'Silver', 'Gold', 'Platinum', 'Ultimate', 'Free Trial']\n- **Subscription**\n  - `expiresAt`: DATE_TIME Min: 2020-08-23T16:20:52.383Z, Max: 2020-08-23T16:20:52.383Z\n  - `id`: STRING Available options: ['e74f7163-eace-4169-8043-41627f1fe236']\nRelationship properties:\n- **CAST_FOR**\n  - `credit_id: STRING` Example: \"52fe4459c3a36847f8090d7d\"\n  - `order: INTEGER` Example: \"0\"\n  - `character: STRING` Example: \"Charlie Wilson\"\n  - `cast_id: INTEGER` Example: \"12\"\n- **CREW_FOR**\n  - `credit_id: STRING` Example: \"55e4f0abc3a368140800047e\"\n  - `job: STRING` Example: \"Producer\"\n  - `department: STRING` Example: \"Production\"\n- **RATED**\n  - `timestamp: DATE_TIME` Example: \"2015-03-09T22:49:42Z\"\n  - `rating: FLOAT` Example: \"5.0\"\nThe relationships:\n(:Movie)-[:ORIGINAL_LANGUAGE]->(:Language)\n(:Movie)-[:SPOKEN_IN_LANGUAGE]->(:Language)\n(:Movie)-[:PRODUCED_IN_COUNTRY]->(:Country)\n(:Movie)-[:IN_GENRE]->(:Genre)\n(:Movie)-[:PRODUCED_BY]->(:ProductionCompany)\n(:Movie)-[:HAS_KEYWORD]->(:Keyword)\n(:Movie)-[:IN_COLLECTION]->(:Collection)\n(:Person)-[:CAST_FOR]->(:Movie)\n(:Person)-[:CREW_FOR]->(:Movie)\n(:Person)-[:CREW_FOR]->(:Video)\n(:User)-[:RATED]->(:Movie)\n(:User)-[:RATED]->(:Video)\n(:Video)-[:ORIGINAL_LANGUAGE]->(:Language)\n(:Video)-[:SPOKEN_IN_LANGUAGE]->(:Language)\n(:Video)-[:PRODUCED_IN_COUNTRY]->(:Country)\n(:Video)-[:IN_GENRE]->(:Genre)\n(:Video)-[:PRODUCED_BY]->(:ProductionCompany)\n(:Video)-[:HAS_KEYWORD]->(:Keyword)\n(:Video)-[:IN_COLLECTION]->(:Collection)\n(:Adult)-[:ORIGINAL_LANGUAGE]->(:Language)\n(:Adult)-[:SPOKEN_IN_LANGUAGE]->(:Language)\n(:Adult)-[:PRODUCED_IN_COUNTRY]->(:Country)\n(:Adult)-[:IN_GENRE]->(:Genre)\n(:Adult)-[:PRODUCED_BY]->(:ProductionCompany)\n(:Adult)-[:HAS_KEYWORD]->(:Keyword)\n(:Package)-[:PROVIDES_ACCESS_TO]->(:Genre)\n(:Subscription)-[:FOR_PACKAGE]->(:Package)",
        "gold_cypher": "MATCH (m:Movie) WHERE m.release_date > date('2010-01-01') AND m.runtime IS NOT NULL RETURN m ORDER BY m.runtime DESC LIMIT 5",
        "database": "eoflix",
        "full_responses": [
            "MATCH (m:Movie)\nWHERE m.release_date > '2010-01-01' AND m.runtime > 0\nRETURN m.title AS Title, m.runtime AS Runtime\nORDER BY m.runtime DESC\nLIMIT 5",
            "MATCH (m:Movie)\nWHERE m.release_date > '2010-01-01' AND m.runtime > 0\nRETURN m.title, m.runtime\nORDER BY m.runtime DESC\nLIMIT 5",
            "```\nMATCH (m:Movie)\nWHERE m.release_date > '2010-01-01' AND m.runtime > 0\nRETURN m.title AS MovieTitle, m.runtime AS Runtime\nORDER BY m.runtime DESC\nLIMIT 5;\n```",
            "MATCH (m:Movie)\nWHERE m.release_date > '2010-01-01'\nRETURN m.title AS Title, m.runtime AS Runtime ORDER BY m.runtime DESC LIMIT 5",
            "MATCH (m:Movie)\nWHERE m.release_date > '2010-01-01' AND m.runtime IS NOT NULL\nRETURN m.title, m.runtime\nORDER BY m.runtime DESC\nLIMIT 5"
        ],
        "generated_cyphers": [
            "MATCH (m:Movie)\nWHERE m.release_date > '2010-01-01' AND m.runtime > 0\nRETURN m.title AS Title, m.runtime AS Runtime\nORDER BY m.runtime DESC\nLIMIT 5",
            "MATCH (m:Movie)\nWHERE m.release_date > '2010-01-01' AND m.runtime > 0\nRETURN m.title, m.runtime\nORDER BY m.runtime DESC\nLIMIT 5",
            "```\nMATCH (m:Movie)\nWHERE m.release_date > '2010-01-01' AND m.runtime > 0\nRETURN m.title AS MovieTitle, m.runtime AS Runtime\nORDER BY m.runtime DESC\nLIMIT 5;\n```",
            "MATCH (m:Movie)\nWHERE m.release_date > '2010-01-01'\nRETURN m.title AS Title, m.runtime AS Runtime ORDER BY m.runtime DESC LIMIT 5",
            "MATCH (m:Movie)\nWHERE m.release_date > '2010-01-01' AND m.runtime IS NOT NULL\nRETURN m.title, m.runtime\nORDER BY m.runtime DESC\nLIMIT 5"
        ]
    },
    {
        "question": "Identify characters who have both high pagerank and high degree of centrality. Limit to top 5.",
        "schema": "Node properties:\n- **Character**\n  - `centrality`: FLOAT Min: 0.0, Max: 1.0\n  - `book45PageRank`: FLOAT Min: 0.15000000000000002, Max: 11.409916274911177\n  - `fastrf_embedding`: LIST Min Size: 10, Max Size: 10\n  - `book1BetweennessCentrality`: FLOAT Min: 0.0, Max: 4638.53495125504\n  - `book1PageRank`: FLOAT Min: 0.15000000000000002, Max: 8.164174336296284\n  - `louvain`: INTEGER Min: 0, Max: 10\n  - `community`: INTEGER Min: 504, Max: 795\n  - `degree`: FLOAT Min: 0.0, Max: 300.0\n  - `name`: STRING Example: \"Addam-Marbrand\"\n  - `pagerank`: FLOAT Min: 0.15000000000000002, Max: 9.473142454730429\nRelationship properties:\n- **INTERACTS**\n  - `weight: INTEGER` Min: 3, Max:  334\n- **INTERACTS1**\n  - `weight: INTEGER` Min: 3, Max:  291\n  - `book: INTEGER` Min: 1, Max:  1\n- **INTERACTS2**\n  - `weight: INTEGER` Min: 3, Max:  92\n  - `book: INTEGER` Min: 2, Max:  2\n- **INTERACTS3**\n  - `weight: INTEGER` Min: 3, Max:  95\n  - `book: INTEGER` Min: 3, Max:  3\n- **INTERACTS45**\n  - `weight: INTEGER` Min: 3, Max:  96\n  - `book: INTEGER` Min: 45, Max:  45\nThe relationships:\n(:Character)-[:INTERACTS45]->(:Character)\n(:Character)-[:INTERACTS]->(:Character)\n(:Character)-[:INTERACTS1]->(:Character)\n(:Character)-[:INTERACTS3]->(:Character)\n(:Character)-[:INTERACTS2]->(:Character)",
        "gold_cypher": "MATCH (c:Character) WHERE c.pagerank > 5 AND c.centrality > 0.5 RETURN c ORDER BY c.pagerank DESC, c.centrality DESC LIMIT 5",
        "database": "gameofthrones",
        "full_responses": [
            "```\nMATCH (c:Character)\nWHERE c.pagerank > 0.2 AND c.degree > 100\nRETURN c.name, c.pagerank, c.degree\nORDER BY c.pagerank DESC, c.degree DESC\nLIMIT 5\n```",
            "MATCH (c:Character)\nWHERE c.pagerank > 0.8 AND c.centrality > 0.8\nRETURN c.name, c.pagerank, c.centrality\nORDER BY c.pagerank DESC, c.centrality DESC\nLIMIT 5",
            "```\nMATCH (c:Character)\nWHERE c.pagerank > 0.5 AND c.degree > 0.5\nRETURN c.name, c.pagerank, c.degree\nORDER BY c.pagerank DESC, c.degree DESC\nLIMIT 5\n```",
            "MATCH (c:Character)\nWHERE c.pagerank > 9 AND c.degree > 250\nRETURN c.name, c.pagerank, c.degree\nORDER BY c.pagerank DESC, c.degree DESC\nLIMIT 5",
            "MATCH (c:Character)\nWHERE c.pagerank > 0.8 AND c.centrality > 0.8\nRETURN c.name, c.pagerank, c.centrality\nORDER BY c.pagerank DESC, c.centrality DESC\nLIMIT 5"
        ],
        "generated_cyphers": [
            "```\nMATCH (c:Character)\nWHERE c.pagerank > 0.2 AND c.degree > 100\nRETURN c.name, c.pagerank, c.degree\nORDER BY c.pagerank DESC, c.degree DESC\nLIMIT 5\n```",
            "MATCH (c:Character)\nWHERE c.pagerank > 0.8 AND c.centrality > 0.8\nRETURN c.name, c.pagerank, c.centrality\nORDER BY c.pagerank DESC, c.centrality DESC\nLIMIT 5",
            "```\nMATCH (c:Character)\nWHERE c.pagerank > 0.5 AND c.degree > 0.5\nRETURN c.name, c.pagerank, c.degree\nORDER BY c.pagerank DESC, c.degree DESC\nLIMIT 5\n```",
            "MATCH (c:Character)\nWHERE c.pagerank > 9 AND c.degree > 250\nRETURN c.name, c.pagerank, c.degree\nORDER BY c.pagerank DESC, c.degree DESC\nLIMIT 5",
            "MATCH (c:Character)\nWHERE c.pagerank > 0.8 AND c.centrality > 0.8\nRETURN c.name, c.pagerank, c.centrality\nORDER BY c.pagerank DESC, c.centrality DESC\nLIMIT 5"
        ]
    },
    {
        "question": "Identify the top 3 filings in terms of amount that concern entities in Singapore.",
        "schema": "Node properties:\n- **Country**\n  - `location`: POINT \n  - `code`: STRING Example: \"AFG\"\n  - `name`: STRING Example: \"Afghanistan\"\n  - `tld`: STRING Example: \"AF\"\n- **Filing**\n  - `begin`: DATE_TIME Min: 2000-02-08T00:00:00Z, Max: 2017-09-05T00:00:00Z\n  - `end`: DATE_TIME Min: 2000-02-08T00:00:00Z, Max: 2017-11-03T00:00:00Z\n  - `originator_bank_id`: STRING Example: \"cimb-bank-berhad\"\n  - `sar_id`: STRING Example: \"3297\"\n  - `beneficiary_bank`: STRING Example: \"Barclays Bank Plc\"\n  - `filer_org_name_id`: STRING Example: \"the-bank-of-new-york-mellon-corp\"\n  - `originator_bank_country`: STRING Example: \"Singapore\"\n  - `beneficiary_bank_country`: STRING Example: \"United Kingdom\"\n  - `filer_org_name`: STRING Example: \"The Bank of New York Mellon Corp.\"\n  - `originator_iso`: STRING Example: \"SGP\"\n  - `beneficiary_bank_id`: STRING Example: \"barclays-bank-plc-london-england-gbr\"\n  - `origin_lat`: STRING Example: \"1.3667\"\n  - `origin_lng`: STRING Example: \"103.8\"\n  - `end_date_format`: STRING Example: \"2015-09-25T00:00:00Z\"\n  - `begin_date_format`: STRING Example: \"2015-03-25T00:00:00Z\"\n  - `originator_bank`: STRING Example: \"CIMB Bank Berhad\"\n  - `beneficiary_lat`: STRING Example: \"54\"\n  - `beneficiary_iso`: STRING Example: \"GBR\"\n  - `beneficiary_lng`: STRING Example: \"-2\"\n  - `begin_date`: STRING Example: \"Mar 25, 2015\"\n  - `id`: STRING Example: \"223254\"\n  - `end_date`: STRING Example: \"Sep 25, 2015\"\n  - `amount`: INTEGER Min: 1.18, Max: 2721000000\n  - `number`: INTEGER Min: 1, Max: 174\n- **Entity**\n  - `id`: STRING Example: \"the-bank-of-new-york-mellon-corp\"\n  - `location`: POINT \n  - `name`: STRING Example: \"The Bank of New York Mellon Corp.\"\n  - `country`: STRING Example: \"CHN\"\nRelationship properties:\n\nThe relationships:\n(:Filing)-[:BENEFITS]->(:Entity)\n(:Filing)-[:CONCERNS]->(:Entity)\n(:Filing)-[:ORIGINATOR]->(:Entity)\n(:Entity)-[:FILED]->(:Filing)\n(:Entity)-[:COUNTRY]->(:Country)",
        "gold_cypher": "MATCH (f:Filing)-[:CONCERNS]->(e:Entity)-[:COUNTRY]->(c:Country {name: \"Singapore\"}) RETURN f ORDER BY f.amount DESC LIMIT 3",
        "database": "fincen",
        "full_responses": [
            "MATCH (f:Filing)-[:CONCERNS]->(e:Entity)<-[:COUNTRY]-(c:Country {code: \"SGP\"})\nWITH f, e, c\nORDER BY f.amount DESC\nLIMIT 3\nRETURN f, e, c, f.amount",
            "MATCH (f:Filing)-[:CONCERNS]->(e:Entity)-[:COUNTRY]->(c:Country)\nWHERE c.code = 'SGP'\nRETURN f.id AS filing_id, f.amount AS amount\nORDER BY f.amount DESC\nLIMIT 3",
            "MATCH (e:Entity)-[r:FILED]-(f:Filing)-[bc:CONCERNS]-(c:Country {code: 'SGP'})\nWHERE bc.originator_bank_country = 'Singapore'\nRETURN f.amount DESC LIMIT 3",
            "```cypher\nMATCH (f:Filing)-[r:CONCERNS]->(e:Entity)<-[r2:ORIGINATOR]->(c:Country {code: \"SGP\"})\nWHERE r.concern_type = 'Financial concerns'\nWITH f, r, e, c, r.amount AS amount\nORDER BY amount DESC\nLIMIT 3\nRETURN f, e, c, amount\n```",
            "MATCH (f:Filing)-[:CONCERNS]->(e:Entity)-[:COUNTRY]->(c:Country {code: \"SGP\"})\nRETURN f.amount AS amount, f\nORDER BY f.amount DESC\nLIMIT 3"
        ],
        "generated_cyphers": [
            "MATCH (f:Filing)-[:CONCERNS]->(e:Entity)<-[:COUNTRY]-(c:Country {code: \"SGP\"})\nWITH f, e, c\nORDER BY f.amount DESC\nLIMIT 3\nRETURN f, e, c, f.amount",
            "MATCH (f:Filing)-[:CONCERNS]->(e:Entity)-[:COUNTRY]->(c:Country)\nWHERE c.code = 'SGP'\nRETURN f.id AS filing_id, f.amount AS amount\nORDER BY f.amount DESC\nLIMIT 3",
            "MATCH (e:Entity)-[r:FILED]-(f:Filing)-[bc:CONCERNS]-(c:Country {code: 'SGP'})\nWHERE bc.originator_bank_country = 'Singapore'\nRETURN f.amount DESC LIMIT 3",
            "```cypher\nMATCH (f:Filing)-[r:CONCERNS]->(e:Entity)<-[r2:ORIGINATOR]->(c:Country {code: \"SGP\"})\nWHERE r.concern_type = 'Financial concerns'\nWITH f, r, e, c, r.amount AS amount\nORDER BY amount DESC\nLIMIT 3\nRETURN f, e, c, amount\n```",
            "MATCH (f:Filing)-[:CONCERNS]->(e:Entity)-[:COUNTRY]->(c:Country {code: \"SGP\"})\nRETURN f.amount AS amount, f\nORDER BY f.amount DESC\nLIMIT 3"
        ]
    },
    {
        "question": "What are the names of streams with the oldest creation dates and their associated games?",
        "schema": "Node properties:\n- **Stream**\n  - `createdAt`: DATE_TIME Min: 2007-05-22T10:39:53.259969Z, Max: 2021-05-09T14:16:40.370294Z\n  - `id`: STRING Example: \"129004176\"\n  - `description`: STRING Example: \"Welcome to my Channel, I'm Big Chase, 31 living in\"\n  - `url`: STRING Example: \"https://www.twitch.tv/itsbigchase\"\n  - `name`: STRING Example: \"itsbigchase\"\n  - `followers`: INTEGER Min: 0, Max: 10243195\n  - `total_view_count`: INTEGER Min: 21, Max: 1451487256\n- **Game**\n  - `name`: STRING Example: \"Rust\"\n- **Language**\n  - `name`: STRING Example: \"en\"\n- **User**\n  - `name`: STRING Example: \"itsbigchase\"\n- **Team**\n  - `createdAt`: DATE_TIME Min: 2011-10-11T23:59:43.548701Z, Max: 2021-05-07T17:19:09.946382Z\n  - `name`: STRING Example: \"ESO Stream Team\"\n  - `id`: STRING Example: \"5893\"\nRelationship properties:\n\nThe relationships:\n(:Stream)-[:PLAYS]->(:Game)\n(:Stream)-[:HAS_LANGUAGE]->(:Language)\n(:Stream)-[:MODERATOR]->(:Stream)\n(:Stream)-[:MODERATOR]->(:User)\n(:Stream)-[:CHATTER]->(:Stream)\n(:Stream)-[:CHATTER]->(:User)\n(:Stream)-[:HAS_TEAM]->(:Team)\n(:Stream)-[:VIP]->(:Stream)\n(:Stream)-[:VIP]->(:User)\n(:User)-[:CHATTER]->(:Stream)\n(:User)-[:CHATTER]->(:User)\n(:User)-[:MODERATOR]->(:Stream)\n(:User)-[:MODERATOR]->(:User)",
        "gold_cypher": "MATCH (s:Stream)-[:PLAYS]->(g:Game) WITH s, g ORDER BY s.createdAt LIMIT 1 RETURN s.name AS stream_name, g.name AS game_name",
        "database": "twitch",
        "full_responses": [
            "MATCH (s:Stream)-[:PLAYS]->(g:Game)\nWHERE s.createdAt = (SELECT MIN(createdAt) FROM Stream)\nRETURN s.name, g.name",
            "MATCH (s:Stream)-[r:PLAYS]->(g:Game)\nWHERE r.createdAt = (SELECT MIN(createdAt) FROM Stream)\nRETURN s.name AS StreamName, g.name AS GameName",
            "MATCH (s:Stream)-[:PLAYS]->(g:Game) ORDER BY s.createdAt ASC LIMIT 1\nRETURN s.name, g.name",
            "```\nMATCH (s:Stream)-[:PLAYS]->(g:Game)\nWITH s, g\nWHERE s.createdAt = '2007-05-22T10:39:53.259969Z'\nRETURN s.name, g.name\n```",
            "MATCH (s:Stream)-[:PLAYS]->(g:Game)\nWHERE s.createdAt = (SELECT min(createdAt) FROM Stream)\nRETURN s.name, g.name"
        ],
        "generated_cyphers": [
            "MATCH (s:Stream)-[:PLAYS]->(g:Game)\nWHERE s.createdAt = (SELECT MIN(createdAt) FROM Stream)\nRETURN s.name, g.name",
            "MATCH (s:Stream)-[r:PLAYS]->(g:Game)\nWHERE r.createdAt = (SELECT MIN(createdAt) FROM Stream)\nRETURN s.name AS StreamName, g.name AS GameName",
            "MATCH (s:Stream)-[:PLAYS]->(g:Game) ORDER BY s.createdAt ASC LIMIT 1\nRETURN s.name, g.name",
            "```\nMATCH (s:Stream)-[:PLAYS]->(g:Game)\nWITH s, g\nWHERE s.createdAt = '2007-05-22T10:39:53.259969Z'\nRETURN s.name, g.name\n```",
            "MATCH (s:Stream)-[:PLAYS]->(g:Game)\nWHERE s.createdAt = (SELECT min(createdAt) FROM Stream)\nRETURN s.name, g.name"
        ]
    },
    {
        "question": "List the 3 movies with the lowest average ratings in the REVIEWED relationship.",
        "schema": "Node properties:\n- **Movie**\n  - `title`: STRING Example: \"The Matrix\"\n  - `votes`: INTEGER Min: 1, Max: 5259\n  - `tagline`: STRING Example: \"Welcome to the Real World\"\n  - `released`: INTEGER Min: 1975, Max: 2012\n- **Person**\n  - `born`: INTEGER Min: 1929, Max: 1996\n  - `name`: STRING Example: \"Keanu Reeves\"\nRelationship properties:\n- **ACTED_IN**\n  - `roles: LIST` Min Size: 1, Max Size: 6\n- **REVIEWED**\n  - `summary: STRING` Available options: ['Pretty funny at times', 'A solid romp', 'Silly, but fun', 'You had me at Jerry', 'An amazing journey', 'Slapstick redeemed only by the Robin Williams and ', 'Dark, but compelling', 'The coolest football movie ever', 'Fun, but a little far fetched']\n  - `rating: INTEGER` Min: 45, Max:  100\nThe relationships:\n(:Person)-[:ACTED_IN]->(:Movie)\n(:Person)-[:DIRECTED]->(:Movie)\n(:Person)-[:PRODUCED]->(:Movie)\n(:Person)-[:WROTE]->(:Movie)\n(:Person)-[:FOLLOWS]->(:Person)\n(:Person)-[:REVIEWED]->(:Movie)",
        "gold_cypher": "MATCH (m:Movie)<-[r:REVIEWED]-() WITH m, AVG(r.rating) AS avgRating RETURN m.title, avgRating ORDER BY avgRating ASC LIMIT 3",
        "database": "movies",
        "full_responses": [
            "MATCH (m:Movie)-[r:REVIEWED]->(p:Person)\nWITH m, avg(r.rating) as avgRating\nORDER BY avgRating ASC\nLIMIT 3\nRETURN m.title, avgRating",
            "MATCH (m:Movie)-[r:REVIEWED]->(p:Person)\nRETURN m.title, AVG(r.rating) AS averageRating\nORDER BY averageRating ASC\nLIMIT 3",
            "```cypher\nMATCH (p:Person)-[r:REVIEWED]->(m:Movie)\nRETURN m.title, AVG(r.rating) AS averageRating\nORDER BY averageRating ASC\nLIMIT 3\n```",
            "MATCH (m:Movie)-[r:REVIEWED]->(p:Person)\nRETURN m.title, AVG(r.rating) AS averageRating\nORDER BY averageRating\nLIMIT 3",
            "MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)\nRETURN m.title, AVG(r.rating)\nORDER BY AVG(r.rating) ASC\nLIMIT 3"
        ],
        "generated_cyphers": [
            "MATCH (m:Movie)-[r:REVIEWED]->(p:Person)\nWITH m, avg(r.rating) as avgRating\nORDER BY avgRating ASC\nLIMIT 3\nRETURN m.title, avgRating",
            "MATCH (m:Movie)-[r:REVIEWED]->(p:Person)\nRETURN m.title, AVG(r.rating) AS averageRating\nORDER BY averageRating ASC\nLIMIT 3",
            "```cypher\nMATCH (p:Person)-[r:REVIEWED]->(m:Movie)\nRETURN m.title, AVG(r.rating) AS averageRating\nORDER BY averageRating ASC\nLIMIT 3\n```",
            "MATCH (m:Movie)-[r:REVIEWED]->(p:Person)\nRETURN m.title, AVG(r.rating) AS averageRating\nORDER BY averageRating\nLIMIT 3",
            "MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)\nRETURN m.title, AVG(r.rating)\nORDER BY AVG(r.rating) ASC\nLIMIT 3"
        ]
    },
    {
        "question": "Which 3 products have the highest units on order?",
        "schema": "Node properties:\n- **Product**\n  - `productName`: STRING Example: \"Chai\"\n  - `quantityPerUnit`: STRING Example: \"10 boxes x 20 bags\"\n  - `unitsOnOrder`: INTEGER Min: 0, Max: 100\n  - `supplierID`: STRING Example: \"1\"\n  - `productID`: STRING Example: \"1\"\n  - `discontinued`: BOOLEAN \n  - `categoryID`: STRING Available options: ['1', '2', '7', '6', '8', '4', '3', '5']\n  - `reorderLevel`: INTEGER Min: 0, Max: 30\n  - `unitsInStock`: INTEGER Min: 0, Max: 125\n  - `unitPrice`: FLOAT Min: 2.5, Max: 263.5\n- **Category**\n  - `picture`: STRING Available options: ['0x151C2F00020000000D000E0014002100FFFFFFFF4269746D']\n  - `categoryID`: STRING Available options: ['1', '2', '3', '4', '5', '6', '7', '8']\n  - `description`: STRING Available options: ['Soft drinks, coffees, teas, beers, and ales', 'Sweet and savory sauces, relishes, spreads, and se', 'Desserts, candies, and sweet breads', 'Cheeses', 'Breads, crackers, pasta, and cereal', 'Prepared meats', 'Dried fruit and bean curd', 'Seaweed and fish']\n  - `categoryName`: STRING Available options: ['Beverages', 'Condiments', 'Confections', 'Dairy Products', 'Grains/Cereals', 'Meat/Poultry', 'Produce', 'Seafood']\n- **Supplier**\n  - `companyName`: STRING Example: \"Exotic Liquids\"\n  - `contactName`: STRING Example: \"Charlotte Cooper\"\n  - `homePage`: STRING Available options: ['NULL', '#CAJUN.HTM#', \"Mayumi's (on the World Wide Web)#http://www.micros\", '(03) 444-6588', 'Plutzer (on the World Wide Web)#http://www.microso', '(0544) 60603', '(1) 03.83.00.62', '(02) 555-4873', '(089) 6547667', '38.76.98.58']\n  - `phone`: STRING Example: \"(171) 555-2222\"\n  - `postalCode`: STRING Example: \"EC1 4SD\"\n  - `contactTitle`: STRING Example: \"Purchasing Manager\"\n  - `region`: STRING Example: \"NULL\"\n  - `address`: STRING Example: \"49 Gilbert St.\"\n  - `fax`: STRING Example: \"NULL\"\n  - `supplierID`: STRING Example: \"1\"\n  - `country`: STRING Example: \"UK\"\n  - `city`: STRING Example: \"London\"\n- **Customer**\n  - `fax`: STRING Example: \"030-0076545\"\n  - `companyName`: STRING Example: \"Alfreds Futterkiste\"\n  - `customerID`: STRING Example: \"ALFKI\"\n  - `phone`: STRING Example: \"030-0074321\"\n  - `contactName`: STRING Example: \"Maria Anders\"\n  - `contactTitle`: STRING Example: \"Sales Representative\"\n  - `region`: STRING Example: \"NULL\"\n  - `address`: STRING Example: \"Obere Str. 57\"\n  - `postalCode`: STRING Example: \"12209\"\n  - `country`: STRING Example: \"Germany\"\n  - `city`: STRING Example: \"Berlin\"\n- **Order**\n  - `shipName`: STRING Example: \"Vins et alcools Chevalier\"\n  - `requiredDate`: STRING Example: \"1996-08-01 00:00:00.000\"\n  - `shipCity`: STRING Example: \"Reims\"\n  - `employeeID`: STRING Available options: ['5', '6', '4', '3', '9', '1', '8', '2', '7']\n  - `shipPostalCode`: STRING Example: \"51100\"\n  - `shippedDate`: STRING Example: \"1996-07-16 00:00:00.000\"\n  - `freight`: STRING Example: \"32.38\"\n  - `orderDate`: STRING Example: \"1996-07-04 00:00:00.000\"\n  - `orderID`: STRING Example: \"10248\"\n  - `shipAddress`: STRING Example: \"59 rue de l'Abbaye\"\n  - `customerID`: STRING Example: \"VINET\"\n  - `shipCountry`: STRING Example: \"France\"\n  - `shipVia`: STRING Available options: ['3', '1', '2']\n  - `shipRegion`: STRING Example: \"NULL\"\nRelationship properties:\n- **ORDERS**\n  - `orderID: STRING` Example: \"10248\"\n  - `unitPrice: STRING` Example: \"34.80\"\n  - `productID: STRING` Example: \"72\"\n  - `quantity: INTEGER` Min: 1, Max:  130\n  - `discount: STRING` Example: \"0\"\nThe relationships:\n(:Product)-[:PART_OF]->(:Category)\n(:Supplier)-[:SUPPLIES]->(:Product)\n(:Customer)-[:PURCHASED]->(:Order)\n(:Order)-[:ORDERS]->(:Product)",
        "gold_cypher": "MATCH (p:Product) WHERE p.unitsOnOrder IS NOT NULL RETURN p.productName, p.unitsOnOrder ORDER BY p.unitsOnOrder DESC LIMIT 3",
        "database": "northwind",
        "full_responses": [
            "```\nMATCH (p:Product)-[:PART_OF]->(c:Category)\nWHERE c.categoryID = 'Beverages'\nRETURN p.productName, p.unitsOnOrder ORDER BY p.unitsOnOrder DESC LIMIT 3;\n```",
            "```cypher\nMATCH (p:Product)-[r:PART_OF]->(c:Category)\nWHERE c.categoryName = 'Beverages'\nORDER BY p.unitsOnOrder DESC\nLIMIT 3;\n```",
            "```cypher\nMATCH (p:Product)-[r:PART_OF]->(c:Category)\nWHERE r.categoryID IN ['1', '2', '3', '4', '5', '6', '7', '8']\nRETURN p.productName, p.unitsOnOrder\nORDER BY p.unitsOnOrder DESC\nLIMIT 3;\n```",
            "MATCH (p:Product)-[r:PART_OF]->(c:Category)\nRETURN p.productName, p.unitsOnOrder\nORDER BY p.unitsOnOrder DESC\nLIMIT 3",
            "MATCH (p:Product)-[r:PART_OF]->(c:Category)\nWHERE p.unitsOnOrder > 0\nRETURN p.productName, p.unitsOnOrder ORDER BY p.unitsOnOrder DESC LIMIT 3"
        ],
        "generated_cyphers": [
            "```\nMATCH (p:Product)-[:PART_OF]->(c:Category)\nWHERE c.categoryID = 'Beverages'\nRETURN p.productName, p.unitsOnOrder ORDER BY p.unitsOnOrder DESC LIMIT 3;\n```",
            "```cypher\nMATCH (p:Product)-[r:PART_OF]->(c:Category)\nWHERE c.categoryName = 'Beverages'\nORDER BY p.unitsOnOrder DESC\nLIMIT 3;\n```",
            "```cypher\nMATCH (p:Product)-[r:PART_OF]->(c:Category)\nWHERE r.categoryID IN ['1', '2', '3', '4', '5', '6', '7', '8']\nRETURN p.productName, p.unitsOnOrder\nORDER BY p.unitsOnOrder DESC\nLIMIT 3;\n```",
            "MATCH (p:Product)-[r:PART_OF]->(c:Category)\nRETURN p.productName, p.unitsOnOrder\nORDER BY p.unitsOnOrder DESC\nLIMIT 3",
            "MATCH (p:Product)-[r:PART_OF]->(c:Category)\nWHERE p.unitsOnOrder > 0\nRETURN p.productName, p.unitsOnOrder ORDER BY p.unitsOnOrder DESC LIMIT 3"
        ]
    },
    {
        "question": "Which users are moderators of streams that play the game \"Apex Legends\"?",
        "schema": "Node properties:\n- **Stream**\n  - `createdAt`: DATE_TIME Min: 2007-05-22T10:39:53.259969Z, Max: 2021-05-09T14:16:40.370294Z\n  - `id`: STRING Example: \"129004176\"\n  - `description`: STRING Example: \"Welcome to my Channel, I'm Big Chase, 31 living in\"\n  - `url`: STRING Example: \"https://www.twitch.tv/itsbigchase\"\n  - `name`: STRING Example: \"itsbigchase\"\n  - `followers`: INTEGER Min: 0, Max: 10243195\n  - `total_view_count`: INTEGER Min: 21, Max: 1451487256\n- **Game**\n  - `name`: STRING Example: \"Rust\"\n- **Language**\n  - `name`: STRING Example: \"en\"\n- **User**\n  - `name`: STRING Example: \"itsbigchase\"\n- **Team**\n  - `createdAt`: DATE_TIME Min: 2011-10-11T23:59:43.548701Z, Max: 2021-05-07T17:19:09.946382Z\n  - `name`: STRING Example: \"ESO Stream Team\"\n  - `id`: STRING Example: \"5893\"\nRelationship properties:\n\nThe relationships:\n(:Stream)-[:PLAYS]->(:Game)\n(:Stream)-[:HAS_LANGUAGE]->(:Language)\n(:Stream)-[:MODERATOR]->(:Stream)\n(:Stream)-[:MODERATOR]->(:User)\n(:Stream)-[:CHATTER]->(:Stream)\n(:Stream)-[:CHATTER]->(:User)\n(:Stream)-[:HAS_TEAM]->(:Team)\n(:Stream)-[:VIP]->(:Stream)\n(:Stream)-[:VIP]->(:User)\n(:User)-[:CHATTER]->(:Stream)\n(:User)-[:CHATTER]->(:User)\n(:User)-[:MODERATOR]->(:Stream)\n(:User)-[:MODERATOR]->(:User)",
        "gold_cypher": "MATCH (g:Game {name: \"Apex Legends\"}) MATCH (g)<-[:PLAYS]-(s:Stream) MATCH (s)<-[:MODERATOR]-(u:User) RETURN DISTINCT u.name",
        "database": "twitch",
        "full_responses": [
            "MATCH (s:Stream)-[r:PLAYS]->(g:Game {name: \"Apex Legends\"})\nWHERE r = \"PLAYS\"\nAND s HAS MODERATOR\nRETURN DISTINCT s.name AS StreamName, s.id AS StreamID, r AS RelationshipType, s.createdAt AS StreamCreatedAt, s.total_view_count AS StreamTotalViewCount",
            "MATCH (s:Stream)-[r:PLAYS]->(g:Game {name: 'Apex Legends'})-[:MODERATOR]->(u:User)\nRETURN u.name",
            "MATCH (s:Stream)-[:PLAYS]->(g:Game {name: \"Apex Legends\"})-[:MODERATOR]->(u:User)\nRETURN u.name",
            "```\nMATCH (s:Stream)-[:PLAYS]->(g:Game {name: \"Apex Legends\"})-[:MODERATOR]->(u:User)\nRETURN u.name\n```",
            "MATCH (user:User)-[:MODERATOR]->(stream:Stream)-[:PLAYS]->(game:Game {name: \"Apex Legends\"})\nRETURN user.name"
        ],
        "generated_cyphers": [
            "MATCH (s:Stream)-[r:PLAYS]->(g:Game {name: \"Apex Legends\"})\nWHERE r = \"PLAYS\"\nAND s HAS MODERATOR\nRETURN DISTINCT s.name AS StreamName, s.id AS StreamID, r AS RelationshipType, s.createdAt AS StreamCreatedAt, s.total_view_count AS StreamTotalViewCount",
            "MATCH (s:Stream)-[r:PLAYS]->(g:Game {name: 'Apex Legends'})-[:MODERATOR]->(u:User)\nRETURN u.name",
            "MATCH (s:Stream)-[:PLAYS]->(g:Game {name: \"Apex Legends\"})-[:MODERATOR]->(u:User)\nRETURN u.name",
            "```\nMATCH (s:Stream)-[:PLAYS]->(g:Game {name: \"Apex Legends\"})-[:MODERATOR]->(u:User)\nRETURN u.name\n```",
            "MATCH (user:User)-[:MODERATOR]->(stream:Stream)-[:PLAYS]->(game:Game {name: \"Apex Legends\"})\nRETURN user.name"
        ]
    },
    {
        "question": "What is the sum of the sizes of the first 3 users who have a size greater than 2 and have interacted with users with an area less than 3?",
        "schema": "Node properties:\n- **User**\n  - `label`: STRING Example: \"inchristbl.bsky.social\"\n  - `key`: STRING Example: \"0\"\n  - `y`: FLOAT Example: \"6000.659\"\n  - `color`: STRING Example: \"#3CB371\"\n  - `x`: FLOAT Example: \"-4383.217\"\n  - `area`: FLOAT Example: \"2.6\"\n  - `size`: FLOAT Example: \"1.82\"\nRelationship properties:\n- **INTERACTED**\n  - `weight: INTEGER` Example: \"1\"\n  - `ogWeight: INTEGER` Example: \"1\"\n  - `size: FLOAT` Example: \"0.2\"\n  - `key: STRING` Example: \"geid_68_0\"\nThe relationships:\n(:User)-[:INTERACTED]->(:User)",
        "gold_cypher": "MATCH (u1:User)-[:INTERACTED]->(u2:User) WHERE u1.size > 2 AND u2.area < 3 WITH u1 LIMIT 3 RETURN sum(u1.size) AS total_size",
        "database": "bluesky",
        "full_responses": [
            "MATCH (u1:User)-[r:INTERACTED]->(u2:User)\nWHERE u2.size > 2 AND u2.area < 3\nWITH u1, u2, r\nORDER BY u1.size DESC\nLIMIT 3\nRETURN u1.size + u2.size + r.size",
            "MATCH (u1:User)-[r:INTERACTED]->(u2:User)\nWHERE u1.size > 2 AND u2.area < 3 AND u1.x < u2.x\nRETURN sum(u1.size) AS total_size",
            "MATCH (u:User {area: {areaFilter} AND size: {sizeFilter}})\nWITH u LIMIT 3\nMATCH (u)-[r:INTERACTED]->(u2:User)\nWHERE u2.area < {areaFilter}\nRETURN SUM(r.size) AS totalSize",
            "MATCH (u1:User)-[i:INTERACTED]->(u2:User)\nWHERE u1.area < 3 AND u1.size > 2\nORDER BY u1.size DESC\nLIMIT 3\nRETURN SUM(i.size) AS total_size",
            "MATCH (u1:User)-[:INTERACTED]->(u2:User)\nWHERE u1.size > 2 AND u1.area < 3 AND u1 <> u2\nWITH u1, u2, u2.size AS size\nORDER BY size DESC\nLIMIT 3\nRETURN sum(size)"
        ],
        "generated_cyphers": [
            "MATCH (u1:User)-[r:INTERACTED]->(u2:User)\nWHERE u2.size > 2 AND u2.area < 3\nWITH u1, u2, r\nORDER BY u1.size DESC\nLIMIT 3\nRETURN u1.size + u2.size + r.size",
            "MATCH (u1:User)-[r:INTERACTED]->(u2:User)\nWHERE u1.size > 2 AND u2.area < 3 AND u1.x < u2.x\nRETURN sum(u1.size) AS total_size",
            "MATCH (u:User {area: {areaFilter} AND size: {sizeFilter}})\nWITH u LIMIT 3\nMATCH (u)-[r:INTERACTED]->(u2:User)\nWHERE u2.area < {areaFilter}\nRETURN SUM(r.size) AS totalSize",
            "MATCH (u1:User)-[i:INTERACTED]->(u2:User)\nWHERE u1.area < 3 AND u1.size > 2\nORDER BY u1.size DESC\nLIMIT 3\nRETURN SUM(i.size) AS total_size",
            "MATCH (u1:User)-[:INTERACTED]->(u2:User)\nWHERE u1.size > 2 AND u1.area < 3 AND u1 <> u2\nWITH u1, u2, u2.size AS size\nORDER BY size DESC\nLIMIT 3\nRETURN sum(size)"
        ]
    },
    {
        "question": "Who are the characters with the lowest book45PageRank?",
        "schema": "Node properties:\n- **Character**\n  - `centrality`: FLOAT Min: 0.0, Max: 1.0\n  - `book45PageRank`: FLOAT Min: 0.15000000000000002, Max: 11.409916274911177\n  - `fastrf_embedding`: LIST Min Size: 10, Max Size: 10\n  - `book1BetweennessCentrality`: FLOAT Min: 0.0, Max: 4638.53495125504\n  - `book1PageRank`: FLOAT Min: 0.15000000000000002, Max: 8.164174336296284\n  - `louvain`: INTEGER Min: 0, Max: 10\n  - `community`: INTEGER Min: 504, Max: 795\n  - `degree`: FLOAT Min: 0.0, Max: 300.0\n  - `name`: STRING Example: \"Addam-Marbrand\"\n  - `pagerank`: FLOAT Min: 0.15000000000000002, Max: 9.473142454730429\nRelationship properties:\n- **INTERACTS**\n  - `weight: INTEGER` Min: 3, Max:  334\n- **INTERACTS1**\n  - `weight: INTEGER` Min: 3, Max:  291\n  - `book: INTEGER` Min: 1, Max:  1\n- **INTERACTS2**\n  - `weight: INTEGER` Min: 3, Max:  92\n  - `book: INTEGER` Min: 2, Max:  2\n- **INTERACTS3**\n  - `weight: INTEGER` Min: 3, Max:  95\n  - `book: INTEGER` Min: 3, Max:  3\n- **INTERACTS45**\n  - `weight: INTEGER` Min: 3, Max:  96\n  - `book: INTEGER` Min: 45, Max:  45\nThe relationships:\n(:Character)-[:INTERACTS45]->(:Character)\n(:Character)-[:INTERACTS]->(:Character)\n(:Character)-[:INTERACTS1]->(:Character)\n(:Character)-[:INTERACTS3]->(:Character)\n(:Character)-[:INTERACTS2]->(:Character)",
        "gold_cypher": "MATCH (c:Character) WHERE c.book45PageRank IS NOT NULL RETURN c.name, c.book45PageRank ORDER BY c.book45PageRank ASC LIMIT 1",
        "database": "gameofthrones",
        "full_responses": [
            "MATCH (c:Character)\nRETURN c.name, c.book45PageRank\nORDER BY c.book45PageRank ASC\nLIMIT 1",
            "MATCH (c:Character)\nRETURN c.name, c.book45PageRank ORDER BY c.book45PageRank ASC LIMIT 1",
            "```\nMATCH (c:Character)\nRETURN c.name ORDER BY c.book45PageRank ASC LIMIT 1\n```",
            "MATCH (c:Character)\nRETURN c.name AS CharacterName, c.book45PageRank AS PageRank\nORDER BY c.book45PageRank ASC\nLIMIT 1",
            "MATCH (c:Character)\nRETURN c.name, c.book45PageRank\nORDER BY c.book45PageRank ASC\nLIMIT 1"
        ],
        "generated_cyphers": [
            "MATCH (c:Character)\nRETURN c.name, c.book45PageRank\nORDER BY c.book45PageRank ASC\nLIMIT 1",
            "MATCH (c:Character)\nRETURN c.name, c.book45PageRank ORDER BY c.book45PageRank ASC LIMIT 1",
            "```\nMATCH (c:Character)\nRETURN c.name ORDER BY c.book45PageRank ASC LIMIT 1\n```",
            "MATCH (c:Character)\nRETURN c.name AS CharacterName, c.book45PageRank AS PageRank\nORDER BY c.book45PageRank ASC\nLIMIT 1",
            "MATCH (c:Character)\nRETURN c.name, c.book45PageRank\nORDER BY c.book45PageRank ASC\nLIMIT 1"
        ]
    },
    {
        "question": "List the first 3 filings that originated from an entity in China.",
        "schema": "Node properties:\n- **Country**\n  - `location`: POINT \n  - `code`: STRING Example: \"AFG\"\n  - `name`: STRING Example: \"Afghanistan\"\n  - `tld`: STRING Example: \"AF\"\n- **Filing**\n  - `begin`: DATE_TIME Min: 2000-02-08T00:00:00Z, Max: 2017-09-05T00:00:00Z\n  - `end`: DATE_TIME Min: 2000-02-08T00:00:00Z, Max: 2017-11-03T00:00:00Z\n  - `originator_bank_id`: STRING Example: \"cimb-bank-berhad\"\n  - `sar_id`: STRING Example: \"3297\"\n  - `beneficiary_bank`: STRING Example: \"Barclays Bank Plc\"\n  - `filer_org_name_id`: STRING Example: \"the-bank-of-new-york-mellon-corp\"\n  - `originator_bank_country`: STRING Example: \"Singapore\"\n  - `beneficiary_bank_country`: STRING Example: \"United Kingdom\"\n  - `filer_org_name`: STRING Example: \"The Bank of New York Mellon Corp.\"\n  - `originator_iso`: STRING Example: \"SGP\"\n  - `beneficiary_bank_id`: STRING Example: \"barclays-bank-plc-london-england-gbr\"\n  - `origin_lat`: STRING Example: \"1.3667\"\n  - `origin_lng`: STRING Example: \"103.8\"\n  - `end_date_format`: STRING Example: \"2015-09-25T00:00:00Z\"\n  - `begin_date_format`: STRING Example: \"2015-03-25T00:00:00Z\"\n  - `originator_bank`: STRING Example: \"CIMB Bank Berhad\"\n  - `beneficiary_lat`: STRING Example: \"54\"\n  - `beneficiary_iso`: STRING Example: \"GBR\"\n  - `beneficiary_lng`: STRING Example: \"-2\"\n  - `begin_date`: STRING Example: \"Mar 25, 2015\"\n  - `id`: STRING Example: \"223254\"\n  - `end_date`: STRING Example: \"Sep 25, 2015\"\n  - `amount`: INTEGER Min: 1.18, Max: 2721000000\n  - `number`: INTEGER Min: 1, Max: 174\n- **Entity**\n  - `id`: STRING Example: \"the-bank-of-new-york-mellon-corp\"\n  - `location`: POINT \n  - `name`: STRING Example: \"The Bank of New York Mellon Corp.\"\n  - `country`: STRING Example: \"CHN\"\nRelationship properties:\n\nThe relationships:\n(:Filing)-[:BENEFITS]->(:Entity)\n(:Filing)-[:CONCERNS]->(:Entity)\n(:Filing)-[:ORIGINATOR]->(:Entity)\n(:Entity)-[:FILED]->(:Filing)\n(:Entity)-[:COUNTRY]->(:Country)",
        "gold_cypher": "MATCH (e:Entity)-[:COUNTRY]->(c:Country {code: \"CHN\"}) MATCH (f:Filing)-[:ORIGINATOR]->(e) RETURN f ORDER BY f.begin LIMIT 3",
        "database": "fincen",
        "full_responses": [
            "MATCH (c:Country {name: 'China'})<-[:COUNTRY]-(e:Entity)-[r:FILING]->(f:Country)\nWHERE f.name = 'China'\nRETURN r, e, f\nORDER BY r.begin ASC\nLIMIT 3",
            "MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country {code: \"CHN\"})\nRETURN f LIMIT 3",
            "MATCH (e:Entity)-[r:ORIGINATOR]->(f:Filing)\nWHERE e.country = 'CHN'\nRETURN f ORDER BY f.begin LIMIT 3",
            "```\nMATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country {code: \"CHN\"})\nRETURN f AS filing\nLIMIT 3\n```",
            "MATCH (e:Entity)-[:COUNTRY]->(c:Country {code: \"CHN\"})-[:FILED]->(f:Filing)\nRETURN f LIMIT 3"
        ],
        "generated_cyphers": [
            "MATCH (c:Country {name: 'China'})<-[:COUNTRY]-(e:Entity)-[r:FILING]->(f:Country)\nWHERE f.name = 'China'\nRETURN r, e, f\nORDER BY r.begin ASC\nLIMIT 3",
            "MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country {code: \"CHN\"})\nRETURN f LIMIT 3",
            "MATCH (e:Entity)-[r:ORIGINATOR]->(f:Filing)\nWHERE e.country = 'CHN'\nRETURN f ORDER BY f.begin LIMIT 3",
            "```\nMATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country {code: \"CHN\"})\nRETURN f AS filing\nLIMIT 3\n```",
            "MATCH (e:Entity)-[:COUNTRY]->(c:Country {code: \"CHN\"})-[:FILED]->(f:Filing)\nRETURN f LIMIT 3"
        ]
    },
    {
        "question": "What are the top 3 questions with the highest scores of comments?",
        "schema": "Node properties:\n- **Question**\n  - `link`: STRING Example: \"https://stackoverflow.com/q/65697972\"\n  - `accepted_answer_id`: INTEGER Min: 61447621, Max: 69272967\n  - `creation_date`: INTEGER Min: 1587746198, Max: 1632249176\n  - `view_count`: INTEGER Min: 4, Max: 1851\n  - `answer_count`: INTEGER Min: 0, Max: 4\n  - `body_markdown`: STRING Example: \"I want to create a graph from my recursive JSON fi\"\n  - `uuid`: INTEGER Min: 61413144, Max: 69273945\n  - `title`: STRING Example: \"Create graph from recursive JSON data using apoc.l\"\n- **User**\n  - `uuid`: INTEGER Min: deleted, Max: 16922964\n  - `display_name`: STRING Example: \"schernichkin\"\n- **Tag**\n  - `name`: STRING Example: \"neo4j\"\n  - `link`: STRING Example: \"https://stackoverflow.com/questions/tagged/neo4j\"\n- **Answer**\n  - `link`: STRING Example: \"https://stackoverflow.com/a/69272967\"\n  - `title`: STRING Example: \"Return &#39;biggest fan of a tag&#39; neo4j\"\n  - `is_accepted`: BOOLEAN \n  - `body_markdown`: STRING Example: \"The error is here:    ```  WHERE COUNT(posted) &lt\"\n  - `score`: INTEGER Min: -2, Max: 6\n  - `uuid`: INTEGER Min: 61445468, Max: 69273049\n- **Comment**\n  - `score`: INTEGER Min: 0, Max: 3\n  - `uuid`: INTEGER Min: 108645245, Max: 122427099\n  - `link`: STRING Example: \"https://stackoverflow.com/questions/69208813/confi\"\nRelationship properties:\n\nThe relationships:\n(:Question)-[:TAGGED]->(:Tag)\n(:User)-[:ASKED]->(:Question)\n(:User)-[:COMMENTED]->(:Comment)\n(:User)-[:PROVIDED]->(:Answer)\n(:Answer)-[:ANSWERED]->(:Question)\n(:Comment)-[:COMMENTED_ON]->(:Question)",
        "gold_cypher": "MATCH (q:Question)<-[:COMMENTED_ON]-(c:Comment) WITH q, sum(c.score) AS totalScore ORDER BY totalScore DESC LIMIT 3 RETURN q",
        "database": "stackoverflow2",
        "full_responses": [
            "MATCH (q:Question)-[r:COMMENTED]->(c:Comment)\nRETURN q.title AS questionTitle, count(*) AS commentCount\nORDER BY commentCount DESC\nLIMIT 3",
            "```cypher\nMATCH (q:Question)-[:COMMENTED_ON]->(c:Comment)\nWITH q, c.score AS comment_score\nORDER BY comment_score DESC\nLIMIT 3\nRETURN q.title AS QuestionTitle, comment_score AS CommentScore\n```",
            "MATCH (q:Question)-[c:COMMENTED]->(comm:Comment)\nRETURN q.title AS Question, avg(c.score) AS AvgCommentScore\nORDER BY AvgCommentScore DESC\nLIMIT 3",
            "```cypher\nMATCH (q:Question)-[c:COMMENTED]->(co:Comment)\nRETURN q.title AS questionTitle, q.view_count AS viewCount, c.score AS commentScore\nORDER BY c.score DESC\nLIMIT 3\n```",
            "MATCH (q:Question)-[c:COMMENTED]->(cm:Comment)\nRETURN q, cm.score\nORDER BY cm.score DESC\nLIMIT 3"
        ],
        "generated_cyphers": [
            "MATCH (q:Question)-[r:COMMENTED]->(c:Comment)\nRETURN q.title AS questionTitle, count(*) AS commentCount\nORDER BY commentCount DESC\nLIMIT 3",
            "```cypher\nMATCH (q:Question)-[:COMMENTED_ON]->(c:Comment)\nWITH q, c.score AS comment_score\nORDER BY comment_score DESC\nLIMIT 3\nRETURN q.title AS QuestionTitle, comment_score AS CommentScore\n```",
            "MATCH (q:Question)-[c:COMMENTED]->(comm:Comment)\nRETURN q.title AS Question, avg(c.score) AS AvgCommentScore\nORDER BY AvgCommentScore DESC\nLIMIT 3",
            "```cypher\nMATCH (q:Question)-[c:COMMENTED]->(co:Comment)\nRETURN q.title AS questionTitle, q.view_count AS viewCount, c.score AS commentScore\nORDER BY c.score DESC\nLIMIT 3\n```",
            "MATCH (q:Question)-[c:COMMENTED]->(cm:Comment)\nRETURN q, cm.score\nORDER BY cm.score DESC\nLIMIT 3"
        ]
    },
    {
        "question": "Retrieve the first 3 filings where the beneficiary bank country is 'United Kingdom' and the amount is above 100000.",
        "schema": "Node properties:\n- **Country**\n  - `location`: POINT \n  - `code`: STRING Example: \"AFG\"\n  - `name`: STRING Example: \"Afghanistan\"\n  - `tld`: STRING Example: \"AF\"\n- **Filing**\n  - `begin`: DATE_TIME Min: 2000-02-08T00:00:00Z, Max: 2017-09-05T00:00:00Z\n  - `end`: DATE_TIME Min: 2000-02-08T00:00:00Z, Max: 2017-11-03T00:00:00Z\n  - `originator_bank_id`: STRING Example: \"cimb-bank-berhad\"\n  - `sar_id`: STRING Example: \"3297\"\n  - `beneficiary_bank`: STRING Example: \"Barclays Bank Plc\"\n  - `filer_org_name_id`: STRING Example: \"the-bank-of-new-york-mellon-corp\"\n  - `originator_bank_country`: STRING Example: \"Singapore\"\n  - `beneficiary_bank_country`: STRING Example: \"United Kingdom\"\n  - `filer_org_name`: STRING Example: \"The Bank of New York Mellon Corp.\"\n  - `originator_iso`: STRING Example: \"SGP\"\n  - `beneficiary_bank_id`: STRING Example: \"barclays-bank-plc-london-england-gbr\"\n  - `origin_lat`: STRING Example: \"1.3667\"\n  - `origin_lng`: STRING Example: \"103.8\"\n  - `end_date_format`: STRING Example: \"2015-09-25T00:00:00Z\"\n  - `begin_date_format`: STRING Example: \"2015-03-25T00:00:00Z\"\n  - `originator_bank`: STRING Example: \"CIMB Bank Berhad\"\n  - `beneficiary_lat`: STRING Example: \"54\"\n  - `beneficiary_iso`: STRING Example: \"GBR\"\n  - `beneficiary_lng`: STRING Example: \"-2\"\n  - `begin_date`: STRING Example: \"Mar 25, 2015\"\n  - `id`: STRING Example: \"223254\"\n  - `end_date`: STRING Example: \"Sep 25, 2015\"\n  - `amount`: INTEGER Min: 1.18, Max: 2721000000\n  - `number`: INTEGER Min: 1, Max: 174\n- **Entity**\n  - `id`: STRING Example: \"the-bank-of-new-york-mellon-corp\"\n  - `location`: POINT \n  - `name`: STRING Example: \"The Bank of New York Mellon Corp.\"\n  - `country`: STRING Example: \"CHN\"\nRelationship properties:\n\nThe relationships:\n(:Filing)-[:BENEFITS]->(:Entity)\n(:Filing)-[:CONCERNS]->(:Entity)\n(:Filing)-[:ORIGINATOR]->(:Entity)\n(:Entity)-[:FILED]->(:Filing)\n(:Entity)-[:COUNTRY]->(:Country)",
        "gold_cypher": "MATCH (f:Filing) WHERE f.beneficiary_bank_country = 'United Kingdom' AND f.amount > 100000 RETURN f ORDER BY f.begin LIMIT 3",
        "database": "fincen",
        "full_responses": [
            "MATCH (f: Filing)-[r: BENEFITS]->(e: Entity)\nWHERE e.country = 'United Kingdom' AND r.amount > 100000\nRETURN f LIMIT 3",
            "```\nMATCH (f:Filing)-[b:benefits]->(e:Entity)\nWHERE e.country = 'United Kingdom' AND f.amount > 100000\nRETURN f LIMIT 3\n```",
            "MATCH (f:Filing)-[r:BENEFITS]->(e:Entity)-[c:COUNTRY]->(c2:Country {name: 'United Kingdom'})\nWHERE f.amount > 100000 AND c2.location IS NOT NULL\nRETURN f, e LIMIT 3",
            "```\nMATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country)\nWHERE c.name = 'United Kingdom' AND f.amount > 100000\nRETURN f LIMIT 3\n```",
            "MATCH (f:Filing)-[:BENEFITS]->(b:Entity)-[:COUNTRY]->(c:Country {code: 'GBR'})\nWHERE f.amount > 100000\nRETURN f ORDER BY f.begin LIMIT 3"
        ],
        "generated_cyphers": [
            "MATCH (f: Filing)-[r: BENEFITS]->(e: Entity)\nWHERE e.country = 'United Kingdom' AND r.amount > 100000\nRETURN f LIMIT 3",
            "```\nMATCH (f:Filing)-[b:benefits]->(e:Entity)\nWHERE e.country = 'United Kingdom' AND f.amount > 100000\nRETURN f LIMIT 3\n```",
            "MATCH (f:Filing)-[r:BENEFITS]->(e:Entity)-[c:COUNTRY]->(c2:Country {name: 'United Kingdom'})\nWHERE f.amount > 100000 AND c2.location IS NOT NULL\nRETURN f, e LIMIT 3",
            "```\nMATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country)\nWHERE c.name = 'United Kingdom' AND f.amount > 100000\nRETURN f LIMIT 3\n```",
            "MATCH (f:Filing)-[:BENEFITS]->(b:Entity)-[:COUNTRY]->(c:Country {code: 'GBR'})\nWHERE f.amount > 100000\nRETURN f ORDER BY f.begin LIMIT 3"
        ]
    },
    {
        "question": "Show the 3 streams with the most users as chatters.",
        "schema": "Node properties:\n- **Stream**\n  - `createdAt`: DATE_TIME Min: 2007-05-22T10:39:53.259969Z, Max: 2021-05-09T14:16:40.370294Z\n  - `id`: STRING Example: \"129004176\"\n  - `description`: STRING Example: \"Welcome to my Channel, I'm Big Chase, 31 living in\"\n  - `url`: STRING Example: \"https://www.twitch.tv/itsbigchase\"\n  - `name`: STRING Example: \"itsbigchase\"\n  - `followers`: INTEGER Min: 0, Max: 10243195\n  - `total_view_count`: INTEGER Min: 21, Max: 1451487256\n- **Game**\n  - `name`: STRING Example: \"Rust\"\n- **Language**\n  - `name`: STRING Example: \"en\"\n- **User**\n  - `name`: STRING Example: \"itsbigchase\"\n- **Team**\n  - `createdAt`: DATE_TIME Min: 2011-10-11T23:59:43.548701Z, Max: 2021-05-07T17:19:09.946382Z\n  - `name`: STRING Example: \"ESO Stream Team\"\n  - `id`: STRING Example: \"5893\"\nRelationship properties:\n\nThe relationships:\n(:Stream)-[:PLAYS]->(:Game)\n(:Stream)-[:HAS_LANGUAGE]->(:Language)\n(:Stream)-[:MODERATOR]->(:Stream)\n(:Stream)-[:MODERATOR]->(:User)\n(:Stream)-[:CHATTER]->(:Stream)\n(:Stream)-[:CHATTER]->(:User)\n(:Stream)-[:HAS_TEAM]->(:Team)\n(:Stream)-[:VIP]->(:Stream)\n(:Stream)-[:VIP]->(:User)\n(:User)-[:CHATTER]->(:Stream)\n(:User)-[:CHATTER]->(:User)\n(:User)-[:MODERATOR]->(:Stream)\n(:User)-[:MODERATOR]->(:User)",
        "gold_cypher": "MATCH (s:Stream)<-[:CHATTER]-(u:User) RETURN s.name AS stream, count(u) AS chatter_count ORDER BY chatter_count DESC LIMIT 3",
        "database": "twitch",
        "full_responses": [
            "```cypher\nMATCH (stream)-[:CHATTER]->(user)\nWITH stream, COUNT(DISTINCT user) AS chatter_count\nORDER BY chatter_count DESC\nLIMIT 3\nRETURN stream.name, chatter_count\n```",
            "MATCH (s:Stream)-[:CHATTER]->(u:User) WITH s, COUNT(u) AS chatterCount ORDER BY chatterCount DESC LIMIT 3",
            "MATCH (s:Stream)-[:CHATTER]->(u:User)\nGROUP BY s\nORDER BY COUNT(u) DESC\nLIMIT 3",
            "MATCH (s:Stream)-[r:CHATTER]->(u:User)\nWITH s, count(u) AS chatterCount\nORDER BY chatterCount DESC\nLIMIT 3\nRETURN s.name, s.total_view_count, s.followers, chatterCount",
            "```cypher\nMATCH (s:Stream)-[r:CHATTER]-(u:User)\nRETURN s.name, COUNT(DISTINCT u) AS chatter_count\nORDER BY chatter_count DESC\nLIMIT 3;\n```"
        ],
        "generated_cyphers": [
            "```cypher\nMATCH (stream)-[:CHATTER]->(user)\nWITH stream, COUNT(DISTINCT user) AS chatter_count\nORDER BY chatter_count DESC\nLIMIT 3\nRETURN stream.name, chatter_count\n```",
            "MATCH (s:Stream)-[:CHATTER]->(u:User) WITH s, COUNT(u) AS chatterCount ORDER BY chatterCount DESC LIMIT 3",
            "MATCH (s:Stream)-[:CHATTER]->(u:User)\nGROUP BY s\nORDER BY COUNT(u) DESC\nLIMIT 3",
            "MATCH (s:Stream)-[r:CHATTER]->(u:User)\nWITH s, count(u) AS chatterCount\nORDER BY chatterCount DESC\nLIMIT 3\nRETURN s.name, s.total_view_count, s.followers, chatterCount",
            "```cypher\nMATCH (s:Stream)-[r:CHATTER]-(u:User)\nRETURN s.name, COUNT(DISTINCT u) AS chatter_count\nORDER BY chatter_count DESC\nLIMIT 3;\n```"
        ]
    },
    {
        "question": "Which entities have a note stating 'Closed date stands for Cancelled date.'?",
        "schema": "Node properties:\n- **Entity**\n  - `countries`: STRING Example: \"Hong Kong\"\n  - `ibcRUC`: STRING Example: \"25221\"\n  - `valid_until`: STRING Example: \"The Panama Papers data is current through 2015\"\n  - `country_codes`: STRING Example: \"HKG\"\n  - `service_provider`: STRING Available options: ['Appleby', 'Portcullis Trustnet', 'Mossack Fonseca', 'Commonwealth Trust Limited']\n  - `address`: STRING Example: \"ORION HOUSE SERVICES (HK) LIMITED ROOM 1401; 14/F.\"\n  - `inactivation_date`: STRING Example: \"18-FEB-2013\"\n  - `struck_off_date`: STRING Example: \"15-FEB-2013\"\n  - `status`: STRING Example: \"Defaulted\"\n  - `jurisdiction_description`: STRING Example: \"Samoa\"\n  - `incorporation_date`: STRING Example: \"23-MAR-2006\"\n  - `original_name`: STRING Example: \"TIANSHENG INDUSTRY AND TRADING CO., LTD.\"\n  - `jurisdiction`: STRING Example: \"SAM\"\n  - `name`: STRING Example: \"TIANSHENG INDUSTRY AND TRADING CO., LTD.\"\n  - `internal_id`: STRING Example: \"1001256\"\n  - `lastEditTimestamp`: STRING Example: \"1638311020926\"\n  - `node_id`: INTEGER Min: 10000001, Max: 10000005\n  - `sourceID`: STRING Example: \"Panama Papers\"\n  - `former_name`: STRING \n  - `company_type`: STRING \n  - `tax_stat_description`: STRING \n  - `note`: STRING \n  - `dorm_date`: STRING \n  - `type`: STRING \n  - `closed_date`: STRING \n  - `company_number`: STRING \n  - `comments`: STRING \n  - `entity_number`: STRING \n- **Intermediary**\n  - `countries`: STRING Example: \"South Africa\"\n  - `lastEditTimestamp`: STRING Example: \"1638311034131\"\n  - `address`: STRING Example: \"MICHAEL PAPAGEORGE; MR. 106 NICHOLSON STREET BROOK\"\n  - `valid_until`: STRING Example: \"The Panama Papers  data is current through 2015\"\n  - `country_codes`: STRING Example: \"ZAF\"\n  - `name`: STRING Example: \"MICHAEL PAPAGEORGE, MR.\"\n  - `status`: STRING Available options: ['UNRECOVERABLE ACCOUNTS', 'CLIENT IN REPRESENTATIVE TERRITORY', 'ACTIVE', 'INACTIVE', 'SUSPENDED', 'DELINQUENT', 'PROSPECT', 'SUSPENDED LEGAL', 'ACTIVE LEGAL']\n  - `node_id`: INTEGER Min: 11000001, Max: 11000005\n  - `sourceID`: STRING Available options: ['Pandora Papers - Alem\u00e1n, Cordero, Galindo & Lee (Alcogal)', 'Paradise Papers - Appleby', 'Paradise Papers - Barbados corporate registry', 'Bahamas Leaks', 'Panama Papers', 'Paradise Papers - Nevis corporate registry', 'Paradise Papers - Bahamas corporate registry', 'Offshore Leaks', 'Paradise Papers - Aruba corporate registry']\n  - `internal_id`: STRING Example: \"10001\"\n  - `registered_office`: STRING \n- **Officer**\n  - `valid_until`: STRING Example: \"The Panama Papers data is current through 2015\"\n  - `name`: STRING Example: \"KIM SOO IN\"\n  - `sourceID`: STRING Example: \"Panama Papers\"\n  - `icij_id`: STRING Example: \"E72326DEA50F1A9C2876E112AAEB42BC\"\n  - `node_id`: INTEGER Min: 12000001, Max: 12000005\n  - `lastEditTimestamp`: STRING Example: \"1638311034062\"\n  - `country_codes`: STRING Example: \"KOR\"\n  - `countries`: STRING Example: \"South Korea\"\n  - `note`: STRING \n- **Address**\n  - `original_address`: STRING Example: \"ANNEX FREDERICK & SHIRLEY STS, P. O. BOX N-4805 NA\"\n  - `lastEditTimestamp`: STRING Example: \"1638311020926\"\n  - `countries`: STRING Example: \"Bahamas\"\n  - `address`: STRING Example: \"ANNEX FREDERICK & SHIRLEY STS, P.O. BOX N-4805, NA\"\n  - `valid_until`: STRING Example: \"The Bahamas Leaks data is current through early 20\"\n  - `icij_id`: STRING Example: \"7C1AAD6896EFDED57D680B82E7ADF7AB\"\n  - `node_id`: INTEGER Min: 24000001, Max: 24000005\n  - `sourceID`: STRING Example: \"Bahamas Leaks\"\n  - `country_codes`: STRING Example: \"BHS\"\n  - `name`: STRING \n  - `addressID`: STRING \n  - `country_code`: STRING \n  - `country`: STRING \n- **Other**\n  - `lastEditTimestamp`: STRING Available options: ['1638311068329', '1638311074502', '1638311074946', '1638311075268', '1638311075503']\n  - `incorporation_date`: STRING Example: \"18-MAY-1983\"\n  - `struck_off_date`: STRING Example: \"31-DEC-2002\"\n  - `jurisdiction`: STRING Available options: ['AW']\n  - `jurisdiction_description`: STRING Available options: ['Aruba']\n  - `valid_until`: STRING Available options: ['Aruba corporate registry data is current through 2', 'Appleby data is current through 2014']\n  - `sourceID`: STRING Available options: ['Paradise Papers - Aruba corporate registry', 'Paradise Papers - Appleby']\n  - `name`: STRING Example: \"ANTAM ENTERPRISES N.V.\"\n  - `type`: STRING Available options: ['LIMITED LIABILITY COMPANY', 'SOLE OWNERSHIP', 'FOREIGN FORMED CORPORATION']\n  - `node_id`: INTEGER Min: 80000012, Max: 85050056\n  - `closed_date`: STRING Example: \"28-NOV-2012\"\n  - `note`: STRING Available options: ['Closed date stands for Cancelled date.', 'Closed date stands for Liquidation date.']\n  - `countries`: STRING Example: \"Bermuda;Isle of Man\"\n  - `country_codes`: STRING Example: \"BMU;IMN\"\nRelationship properties:\n- **registered_address**\n  - `link: STRING` Example: \"registered address\"\n  - `sourceID: STRING` Example: \"Panama Papers\"\n  - `valid_until: STRING` \n- **intermediary_of**\n  - `valid_until: STRING` Example: \"The Panama Papers data is current through 2015\"\n  - `sourceID: STRING` Example: \"Panama Papers\"\n  - `link: STRING` Example: \"intermediary of\"\n  - `end_date: STRING` \n  - `start_date: STRING` \n- **officer_of**\n  - `link: STRING` Example: \"shareholder of\"\n  - `valid_until: STRING` Example: \"The Panama Papers data is current through 2015\"\n  - `sourceID: STRING` Example: \"Panama Papers\"\n  - `start_date: STRING` Example: \"19-NOV-1999\"\n  - `end_date: STRING` Example: \"04-JUL-2000\"\n  - `status: STRING` \n- **similar**\n  - `link: STRING` Example: \"similar name and address as\"\n- **same_as**\n  - `link: STRING` Available options: ['same name and registration date as', 'same address as', 'same as']\n- **same_name_as**\n  - `sourceID: STRING` Example: \"Bahamas Leaks\"\n  - `link: STRING` Example: \"same name as\"\n  - `valid_until: STRING` Example: \"The Bahamas Leaks data is current through early 20\"\n- **same_company_as**\n  - `valid_until: STRING` Example: \"The Bahamas Leaks data is current through early 20\"\n  - `sourceID: STRING` Example: \"Bahamas Leaks\"\n  - `link: STRING` Example: \"same company as\"\n- **same_id_as**\n  - `sourceID: STRING` Available options: ['Paradise Papers - Malta corporate registry']\n  - `link: STRING` Available options: ['same id as']\n  - `valid_until: STRING` Available options: ['Malta corporate registry data is current through 2']\n- **connected_to**\n  - `valid_until: STRING` Example: \"Aruba corporate registry data is current through 2\"\n  - `link: STRING` Example: \"connected to\"\n  - `sourceID: STRING` Example: \"Paradise Papers - Aruba corporate registry\"\nThe relationships:\n(:Entity)-[:same_as]->(:Entity)\n(:Entity)-[:registered_address]->(:Address)\n(:Entity)-[:same_company_as]->(:Entity)\n(:Entity)-[:same_name_as]->(:Other)\n(:Entity)-[:same_name_as]->(:Entity)\n(:Intermediary)-[:intermediary_of]->(:Entity)\n(:Intermediary)-[:registered_address]->(:Address)\n(:Intermediary)-[:officer_of]->(:Entity)\n(:Intermediary)-[:similar]->(:Officer)\n(:Intermediary)-[:same_name_as]->(:Intermediary)\n(:Intermediary)-[:same_name_as]->(:Officer)\n(:Intermediary)-[:same_as]->(:Officer)\n(:Officer)-[:officer_of]->(:Entity)\n(:Officer)-[:officer_of]->(:Other)\n(:Officer)-[:registered_address]->(:Address)\n(:Officer)-[:similar]->(:Officer)\n(:Officer)-[:similar]->(:Intermediary)\n(:Officer)-[:same_name_as]->(:Officer)\n(:Officer)-[:connected_to]->(:Entity)\n(:Officer)-[:same_id_as]->(:Officer)\n(:Address)-[:same_as]->(:Address)\n(:Other)-[:registered_address]->(:Address)\n(:Other)-[:connected_to]->(:Entity)\n(:Other)-[:same_name_as]->(:Entity)\n(:Other)-[:same_name_as]->(:Officer)\n(:Other)-[:same_name_as]->(:Other)",
        "gold_cypher": "MATCH (e:Other) WHERE e.note = 'Closed date stands for Cancelled date.' RETURN e.name AS entity_name, e.node_id AS entity_id",
        "database": "offshoreleaks",
        "full_responses": [
            "MATCH (e:Other {note: 'Closed date stands for Cancelled date.'})\nRETURN e",
            "```cypher\nMATCH (e:Entity {note: 'Closed date stands for Cancelled date.'})\nRETURN e.name, e.node_id\n```",
            "MATCH (e:Entity {note: 'Closed date stands for Cancelled date.'}) RETURN e",
            "MATCH (e:Entity)-[r:same_name_as]->(o:Other)\nWHERE o.note = 'Closed date stands for Cancelled date.'\nRETURN e",
            "MATCH (e:Entity {note: 'Closed date stands for Cancelled date.'}) RETURN e"
        ],
        "generated_cyphers": [
            "MATCH (e:Other {note: 'Closed date stands for Cancelled date.'})\nRETURN e",
            "```cypher\nMATCH (e:Entity {note: 'Closed date stands for Cancelled date.'})\nRETURN e.name, e.node_id\n```",
            "MATCH (e:Entity {note: 'Closed date stands for Cancelled date.'}) RETURN e",
            "MATCH (e:Entity)-[r:same_name_as]->(o:Other)\nWHERE o.note = 'Closed date stands for Cancelled date.'\nRETURN e",
            "MATCH (e:Entity {note: 'Closed date stands for Cancelled date.'}) RETURN e"
        ]
    },
    {
        "question": "Which sources are used in the top 5 most favorited tweets?",
        "schema": "Node properties:\n- **User**\n  - `betweenness`: FLOAT Example: \"3.49332601E8\"\n  - `location`: STRING Example: \"Graphs Are Everywhere\"\n  - `followers`: INTEGER Example: \"34507\"\n  - `following`: INTEGER Example: \"10124\"\n  - `profile_image_url`: STRING Example: \"http://pbs.twimg.com/profile_images/11837552737537\"\n  - `screen_name`: STRING Example: \"neo4j\"\n  - `name`: STRING Example: \"Neo4j\"\n  - `url`: STRING Example: \"https://t.co/JSIaZFJEaE\"\n  - `statuses`: INTEGER Example: \"512\"\n- **Me**\n  - `profile_image_url`: STRING Available options: ['http://pbs.twimg.com/profile_images/11837552737537']\n  - `betweenness`: FLOAT Min: 3.49332601E8, Max: 3.49332601E8\n  - `following`: INTEGER Min: 10124, Max: 10124\n  - `url`: STRING Available options: ['https://t.co/JSIaZFJEaE']\n  - `location`: STRING Available options: ['Graphs Are Everywhere']\n  - `followers`: INTEGER Min: 34507, Max: 34507\n  - `screen_name`: STRING Available options: ['neo4j']\n  - `name`: STRING Available options: ['Neo4j']\n- **Tweet**\n  - `created_at`: DATE_TIME Min: 2020-12-06T05:12:02Z, Max: 2021-03-16T15:30:07Z\n  - `id`: INTEGER Min: 690028662083612672, Max: 1371846247913512966\n  - `id_str`: STRING Example: \"1371815021265747970\"\n  - `text`: STRING Example: \"Proud to help @educationgovuk deliver critical ser\"\n  - `favorites`: INTEGER Min: 0, Max: 394\n  - `import_method`: STRING Available options: ['user']\n- **Hashtag**\n  - `name`: STRING Example: \"education\"\n- **Link**\n  - `url`: STRING Example: \"https://twitter.com/i/web/status/13718150212657479\"\n- **Source**\n  - `name`: STRING Example: \"Buffer\"\nRelationship properties:\n- **SIMILAR_TO**\n  - `score: FLOAT` Min: 0.0030581039755351682, Max:  1.0\nThe relationships:\n(:User)-[:FOLLOWS]->(:User)\n(:User)-[:FOLLOWS]->(:Me)\n(:User)-[:POSTS]->(:Tweet)\n(:User)-[:INTERACTS_WITH]->(:User)\n(:User)-[:SIMILAR_TO]->(:User)\n(:User)-[:SIMILAR_TO]->(:Me)\n(:Me)-[:FOLLOWS]->(:User)\n(:Me)-[:POSTS]->(:Tweet)\n(:Me)-[:INTERACTS_WITH]->(:User)\n(:Me)-[:RT_MENTIONS]->(:User)\n(:Me)-[:AMPLIFIES]->(:User)\n(:Tweet)-[:MENTIONS]->(:User)\n(:Tweet)-[:MENTIONS]->(:Me)\n(:Tweet)-[:USING]->(:Source)\n(:Tweet)-[:TAGS]->(:Hashtag)\n(:Tweet)-[:CONTAINS]->(:Link)\n(:Tweet)-[:RETWEETS]->(:Tweet)\n(:Tweet)-[:REPLY_TO]->(:Tweet)",
        "gold_cypher": "MATCH (t:Tweet)-[:USING]->(s:Source) RETURN s.name AS SourceName, t.favorites AS Favorites ORDER BY t.favorites DESC LIMIT 5",
        "database": "twitter",
        "full_responses": [
            "MATCH (t:Tweet)-[u:USING]->(s:Source)\nWHERE t.favorites > 0\nRETURN s.name\nORDER BY t.favorites DESC\nLIMIT 5",
            "MATCH (t:Tweet)<-[:RETWEETS|MENTIONS|RT_MENTIONS|USING]-(u:User)\nWITH t, u\nORDER BY t.favorites DESC\nLIMIT 5\nMATCH (t)-[:USING]->(s:Source)\nRETURN DISTINCT s.name",
            "MATCH (t:Tweet)-[r:USING]->(s:Source)\nWHERE t.favorites >= 5\nRETURN s.name ORDER BY t.favorites DESC LIMIT 5",
            "```\nMATCH (t:Tweet)-[u:USING]->(s:Source)\nWHERE t.favorites > 0\nRETURN s.name\nORDER BY t.favorites DESC\nLIMIT 5\n```",
            "MATCH (t:Tweet)-[rt:RETWEETS]->(r:Tweet)-[mentions:MENTIONS]->(u:User)\nWITH t, mentions, r\nORDER BY mentions.favorites DESC\nLIMIT 5\nRETURN mentions.source"
        ],
        "generated_cyphers": [
            "MATCH (t:Tweet)-[u:USING]->(s:Source)\nWHERE t.favorites > 0\nRETURN s.name\nORDER BY t.favorites DESC\nLIMIT 5",
            "MATCH (t:Tweet)<-[:RETWEETS|MENTIONS|RT_MENTIONS|USING]-(u:User)\nWITH t, u\nORDER BY t.favorites DESC\nLIMIT 5\nMATCH (t)-[:USING]->(s:Source)\nRETURN DISTINCT s.name",
            "MATCH (t:Tweet)-[r:USING]->(s:Source)\nWHERE t.favorites >= 5\nRETURN s.name ORDER BY t.favorites DESC LIMIT 5",
            "```\nMATCH (t:Tweet)-[u:USING]->(s:Source)\nWHERE t.favorites > 0\nRETURN s.name\nORDER BY t.favorites DESC\nLIMIT 5\n```",
            "MATCH (t:Tweet)-[rt:RETWEETS]->(r:Tweet)-[mentions:MENTIONS]->(u:User)\nWITH t, mentions, r\nORDER BY mentions.favorites DESC\nLIMIT 5\nRETURN mentions.source"
        ]
    },
    {
        "question": "Which 3 users have asked questions with the most tags?",
        "schema": "Node properties:\n- **Question**\n  - `favorites`: INTEGER Example: \"0\"\n  - `answered`: BOOLEAN \n  - `text`: STRING Example: \"### This is:  Bug    ### Specifications  OS: Win10\"\n  - `link`: STRING Example: \"https://stackoverflow.com/questions/62224586/playg\"\n  - `createdAt`: DATE_TIME Min: 2020-06-05T16:57:19Z, Max: 2020-06-05T21:49:16Z\n  - `title`: STRING Example: \"Playground is not loading with apollo-server-lambd\"\n  - `id`: INTEGER Min: 62220505, Max: 62224586\n  - `upVotes`: INTEGER Example: \"0\"\n  - `score`: INTEGER Example: \"-1\"\n  - `downVotes`: INTEGER Example: \"1\"\n- **Tag**\n  - `name`: STRING Example: \"aws-lambda\"\n- **User**\n  - `image`: STRING Example: \"https://lh3.googleusercontent.com/-NcFYSuXU0nk/AAA\"\n  - `link`: STRING Example: \"https://stackoverflow.com/users/10251021/alexandre\"\n  - `id`: INTEGER Min: 751, Max: 13681006\n  - `reputation`: INTEGER Min: 1, Max: 420137\n  - `display_name`: STRING Example: \"Alexandre Le\"\nRelationship properties:\n\nThe relationships:\n(:Question)-[:TAGGED]->(:Tag)\n(:User)-[:ASKED]->(:Question)",
        "gold_cypher": "MATCH (u:User)-[:ASKED]->(q:Question) WITH u, count{(q)-[:TAGGED]->(:Tag)} AS numTags ORDER BY numTags DESC LIMIT 3 RETURN u",
        "database": "buzzoverflow",
        "full_responses": [
            "MATCH (u:User)-[r:ASKED]->(q:Question)-[t:TAGGED]->(tag:Tag)\nWITH u, count(*) AS tag_count\nORDER BY tag_count DESC\nLIMIT 3",
            "MATCH (u:User)-[a:ASKED]->(q:Question)\nWITH q, collect(t.name) AS tags\nRETURN u, COUNT(DISTINCT tags) AS tag_count\nORDER BY tag_count DESC\nLIMIT 3",
            "MATCH (u:User)-[a:ASKED]->(q:Question)<-[t:TAGGED]-(t2:Tag) \nRETURN u, COUNT(DISTINCT t2.name) AS tagCount \nORDER BY tagCount DESC \nLIMIT 3",
            "MATCH (u:User)-[a:ASKED]->(q:Question)\nWITH q, COUNT(DISTINCT t) AS tag_count\nORDER BY tag_count DESC\nLIMIT 3",
            "MATCH (q:Question)-[rt:TAGGED]->(t:Tag)\nWITH q, count(rt) AS tagCount\nORDER BY tagCount DESC\nLIMIT 3\nRETURN q.id, q.display_name"
        ],
        "generated_cyphers": [
            "MATCH (u:User)-[r:ASKED]->(q:Question)-[t:TAGGED]->(tag:Tag)\nWITH u, count(*) AS tag_count\nORDER BY tag_count DESC\nLIMIT 3",
            "MATCH (u:User)-[a:ASKED]->(q:Question)\nWITH q, collect(t.name) AS tags\nRETURN u, COUNT(DISTINCT tags) AS tag_count\nORDER BY tag_count DESC\nLIMIT 3",
            "MATCH (u:User)-[a:ASKED]->(q:Question)<-[t:TAGGED]-(t2:Tag) \nRETURN u, COUNT(DISTINCT t2.name) AS tagCount \nORDER BY tagCount DESC \nLIMIT 3",
            "MATCH (u:User)-[a:ASKED]->(q:Question)\nWITH q, COUNT(DISTINCT t) AS tag_count\nORDER BY tag_count DESC\nLIMIT 3",
            "MATCH (q:Question)-[rt:TAGGED]->(t:Tag)\nWITH q, count(rt) AS tagCount\nORDER BY tagCount DESC\nLIMIT 3\nRETURN q.id, q.display_name"
        ]
    },
    {
        "question": "Which 3 movies have the longest runtime and were released before 2000?",
        "schema": "Node properties:\n- **Movie**\n  - `average_vote`: FLOAT Example: \"7.7\"\n  - `overview`: STRING Example: \"Led by Woody, Andy's toys live happily in his room\"\n  - `revenue`: FLOAT Example: \"3.73554033E8\"\n  - `vote_count`: INTEGER Example: \"5415\"\n  - `tagline`: STRING Example: \"Roll the dice and unleash the excitement!\"\n  - `budget`: INTEGER Example: \"30000000\"\n  - `title`: STRING Example: \"Toy Story\"\n  - `poster_path`: STRING Example: \"/rhIRbceoE9lR4veEXuwCC2wARtG.jpg\"\n  - `imdb_id`: STRING Example: \"tt0114709\"\n  - `status`: STRING Example: \"Released\"\n  - `runtime`: FLOAT Example: \"81.0\"\n  - `popularity`: FLOAT Example: \"21.946943\"\n  - `homepage`: STRING Example: \"http://toystory.disney.com/toy-story\"\n  - `release_date`: DATE Example: \"1995-10-30\"\n  - `id`: INTEGER Min: 862, Max: 31357\n  - `original_title`: STRING Example: \"Toy Story\"\n  - `original_language`: STRING Example: \"en\"\n- **Language**\n  - `id`: STRING Example: \"en\"\n  - `name`: STRING Available options: ['', 'Gaeilge', 'Kiswahili', 'Az\u0259rbaycan', 'Somali', '\u0431\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f \u043c\u043e\u0432\u0430', 'Fulfulde', 'Hausa']\n- **Country**\n  - `id`: STRING Example: \"US\"\n  - `name`: STRING Example: \"United States of America\"\n- **Genre**\n  - `id`: INTEGER Min: 12, Max: 10770\n  - `name`: STRING Example: \"Animation\"\n- **ProductionCompany**\n  - `id`: INTEGER Min: 3, Max: 10201\n  - `name`: STRING Example: \"Pixar Animation Studios\"\n- **Collection**\n  - `name`: STRING Example: \"Toy Story Collection\"\n  - `id`: INTEGER Min: 10, Max: 480160\n  - `backdrop_path`: STRING Example: \"/9FBwqcd9IRruEDUrTdcaafOMKUq.jpg\"\n  - `poster_path`: STRING Example: \"/7G9915LfUQ2lVfwMEEhDsn3kT4B.jpg\"\n- **Person**\n  - `gender`: INTEGER Example: \"2\"\n  - `profile_path`: STRING Example: \"/pQFoyx7rp09CJTAb932F2g8Nlho.jpg\"\n  - `id`: INTEGER Min: 31, Max: 12900\n  - `name`: STRING Example: \"Tom Hanks\"\n- **User**\n  - `id`: INTEGER Min: 27490cf6-22eb-495d-9dd6-902c0f89c627, Max: 4\n- **Keyword**\n  - `id`: INTEGER Min: 931, Max: 9713\n  - `name`: STRING Example: \"jealousy\"\n- **Video**\n  - `tagline`: STRING Example: \"Fresh Fish. Mixed Vegetables.\"\n  - `average_vote`: FLOAT Min: 0.0, Max: 10.0\n  - `overview`: STRING Example: \"Get ready as Bob the Tomato, Larry the Cucumber an\"\n  - `revenue`: FLOAT Min: 0.0, Max: 0.0\n  - `poster_path`: STRING Example: \"/iWahPsY3hsKOizZHgzQcAxv4O3B.jpg\"\n  - `vote_count`: INTEGER Min: 0, Max: 115\n  - `title`: STRING Example: \"Jonah: A VeggieTales Movie\"\n  - `release_date`: DATE Min: 1973-01-12, Max: 2017-03-17\n  - `status`: STRING Available options: ['Released']\n  - `budget`: INTEGER Min: 0, Max: 2219684\n  - `popularity`: FLOAT Min: 0.0, Max: 9.22546\n  - `imdb_id`: STRING Example: \"tt0298388\"\n  - `original_title`: STRING Example: \"Jonah: A VeggieTales Movie\"\n  - `id`: INTEGER Min: 13284, Max: 461088\n  - `runtime`: FLOAT Min: 0.0, Max: 583.0\n  - `original_language`: STRING Example: \"en\"\n  - `homepage`: STRING Example: \"http://www.loosechange911.com/\"\n- **Adult**\n  - `average_vote`: FLOAT Min: 0.0, Max: 6.3\n  - `overview`: STRING Available options: ['A sailor takes an American businessman and his gir', 'The FBI and Texas police make ready to storm the h', 'Electrical Girl centers around a horny young woman', '\u00c1gata suffers from a psychological disorder which ', \"Shane Ryan's sequel to the disturbing Amateur Porn\", 'Australian film about a fictional sub-par Australi', 'Olaf and his mother run a boarding house and a whi', 'A man who returns home to find his wife cheating o', 'An American scientific research facility opens a p']\n  - `revenue`: FLOAT Min: 0.0, Max: 0.0\n  - `poster_path`: STRING Available options: ['/tzVK7nTnzUiVeFSZhOAIHmrgXUS.jpg', '/1VzwIa8HTykNiCCW8PBaJnyTvO8.jpg', '/yTfqRQlJMTAuTNDG01XjNg5KPPg.jpg', '/oP2WvKIWxqSBVHjfYAizFHOqBLG.jpg', '/zpycBSiBFp5Uib6gWJpgEvfOgdn.jpg', '/e7CAc8OadcUoKNPIX86SEPSX7f.jpg', '/jjncR0vECvXVrBvr0A1vLghL4pN.jpg', '/pJLmZBruOmn2c9mYWe3h1xcXaA0.jpg', '/3uv9oaqOJkkdZiQp6r9lf24tkHW.jpg']\n  - `vote_count`: INTEGER Min: 0, Max: 16\n  - `title`: STRING Available options: ['Erotic Nights of the Living Dead', 'Standoff', 'Electrical Girl', 'Diet of Sex', 'Amateur Porn Star Killer 2', 'The Band', 'The Sinful Dwarf', 'Adulterers', 'Half -Life']\n  - `release_date`: DATE Min: 1973-12-20, Max: 2016-01-05\n  - `status`: STRING Available options: ['Released', 'In Production']\n  - `budget`: INTEGER Min: 0, Max: 750000\n  - `popularity`: FLOAT Min: 0.001803, Max: 6.889832\n  - `imdb_id`: STRING Available options: ['tt0079642', 'tt0119931', 'tt0322232', 'tt3094816', 'tt1161951', 'tt1153101', 'tt0070696', 'tt4044464', 'tt2697688']\n  - `original_title`: STRING Available options: ['Le notti erotiche dei morti viventi', 'Standoff', '\u767c\u96fb\u6084\u5b0c\u5a03', 'Diet of Sex', 'Amateur Porn Star Killer 2', 'The Band', 'Dv\u00e6rgen', 'Adulterers', 'Half -Life']\n  - `id`: INTEGER Min: 5422, Max: 448290\n  - `runtime`: FLOAT Min: 0.0, Max: 112.0\n  - `original_language`: STRING Available options: ['it', 'en', 'cn', 'es', 'da']\n  - `tagline`: STRING Available options: ['Trust Will Get You Killed', 'Comedy, food, drama and sex, a lot of sex', 'Humiliation. Rape. Murder. You know the drill.', \"Sex, drugs and Rock 'n Roll\", 'The Mother of all Dwarfsploitation films!', 'Love. Betrayal. Vengeance']\n  - `homepage`: STRING Available options: ['http://www.imdb.com/title/tt0119931/', 'http://www.dietofsex.com/']\n- **Package**\n  - `price`: FLOAT Min: 0.0, Max: 99.99\n  - `duration`: DURATION \n  - `id`: INTEGER Min: 0, Max: 6\n  - `name`: STRING Available options: ['Childrens', 'Bronze', 'Silver', 'Gold', 'Platinum', 'Ultimate', 'Free Trial']\n- **Subscription**\n  - `expiresAt`: DATE_TIME Min: 2020-08-23T16:20:52.383Z, Max: 2020-08-23T16:20:52.383Z\n  - `id`: STRING Available options: ['e74f7163-eace-4169-8043-41627f1fe236']\nRelationship properties:\n- **CAST_FOR**\n  - `credit_id: STRING` Example: \"52fe4459c3a36847f8090d7d\"\n  - `order: INTEGER` Example: \"0\"\n  - `character: STRING` Example: \"Charlie Wilson\"\n  - `cast_id: INTEGER` Example: \"12\"\n- **CREW_FOR**\n  - `credit_id: STRING` Example: \"55e4f0abc3a368140800047e\"\n  - `job: STRING` Example: \"Producer\"\n  - `department: STRING` Example: \"Production\"\n- **RATED**\n  - `timestamp: DATE_TIME` Example: \"2015-03-09T22:49:42Z\"\n  - `rating: FLOAT` Example: \"5.0\"\nThe relationships:\n(:Movie)-[:ORIGINAL_LANGUAGE]->(:Language)\n(:Movie)-[:SPOKEN_IN_LANGUAGE]->(:Language)\n(:Movie)-[:PRODUCED_IN_COUNTRY]->(:Country)\n(:Movie)-[:IN_GENRE]->(:Genre)\n(:Movie)-[:PRODUCED_BY]->(:ProductionCompany)\n(:Movie)-[:HAS_KEYWORD]->(:Keyword)\n(:Movie)-[:IN_COLLECTION]->(:Collection)\n(:Person)-[:CAST_FOR]->(:Movie)\n(:Person)-[:CREW_FOR]->(:Movie)\n(:Person)-[:CREW_FOR]->(:Video)\n(:User)-[:RATED]->(:Movie)\n(:User)-[:RATED]->(:Video)\n(:Video)-[:ORIGINAL_LANGUAGE]->(:Language)\n(:Video)-[:SPOKEN_IN_LANGUAGE]->(:Language)\n(:Video)-[:PRODUCED_IN_COUNTRY]->(:Country)\n(:Video)-[:IN_GENRE]->(:Genre)\n(:Video)-[:PRODUCED_BY]->(:ProductionCompany)\n(:Video)-[:HAS_KEYWORD]->(:Keyword)\n(:Video)-[:IN_COLLECTION]->(:Collection)\n(:Adult)-[:ORIGINAL_LANGUAGE]->(:Language)\n(:Adult)-[:SPOKEN_IN_LANGUAGE]->(:Language)\n(:Adult)-[:PRODUCED_IN_COUNTRY]->(:Country)\n(:Adult)-[:IN_GENRE]->(:Genre)\n(:Adult)-[:PRODUCED_BY]->(:ProductionCompany)\n(:Adult)-[:HAS_KEYWORD]->(:Keyword)\n(:Package)-[:PROVIDES_ACCESS_TO]->(:Genre)\n(:Subscription)-[:FOR_PACKAGE]->(:Package)",
        "gold_cypher": "MATCH (m:Movie) WHERE m.release_date < date('2000-01-01') AND m.runtime IS NOT NULL RETURN m ORDER BY m.runtime DESC LIMIT 3",
        "database": "eoflix",
        "full_responses": [
            "MATCH (m:Movie)-[r:RELEASED]->(date)\nWHERE date.year < 2000\nRETURN m.title, m.runtime\nORDER BY m.runtime DESC\nLIMIT 3",
            "MATCH (m:Movie) WHERE m.release_date < '2000' RETURN m.title, m.runtime ORDER BY m.runtime DESC LIMIT 3",
            "MATCH (m:Movie) WHERE m.release_date < '2000-01-01' RETURN m.title, m.runtime ORDER BY m.runtime DESC LIMIT 3",
            "MATCH (m:Movie)\nWHERE m.release_date < '2000-01-01' AND m.runtime > 300\nRETURN m.title, m.runtime ORDER BY m.runtime DESC LIMIT 3",
            "MATCH (m:Movie)-[:IN_COLLECTION]->(c:Collection)\nWHERE m.release_date < '2000-01-01'\nRETURN m.title AS Title, m.runtime AS Runtime\nORDER BY m.runtime DESC\nLIMIT 3"
        ],
        "generated_cyphers": [
            "MATCH (m:Movie)-[r:RELEASED]->(date)\nWHERE date.year < 2000\nRETURN m.title, m.runtime\nORDER BY m.runtime DESC\nLIMIT 3",
            "MATCH (m:Movie) WHERE m.release_date < '2000' RETURN m.title, m.runtime ORDER BY m.runtime DESC LIMIT 3",
            "MATCH (m:Movie) WHERE m.release_date < '2000-01-01' RETURN m.title, m.runtime ORDER BY m.runtime DESC LIMIT 3",
            "MATCH (m:Movie)\nWHERE m.release_date < '2000-01-01' AND m.runtime > 300\nRETURN m.title, m.runtime ORDER BY m.runtime DESC LIMIT 3",
            "MATCH (m:Movie)-[:IN_COLLECTION]->(c:Collection)\nWHERE m.release_date < '2000-01-01'\nRETURN m.title AS Title, m.runtime AS Runtime\nORDER BY m.runtime DESC\nLIMIT 3"
        ]
    },
    {
        "question": "Find the title of the question with the shortest body_markdown.",
        "schema": "Node properties:\n- **Question**\n  - `link`: STRING Example: \"https://stackoverflow.com/q/65697972\"\n  - `accepted_answer_id`: INTEGER Min: 61447621, Max: 69272967\n  - `creation_date`: INTEGER Min: 1587746198, Max: 1632249176\n  - `view_count`: INTEGER Min: 4, Max: 1851\n  - `answer_count`: INTEGER Min: 0, Max: 4\n  - `body_markdown`: STRING Example: \"I want to create a graph from my recursive JSON fi\"\n  - `uuid`: INTEGER Min: 61413144, Max: 69273945\n  - `title`: STRING Example: \"Create graph from recursive JSON data using apoc.l\"\n- **User**\n  - `uuid`: INTEGER Min: deleted, Max: 16922964\n  - `display_name`: STRING Example: \"schernichkin\"\n- **Tag**\n  - `name`: STRING Example: \"neo4j\"\n  - `link`: STRING Example: \"https://stackoverflow.com/questions/tagged/neo4j\"\n- **Answer**\n  - `link`: STRING Example: \"https://stackoverflow.com/a/69272967\"\n  - `title`: STRING Example: \"Return &#39;biggest fan of a tag&#39; neo4j\"\n  - `is_accepted`: BOOLEAN \n  - `body_markdown`: STRING Example: \"The error is here:    ```  WHERE COUNT(posted) &lt\"\n  - `score`: INTEGER Min: -2, Max: 6\n  - `uuid`: INTEGER Min: 61445468, Max: 69273049\n- **Comment**\n  - `score`: INTEGER Min: 0, Max: 3\n  - `uuid`: INTEGER Min: 108645245, Max: 122427099\n  - `link`: STRING Example: \"https://stackoverflow.com/questions/69208813/confi\"\nRelationship properties:\n\nThe relationships:\n(:Question)-[:TAGGED]->(:Tag)\n(:User)-[:ASKED]->(:Question)\n(:User)-[:COMMENTED]->(:Comment)\n(:User)-[:PROVIDED]->(:Answer)\n(:Answer)-[:ANSWERED]->(:Question)\n(:Comment)-[:COMMENTED_ON]->(:Question)",
        "gold_cypher": "MATCH (q:Question) WITH q.title AS title, size(q.body_markdown) AS body_length ORDER BY body_length ASC RETURN title LIMIT 1",
        "database": "stackoverflow2",
        "full_responses": [
            "MATCH (q:Question) RETURN q.title ORDER BY LENGTH(q.body_markdown) LIMIT 1",
            "MATCH (q:Question)\nRETURN q.title ORDER BY LENGTH(q.body_markdown) LIMIT 1",
            "```cypher\nMATCH (q:Question)\nRETURN q.title\nORDER BY LENGTH(q.body_markdown)\nLIMIT 1\n```",
            "```cypher\nMATCH (q:Question)\nRETURN q.title, q.body_markdown ORDER BY LENGTH(q.body_markdown) LIMIT 1\n```",
            "MATCH (q:Question)\nRETURN q.title ORDER BY LENGTH(q.body_markdown) LIMIT 1"
        ],
        "generated_cyphers": [
            "MATCH (q:Question) RETURN q.title ORDER BY LENGTH(q.body_markdown) LIMIT 1",
            "MATCH (q:Question)\nRETURN q.title ORDER BY LENGTH(q.body_markdown) LIMIT 1",
            "```cypher\nMATCH (q:Question)\nRETURN q.title\nORDER BY LENGTH(q.body_markdown)\nLIMIT 1\n```",
            "```cypher\nMATCH (q:Question)\nRETURN q.title, q.body_markdown ORDER BY LENGTH(q.body_markdown) LIMIT 1\n```",
            "MATCH (q:Question)\nRETURN q.title ORDER BY LENGTH(q.body_markdown) LIMIT 1"
        ]
    },
    {
        "question": "Which 3 directors have the longest filmography in the database?",
        "schema": "Node properties:\n- **Movie**\n  - `url`: STRING Example: \"https://themoviedb.org/movie/862\"\n  - `runtime`: INTEGER Min: 2, Max: 910\n  - `revenue`: INTEGER Min: 1, Max: 2787965087\n  - `imdbRating`: FLOAT Min: 1.6, Max: 9.6\n  - `released`: STRING Example: \"1995-11-22\"\n  - `countries`: LIST Min Size: 1, Max Size: 16\n  - `languages`: LIST Min Size: 1, Max Size: 19\n  - `plot`: STRING Example: \"A cowboy doll is profoundly threatened and jealous\"\n  - `imdbVotes`: INTEGER Min: 13, Max: 1626900\n  - `imdbId`: STRING Example: \"0114709\"\n  - `year`: INTEGER Min: 1902, Max: 2016\n  - `poster`: STRING Example: \"https://image.tmdb.org/t/p/w440_and_h660_face/uXDf\"\n  - `movieId`: STRING Example: \"1\"\n  - `tmdbId`: STRING Example: \"862\"\n  - `title`: STRING Example: \"Toy Story\"\n  - `budget`: INTEGER Min: 1, Max: 380000000\n- **Genre**\n  - `name`: STRING Example: \"Adventure\"\n- **User**\n  - `userId`: STRING Example: \"1\"\n  - `name`: STRING Example: \"Omar Huffman\"\n- **Actor**\n  - `url`: STRING Example: \"https://themoviedb.org/person/1271225\"\n  - `name`: STRING Example: \"Fran\u00e7ois Lallement\"\n  - `tmdbId`: STRING Example: \"1271225\"\n  - `bornIn`: STRING Example: \"France\"\n  - `bio`: STRING Example: \"\u200bFrom Wikipedia, the free encyclopedia  Lillian Di\"\n  - `died`: DATE Example: \"1954-01-01\"\n  - `born`: DATE Example: \"1877-02-04\"\n  - `imdbId`: STRING Example: \"2083046\"\n  - `poster`: STRING Example: \"https://image.tmdb.org/t/p/w440_and_h660_face/6DCW\"\n- **Director**\n  - `url`: STRING Example: \"https://themoviedb.org/person/88953\"\n  - `bornIn`: STRING Example: \"Burchard, Nebraska, USA\"\n  - `born`: DATE Min: 1861-12-08, Max: 2018-05-01\n  - `died`: DATE Min: 1930-08-26, Max: 2976-09-29\n  - `tmdbId`: STRING Example: \"88953\"\n  - `imdbId`: STRING Example: \"0516001\"\n  - `name`: STRING Example: \"Harold Lloyd\"\n  - `poster`: STRING Example: \"https://image.tmdb.org/t/p/w440_and_h660_face/er4Z\"\n  - `bio`: STRING Example: \"Harold Lloyd has been called the cinema\u2019s \u201cfirst m\"\n- **Person**\n  - `url`: STRING Example: \"https://themoviedb.org/person/1271225\"\n  - `died`: DATE Example: \"1954-01-01\"\n  - `bornIn`: STRING Example: \"France\"\n  - `born`: DATE Example: \"1877-02-04\"\n  - `imdbId`: STRING Example: \"2083046\"\n  - `name`: STRING Example: \"Fran\u00e7ois Lallement\"\n  - `poster`: STRING Example: \"https://image.tmdb.org/t/p/w440_and_h660_face/6DCW\"\n  - `tmdbId`: STRING Example: \"1271225\"\n  - `bio`: STRING Example: \"\u200bFrom Wikipedia, the free encyclopedia  Lillian Di\"\nRelationship properties:\n- **RATED**\n  - `rating: FLOAT` Example: \"2.0\"\n  - `timestamp: INTEGER` Example: \"1260759108\"\n- **ACTED_IN**\n  - `role: STRING` Example: \"Officer of the Marines (uncredited)\"\n- **DIRECTED**\n  - `role: STRING` \nThe relationships:\n(:Movie)-[:IN_GENRE]->(:Genre)\n(:User)-[:RATED]->(:Movie)\n(:Actor)-[:ACTED_IN]->(:Movie)\n(:Actor)-[:DIRECTED]->(:Movie)\n(:Director)-[:DIRECTED]->(:Movie)\n(:Director)-[:ACTED_IN]->(:Movie)\n(:Person)-[:ACTED_IN]->(:Movie)\n(:Person)-[:DIRECTED]->(:Movie)",
        "gold_cypher": "MATCH (d:Director)-[:DIRECTED]->(m:Movie) RETURN d.name AS director, count(m) AS num_movies ORDER BY num_movies DESC LIMIT 3",
        "database": "recommendations",
        "full_responses": [
            "MATCH (d:Director)-[r:DIRECTED]->(m:Movie)\nRETURN d.name AS director, COUNT(m) AS filmography_length\nORDER BY filmography_length DESC\nLIMIT 3",
            "MATCH (d:Director)-[r:DIRECTED]->(m:Movie)\nWITH d, count(m) AS filmography\nORDER BY filmography DESC\nLIMIT 3",
            "MATCH (d:Director)-[r:DIRECTED]->(m:Movie)\nRETURN d.name, COUNT(m) AS filmography_length\nORDER BY filmography_length DESC\nLIMIT 3",
            "MATCH (d:Director)-[:DIRECTED]->(m:Movie)\nRETURN d.name, COUNT(m) AS filmography_count\nORDER BY filmography_count DESC\nLIMIT 3",
            "MATCH (d:Director)-[r:DIRECTED]->(m:Movie)\nWITH d, count(m) AS filmographyCount\nORDER BY filmographyCount DESC\nLIMIT 3\nRETURN d.name, filmographyCount"
        ],
        "generated_cyphers": [
            "MATCH (d:Director)-[r:DIRECTED]->(m:Movie)\nRETURN d.name AS director, COUNT(m) AS filmography_length\nORDER BY filmography_length DESC\nLIMIT 3",
            "MATCH (d:Director)-[r:DIRECTED]->(m:Movie)\nWITH d, count(m) AS filmography\nORDER BY filmography DESC\nLIMIT 3",
            "MATCH (d:Director)-[r:DIRECTED]->(m:Movie)\nRETURN d.name, COUNT(m) AS filmography_length\nORDER BY filmography_length DESC\nLIMIT 3",
            "MATCH (d:Director)-[:DIRECTED]->(m:Movie)\nRETURN d.name, COUNT(m) AS filmography_count\nORDER BY filmography_count DESC\nLIMIT 3",
            "MATCH (d:Director)-[r:DIRECTED]->(m:Movie)\nWITH d, count(m) AS filmographyCount\nORDER BY filmographyCount DESC\nLIMIT 3\nRETURN d.name, filmographyCount"
        ]
    },
    {
        "question": "What is the average rating given by users from Missoula?",
        "schema": "Node properties:\n- **Business**\n  - `address`: STRING Available options: ['301 E Main St', '200 W Pine St', '313 N 1st St W', '1151 W Broadway St', '201 E Front St', '723 California Dr', '121 W Broadway St', '716 N San Mateo Dr', '111 E 5th Ave']\n  - `location`: POINT \n  - `city`: STRING Available options: ['Missoula', 'Burlingame', 'San Mateo']\n  - `state`: STRING Available options: ['MT', 'CA']\n  - `businessId`: STRING Available options: ['b5', 'b3', 'b1', 'b2', 'b4', 'b7', 'b6', 'b8', 'b9']\n  - `name`: STRING Available options: ['Missoula Public Library', \"Ninja Mike's\", 'KettleHouse Brewing Co.', 'Imagine Nation Brewing', 'Market on Front', 'Hanabi', 'Zootown Brew', \"Ducky's Car Wash\", 'Neo4j']\n- **User**\n  - `name`: STRING Available options: ['Will', 'Bob', 'Jenny', 'Angie']\n  - `userId`: STRING Available options: ['u1', 'u2', 'u3', 'u4']\n- **Review**\n  - `date`: DATE Min: 2015-08-29, Max: 2018-09-10\n  - `text`: STRING Available options: ['Not a great selection of books, but fortunately th', \"Best breakfast sandwich at the Farmer's Market. Al\", 'Great IPA selection!', \"Awesome full-service car wash. Love Ducky's!\", \"The world's leading graph database HQ!\"]\n  - `stars`: FLOAT Min: 3.0, Max: 5.0\n  - `reviewId`: STRING Example: \"r7\"\n- **Category**\n  - `name`: STRING Example: \"Library\"\nRelationship properties:\n\nThe relationships:\n(:Business)-[:IN_CATEGORY]->(:Category)\n(:User)-[:WROTE]->(:Review)\n(:Review)-[:REVIEWS]->(:Business)",
        "gold_cypher": "MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business) WHERE b.city = \"Missoula\" RETURN avg(r.stars) AS average_rating",
        "database": "grandstack",
        "full_responses": [
            "```\nMATCH (b:Business)-[r:REVIEWS]->(rev:Review)\nWHERE b.city = 'Missoula'\nRETURN avg(rev.stars) AS averageRating\n```",
            "MATCH (b:Business {city: 'Missoula'})<-[:REVIEWS]-r:Review\nRETURN avg(r.stars)",
            "MATCH (b:Business)-[:IN_CATEGORY]->(c:Category {name: 'Library'})<-[:REVIEWS]->(r:Review)<-[:WROTE]-(u:User {city: 'Missoula'}) \nRETURN AVG(r.stars)",
            "```cypher\nMATCH (u:User)-[r:WROTE]->(rev:Review)\nWHERE u.city = 'Missoula'\nRETURN avg(rev.stars) AS AverageRating\n```",
            "MATCH (b:Business)-[r:REVIEWS]->(rv:Review)\nWHERE b.city = 'Missoula'\nRETURN AVG(rv.stars)"
        ],
        "generated_cyphers": [
            "```\nMATCH (b:Business)-[r:REVIEWS]->(rev:Review)\nWHERE b.city = 'Missoula'\nRETURN avg(rev.stars) AS averageRating\n```",
            "MATCH (b:Business {city: 'Missoula'})<-[:REVIEWS]-r:Review\nRETURN avg(r.stars)",
            "MATCH (b:Business)-[:IN_CATEGORY]->(c:Category {name: 'Library'})<-[:REVIEWS]->(r:Review)<-[:WROTE]-(u:User {city: 'Missoula'}) \nRETURN AVG(r.stars)",
            "```cypher\nMATCH (u:User)-[r:WROTE]->(rev:Review)\nWHERE u.city = 'Missoula'\nRETURN avg(rev.stars) AS AverageRating\n```",
            "MATCH (b:Business)-[r:REVIEWS]->(rv:Review)\nWHERE b.city = 'Missoula'\nRETURN AVG(rv.stars)"
        ]
    },
    {
        "question": "List the first 3 languages spoken in movies released after 2010.",
        "schema": "Node properties:\n- **Movie**\n  - `average_vote`: FLOAT Example: \"7.7\"\n  - `overview`: STRING Example: \"Led by Woody, Andy's toys live happily in his room\"\n  - `revenue`: FLOAT Example: \"3.73554033E8\"\n  - `vote_count`: INTEGER Example: \"5415\"\n  - `tagline`: STRING Example: \"Roll the dice and unleash the excitement!\"\n  - `budget`: INTEGER Example: \"30000000\"\n  - `title`: STRING Example: \"Toy Story\"\n  - `poster_path`: STRING Example: \"/rhIRbceoE9lR4veEXuwCC2wARtG.jpg\"\n  - `imdb_id`: STRING Example: \"tt0114709\"\n  - `status`: STRING Example: \"Released\"\n  - `runtime`: FLOAT Example: \"81.0\"\n  - `popularity`: FLOAT Example: \"21.946943\"\n  - `homepage`: STRING Example: \"http://toystory.disney.com/toy-story\"\n  - `release_date`: DATE Example: \"1995-10-30\"\n  - `id`: INTEGER Min: 862, Max: 31357\n  - `original_title`: STRING Example: \"Toy Story\"\n  - `original_language`: STRING Example: \"en\"\n- **Language**\n  - `id`: STRING Example: \"en\"\n  - `name`: STRING Available options: ['', 'Gaeilge', 'Kiswahili', 'Az\u0259rbaycan', 'Somali', '\u0431\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f \u043c\u043e\u0432\u0430', 'Fulfulde', 'Hausa']\n- **Country**\n  - `id`: STRING Example: \"US\"\n  - `name`: STRING Example: \"United States of America\"\n- **Genre**\n  - `id`: INTEGER Min: 12, Max: 10770\n  - `name`: STRING Example: \"Animation\"\n- **ProductionCompany**\n  - `id`: INTEGER Min: 3, Max: 10201\n  - `name`: STRING Example: \"Pixar Animation Studios\"\n- **Collection**\n  - `name`: STRING Example: \"Toy Story Collection\"\n  - `id`: INTEGER Min: 10, Max: 480160\n  - `backdrop_path`: STRING Example: \"/9FBwqcd9IRruEDUrTdcaafOMKUq.jpg\"\n  - `poster_path`: STRING Example: \"/7G9915LfUQ2lVfwMEEhDsn3kT4B.jpg\"\n- **Person**\n  - `gender`: INTEGER Example: \"2\"\n  - `profile_path`: STRING Example: \"/pQFoyx7rp09CJTAb932F2g8Nlho.jpg\"\n  - `id`: INTEGER Min: 31, Max: 12900\n  - `name`: STRING Example: \"Tom Hanks\"\n- **User**\n  - `id`: INTEGER Min: 27490cf6-22eb-495d-9dd6-902c0f89c627, Max: 4\n- **Keyword**\n  - `id`: INTEGER Min: 931, Max: 9713\n  - `name`: STRING Example: \"jealousy\"\n- **Video**\n  - `tagline`: STRING Example: \"Fresh Fish. Mixed Vegetables.\"\n  - `average_vote`: FLOAT Min: 0.0, Max: 10.0\n  - `overview`: STRING Example: \"Get ready as Bob the Tomato, Larry the Cucumber an\"\n  - `revenue`: FLOAT Min: 0.0, Max: 0.0\n  - `poster_path`: STRING Example: \"/iWahPsY3hsKOizZHgzQcAxv4O3B.jpg\"\n  - `vote_count`: INTEGER Min: 0, Max: 115\n  - `title`: STRING Example: \"Jonah: A VeggieTales Movie\"\n  - `release_date`: DATE Min: 1973-01-12, Max: 2017-03-17\n  - `status`: STRING Available options: ['Released']\n  - `budget`: INTEGER Min: 0, Max: 2219684\n  - `popularity`: FLOAT Min: 0.0, Max: 9.22546\n  - `imdb_id`: STRING Example: \"tt0298388\"\n  - `original_title`: STRING Example: \"Jonah: A VeggieTales Movie\"\n  - `id`: INTEGER Min: 13284, Max: 461088\n  - `runtime`: FLOAT Min: 0.0, Max: 583.0\n  - `original_language`: STRING Example: \"en\"\n  - `homepage`: STRING Example: \"http://www.loosechange911.com/\"\n- **Adult**\n  - `average_vote`: FLOAT Min: 0.0, Max: 6.3\n  - `overview`: STRING Available options: ['A sailor takes an American businessman and his gir', 'The FBI and Texas police make ready to storm the h', 'Electrical Girl centers around a horny young woman', '\u00c1gata suffers from a psychological disorder which ', \"Shane Ryan's sequel to the disturbing Amateur Porn\", 'Australian film about a fictional sub-par Australi', 'Olaf and his mother run a boarding house and a whi', 'A man who returns home to find his wife cheating o', 'An American scientific research facility opens a p']\n  - `revenue`: FLOAT Min: 0.0, Max: 0.0\n  - `poster_path`: STRING Available options: ['/tzVK7nTnzUiVeFSZhOAIHmrgXUS.jpg', '/1VzwIa8HTykNiCCW8PBaJnyTvO8.jpg', '/yTfqRQlJMTAuTNDG01XjNg5KPPg.jpg', '/oP2WvKIWxqSBVHjfYAizFHOqBLG.jpg', '/zpycBSiBFp5Uib6gWJpgEvfOgdn.jpg', '/e7CAc8OadcUoKNPIX86SEPSX7f.jpg', '/jjncR0vECvXVrBvr0A1vLghL4pN.jpg', '/pJLmZBruOmn2c9mYWe3h1xcXaA0.jpg', '/3uv9oaqOJkkdZiQp6r9lf24tkHW.jpg']\n  - `vote_count`: INTEGER Min: 0, Max: 16\n  - `title`: STRING Available options: ['Erotic Nights of the Living Dead', 'Standoff', 'Electrical Girl', 'Diet of Sex', 'Amateur Porn Star Killer 2', 'The Band', 'The Sinful Dwarf', 'Adulterers', 'Half -Life']\n  - `release_date`: DATE Min: 1973-12-20, Max: 2016-01-05\n  - `status`: STRING Available options: ['Released', 'In Production']\n  - `budget`: INTEGER Min: 0, Max: 750000\n  - `popularity`: FLOAT Min: 0.001803, Max: 6.889832\n  - `imdb_id`: STRING Available options: ['tt0079642', 'tt0119931', 'tt0322232', 'tt3094816', 'tt1161951', 'tt1153101', 'tt0070696', 'tt4044464', 'tt2697688']\n  - `original_title`: STRING Available options: ['Le notti erotiche dei morti viventi', 'Standoff', '\u767c\u96fb\u6084\u5b0c\u5a03', 'Diet of Sex', 'Amateur Porn Star Killer 2', 'The Band', 'Dv\u00e6rgen', 'Adulterers', 'Half -Life']\n  - `id`: INTEGER Min: 5422, Max: 448290\n  - `runtime`: FLOAT Min: 0.0, Max: 112.0\n  - `original_language`: STRING Available options: ['it', 'en', 'cn', 'es', 'da']\n  - `tagline`: STRING Available options: ['Trust Will Get You Killed', 'Comedy, food, drama and sex, a lot of sex', 'Humiliation. Rape. Murder. You know the drill.', \"Sex, drugs and Rock 'n Roll\", 'The Mother of all Dwarfsploitation films!', 'Love. Betrayal. Vengeance']\n  - `homepage`: STRING Available options: ['http://www.imdb.com/title/tt0119931/', 'http://www.dietofsex.com/']\n- **Package**\n  - `price`: FLOAT Min: 0.0, Max: 99.99\n  - `duration`: DURATION \n  - `id`: INTEGER Min: 0, Max: 6\n  - `name`: STRING Available options: ['Childrens', 'Bronze', 'Silver', 'Gold', 'Platinum', 'Ultimate', 'Free Trial']\n- **Subscription**\n  - `expiresAt`: DATE_TIME Min: 2020-08-23T16:20:52.383Z, Max: 2020-08-23T16:20:52.383Z\n  - `id`: STRING Available options: ['e74f7163-eace-4169-8043-41627f1fe236']\nRelationship properties:\n- **CAST_FOR**\n  - `credit_id: STRING` Example: \"52fe4459c3a36847f8090d7d\"\n  - `order: INTEGER` Example: \"0\"\n  - `character: STRING` Example: \"Charlie Wilson\"\n  - `cast_id: INTEGER` Example: \"12\"\n- **CREW_FOR**\n  - `credit_id: STRING` Example: \"55e4f0abc3a368140800047e\"\n  - `job: STRING` Example: \"Producer\"\n  - `department: STRING` Example: \"Production\"\n- **RATED**\n  - `timestamp: DATE_TIME` Example: \"2015-03-09T22:49:42Z\"\n  - `rating: FLOAT` Example: \"5.0\"\nThe relationships:\n(:Movie)-[:ORIGINAL_LANGUAGE]->(:Language)\n(:Movie)-[:SPOKEN_IN_LANGUAGE]->(:Language)\n(:Movie)-[:PRODUCED_IN_COUNTRY]->(:Country)\n(:Movie)-[:IN_GENRE]->(:Genre)\n(:Movie)-[:PRODUCED_BY]->(:ProductionCompany)\n(:Movie)-[:HAS_KEYWORD]->(:Keyword)\n(:Movie)-[:IN_COLLECTION]->(:Collection)\n(:Person)-[:CAST_FOR]->(:Movie)\n(:Person)-[:CREW_FOR]->(:Movie)\n(:Person)-[:CREW_FOR]->(:Video)\n(:User)-[:RATED]->(:Movie)\n(:User)-[:RATED]->(:Video)\n(:Video)-[:ORIGINAL_LANGUAGE]->(:Language)\n(:Video)-[:SPOKEN_IN_LANGUAGE]->(:Language)\n(:Video)-[:PRODUCED_IN_COUNTRY]->(:Country)\n(:Video)-[:IN_GENRE]->(:Genre)\n(:Video)-[:PRODUCED_BY]->(:ProductionCompany)\n(:Video)-[:HAS_KEYWORD]->(:Keyword)\n(:Video)-[:IN_COLLECTION]->(:Collection)\n(:Adult)-[:ORIGINAL_LANGUAGE]->(:Language)\n(:Adult)-[:SPOKEN_IN_LANGUAGE]->(:Language)\n(:Adult)-[:PRODUCED_IN_COUNTRY]->(:Country)\n(:Adult)-[:IN_GENRE]->(:Genre)\n(:Adult)-[:PRODUCED_BY]->(:ProductionCompany)\n(:Adult)-[:HAS_KEYWORD]->(:Keyword)\n(:Package)-[:PROVIDES_ACCESS_TO]->(:Genre)\n(:Subscription)-[:FOR_PACKAGE]->(:Package)",
        "gold_cypher": "MATCH (m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l:Language) WHERE m.release_date > date('2010-12-31') RETURN DISTINCT l.name LIMIT 3",
        "database": "eoflix",
        "full_responses": [
            "MATCH (m:Movie)-[r:SPOKEN_IN_LANGUAGE]->(l:Language)\nWHERE m.release_date > '2010-01-01'\nRETURN l.name LIMIT 3",
            "MATCH (m:Movie)-[r:SPOKEN_IN_LANGUAGE]->(l:Language) WHERE m.release_date > '2010-01-01' RETURN l.name LIMIT 3",
            "MATCH (m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l:Language)\nWHERE m.release_date > '2010-01-01'\nRETURN l.name LIMIT 3",
            "MATCH (m:Movie)-[s:SPOKEN_IN_LANGUAGE]->(l:Language)\nWHERE m.release_date > '2010-01-01'\nRETURN l.name ORDER BY l.name LIMIT 3",
            "```\nMATCH (m:Movie)\nWHERE m.release_date > '2010-01-01'\nWITH m\nMATCH (m)-[r:SPOKEN_IN_LANGUAGE]->(l:Language)\nWITH l\nORDER BY l.name\nLIMIT 3\n```"
        ],
        "generated_cyphers": [
            "MATCH (m:Movie)-[r:SPOKEN_IN_LANGUAGE]->(l:Language)\nWHERE m.release_date > '2010-01-01'\nRETURN l.name LIMIT 3",
            "MATCH (m:Movie)-[r:SPOKEN_IN_LANGUAGE]->(l:Language) WHERE m.release_date > '2010-01-01' RETURN l.name LIMIT 3",
            "MATCH (m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l:Language)\nWHERE m.release_date > '2010-01-01'\nRETURN l.name LIMIT 3",
            "MATCH (m:Movie)-[s:SPOKEN_IN_LANGUAGE]->(l:Language)\nWHERE m.release_date > '2010-01-01'\nRETURN l.name ORDER BY l.name LIMIT 3",
            "```\nMATCH (m:Movie)\nWHERE m.release_date > '2010-01-01'\nWITH m\nMATCH (m)-[r:SPOKEN_IN_LANGUAGE]->(l:Language)\nWITH l\nORDER BY l.name\nLIMIT 3\n```"
        ]
    },
    {
        "question": "What are the top 5 movies with a release date on or after '2000-01-01'?",
        "schema": "Node properties:\n- **Movie**\n  - `average_vote`: FLOAT Example: \"7.7\"\n  - `overview`: STRING Example: \"Led by Woody, Andy's toys live happily in his room\"\n  - `revenue`: FLOAT Example: \"3.73554033E8\"\n  - `vote_count`: INTEGER Example: \"5415\"\n  - `tagline`: STRING Example: \"Roll the dice and unleash the excitement!\"\n  - `budget`: INTEGER Example: \"30000000\"\n  - `title`: STRING Example: \"Toy Story\"\n  - `poster_path`: STRING Example: \"/rhIRbceoE9lR4veEXuwCC2wARtG.jpg\"\n  - `imdb_id`: STRING Example: \"tt0114709\"\n  - `status`: STRING Example: \"Released\"\n  - `runtime`: FLOAT Example: \"81.0\"\n  - `popularity`: FLOAT Example: \"21.946943\"\n  - `homepage`: STRING Example: \"http://toystory.disney.com/toy-story\"\n  - `release_date`: DATE Example: \"1995-10-30\"\n  - `id`: INTEGER Min: 862, Max: 31357\n  - `original_title`: STRING Example: \"Toy Story\"\n  - `original_language`: STRING Example: \"en\"\n- **Language**\n  - `id`: STRING Example: \"en\"\n  - `name`: STRING Available options: ['', 'Gaeilge', 'Kiswahili', 'Az\u0259rbaycan', 'Somali', '\u0431\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f \u043c\u043e\u0432\u0430', 'Fulfulde', 'Hausa']\n- **Country**\n  - `id`: STRING Example: \"US\"\n  - `name`: STRING Example: \"United States of America\"\n- **Genre**\n  - `id`: INTEGER Min: 12, Max: 10770\n  - `name`: STRING Example: \"Animation\"\n- **ProductionCompany**\n  - `id`: INTEGER Min: 3, Max: 10201\n  - `name`: STRING Example: \"Pixar Animation Studios\"\n- **Collection**\n  - `name`: STRING Example: \"Toy Story Collection\"\n  - `id`: INTEGER Min: 10, Max: 480160\n  - `backdrop_path`: STRING Example: \"/9FBwqcd9IRruEDUrTdcaafOMKUq.jpg\"\n  - `poster_path`: STRING Example: \"/7G9915LfUQ2lVfwMEEhDsn3kT4B.jpg\"\n- **Person**\n  - `gender`: INTEGER Example: \"2\"\n  - `profile_path`: STRING Example: \"/pQFoyx7rp09CJTAb932F2g8Nlho.jpg\"\n  - `id`: INTEGER Min: 31, Max: 12900\n  - `name`: STRING Example: \"Tom Hanks\"\n- **User**\n  - `id`: INTEGER Min: 27490cf6-22eb-495d-9dd6-902c0f89c627, Max: 4\n- **Keyword**\n  - `id`: INTEGER Min: 931, Max: 9713\n  - `name`: STRING Example: \"jealousy\"\n- **Video**\n  - `tagline`: STRING Example: \"Fresh Fish. Mixed Vegetables.\"\n  - `average_vote`: FLOAT Min: 0.0, Max: 10.0\n  - `overview`: STRING Example: \"Get ready as Bob the Tomato, Larry the Cucumber an\"\n  - `revenue`: FLOAT Min: 0.0, Max: 0.0\n  - `poster_path`: STRING Example: \"/iWahPsY3hsKOizZHgzQcAxv4O3B.jpg\"\n  - `vote_count`: INTEGER Min: 0, Max: 115\n  - `title`: STRING Example: \"Jonah: A VeggieTales Movie\"\n  - `release_date`: DATE Min: 1973-01-12, Max: 2017-03-17\n  - `status`: STRING Available options: ['Released']\n  - `budget`: INTEGER Min: 0, Max: 2219684\n  - `popularity`: FLOAT Min: 0.0, Max: 9.22546\n  - `imdb_id`: STRING Example: \"tt0298388\"\n  - `original_title`: STRING Example: \"Jonah: A VeggieTales Movie\"\n  - `id`: INTEGER Min: 13284, Max: 461088\n  - `runtime`: FLOAT Min: 0.0, Max: 583.0\n  - `original_language`: STRING Example: \"en\"\n  - `homepage`: STRING Example: \"http://www.loosechange911.com/\"\n- **Adult**\n  - `average_vote`: FLOAT Min: 0.0, Max: 6.3\n  - `overview`: STRING Available options: ['A sailor takes an American businessman and his gir', 'The FBI and Texas police make ready to storm the h', 'Electrical Girl centers around a horny young woman', '\u00c1gata suffers from a psychological disorder which ', \"Shane Ryan's sequel to the disturbing Amateur Porn\", 'Australian film about a fictional sub-par Australi', 'Olaf and his mother run a boarding house and a whi', 'A man who returns home to find his wife cheating o', 'An American scientific research facility opens a p']\n  - `revenue`: FLOAT Min: 0.0, Max: 0.0\n  - `poster_path`: STRING Available options: ['/tzVK7nTnzUiVeFSZhOAIHmrgXUS.jpg', '/1VzwIa8HTykNiCCW8PBaJnyTvO8.jpg', '/yTfqRQlJMTAuTNDG01XjNg5KPPg.jpg', '/oP2WvKIWxqSBVHjfYAizFHOqBLG.jpg', '/zpycBSiBFp5Uib6gWJpgEvfOgdn.jpg', '/e7CAc8OadcUoKNPIX86SEPSX7f.jpg', '/jjncR0vECvXVrBvr0A1vLghL4pN.jpg', '/pJLmZBruOmn2c9mYWe3h1xcXaA0.jpg', '/3uv9oaqOJkkdZiQp6r9lf24tkHW.jpg']\n  - `vote_count`: INTEGER Min: 0, Max: 16\n  - `title`: STRING Available options: ['Erotic Nights of the Living Dead', 'Standoff', 'Electrical Girl', 'Diet of Sex', 'Amateur Porn Star Killer 2', 'The Band', 'The Sinful Dwarf', 'Adulterers', 'Half -Life']\n  - `release_date`: DATE Min: 1973-12-20, Max: 2016-01-05\n  - `status`: STRING Available options: ['Released', 'In Production']\n  - `budget`: INTEGER Min: 0, Max: 750000\n  - `popularity`: FLOAT Min: 0.001803, Max: 6.889832\n  - `imdb_id`: STRING Available options: ['tt0079642', 'tt0119931', 'tt0322232', 'tt3094816', 'tt1161951', 'tt1153101', 'tt0070696', 'tt4044464', 'tt2697688']\n  - `original_title`: STRING Available options: ['Le notti erotiche dei morti viventi', 'Standoff', '\u767c\u96fb\u6084\u5b0c\u5a03', 'Diet of Sex', 'Amateur Porn Star Killer 2', 'The Band', 'Dv\u00e6rgen', 'Adulterers', 'Half -Life']\n  - `id`: INTEGER Min: 5422, Max: 448290\n  - `runtime`: FLOAT Min: 0.0, Max: 112.0\n  - `original_language`: STRING Available options: ['it', 'en', 'cn', 'es', 'da']\n  - `tagline`: STRING Available options: ['Trust Will Get You Killed', 'Comedy, food, drama and sex, a lot of sex', 'Humiliation. Rape. Murder. You know the drill.', \"Sex, drugs and Rock 'n Roll\", 'The Mother of all Dwarfsploitation films!', 'Love. Betrayal. Vengeance']\n  - `homepage`: STRING Available options: ['http://www.imdb.com/title/tt0119931/', 'http://www.dietofsex.com/']\n- **Package**\n  - `price`: FLOAT Min: 0.0, Max: 99.99\n  - `duration`: DURATION \n  - `id`: INTEGER Min: 0, Max: 6\n  - `name`: STRING Available options: ['Childrens', 'Bronze', 'Silver', 'Gold', 'Platinum', 'Ultimate', 'Free Trial']\n- **Subscription**\n  - `expiresAt`: DATE_TIME Min: 2020-08-23T16:20:52.383Z, Max: 2020-08-23T16:20:52.383Z\n  - `id`: STRING Available options: ['e74f7163-eace-4169-8043-41627f1fe236']\nRelationship properties:\n- **CAST_FOR**\n  - `credit_id: STRING` Example: \"52fe4459c3a36847f8090d7d\"\n  - `order: INTEGER` Example: \"0\"\n  - `character: STRING` Example: \"Charlie Wilson\"\n  - `cast_id: INTEGER` Example: \"12\"\n- **CREW_FOR**\n  - `credit_id: STRING` Example: \"55e4f0abc3a368140800047e\"\n  - `job: STRING` Example: \"Producer\"\n  - `department: STRING` Example: \"Production\"\n- **RATED**\n  - `timestamp: DATE_TIME` Example: \"2015-03-09T22:49:42Z\"\n  - `rating: FLOAT` Example: \"5.0\"\nThe relationships:\n(:Movie)-[:ORIGINAL_LANGUAGE]->(:Language)\n(:Movie)-[:SPOKEN_IN_LANGUAGE]->(:Language)\n(:Movie)-[:PRODUCED_IN_COUNTRY]->(:Country)\n(:Movie)-[:IN_GENRE]->(:Genre)\n(:Movie)-[:PRODUCED_BY]->(:ProductionCompany)\n(:Movie)-[:HAS_KEYWORD]->(:Keyword)\n(:Movie)-[:IN_COLLECTION]->(:Collection)\n(:Person)-[:CAST_FOR]->(:Movie)\n(:Person)-[:CREW_FOR]->(:Movie)\n(:Person)-[:CREW_FOR]->(:Video)\n(:User)-[:RATED]->(:Movie)\n(:User)-[:RATED]->(:Video)\n(:Video)-[:ORIGINAL_LANGUAGE]->(:Language)\n(:Video)-[:SPOKEN_IN_LANGUAGE]->(:Language)\n(:Video)-[:PRODUCED_IN_COUNTRY]->(:Country)\n(:Video)-[:IN_GENRE]->(:Genre)\n(:Video)-[:PRODUCED_BY]->(:ProductionCompany)\n(:Video)-[:HAS_KEYWORD]->(:Keyword)\n(:Video)-[:IN_COLLECTION]->(:Collection)\n(:Adult)-[:ORIGINAL_LANGUAGE]->(:Language)\n(:Adult)-[:SPOKEN_IN_LANGUAGE]->(:Language)\n(:Adult)-[:PRODUCED_IN_COUNTRY]->(:Country)\n(:Adult)-[:IN_GENRE]->(:Genre)\n(:Adult)-[:PRODUCED_BY]->(:ProductionCompany)\n(:Adult)-[:HAS_KEYWORD]->(:Keyword)\n(:Package)-[:PROVIDES_ACCESS_TO]->(:Genre)\n(:Subscription)-[:FOR_PACKAGE]->(:Package)",
        "gold_cypher": "MATCH (m:Movie) WHERE m.release_date >= date('2000-01-01') RETURN m.title, m.release_date ORDER BY m.popularity DESC LIMIT 5",
        "database": "eoflix",
        "full_responses": [
            "MATCH (m:Movie)\nWHERE m.release_date >= '2000-01-01'\nRETURN m.title, m.release_date ORDER BY m.release_date DESC LIMIT 5",
            "MATCH (m:Movie)\nWHERE m.release_date >= '2000-01-01'\nRETURN m.title, m.release_date LIMIT 5",
            "MATCH (m:Movie)-[r:RELEASED]-(n:Movie) WHERE n.release_date >= '2000-01-01' RETURN n.title, n.release_date LIMIT 5",
            "```cypher\nMATCH (m:Movie)-[r:RELEASED]->()\nWHERE m.release_date >= '2000-01-01'\nRETURN m.title, m.revenue, m.vote_count, m.vote_average, m.popularity\nORDER BY m.popularity DESC\nLIMIT 5\n```",
            "MATCH (m:Movie) WHERE m.release_date >= '2000-01-01' RETURN m ORDER BY m.release_date DESC LIMIT 5"
        ],
        "generated_cyphers": [
            "MATCH (m:Movie)\nWHERE m.release_date >= '2000-01-01'\nRETURN m.title, m.release_date ORDER BY m.release_date DESC LIMIT 5",
            "MATCH (m:Movie)\nWHERE m.release_date >= '2000-01-01'\nRETURN m.title, m.release_date LIMIT 5",
            "MATCH (m:Movie)-[r:RELEASED]-(n:Movie) WHERE n.release_date >= '2000-01-01' RETURN n.title, n.release_date LIMIT 5",
            "```cypher\nMATCH (m:Movie)-[r:RELEASED]->()\nWHERE m.release_date >= '2000-01-01'\nRETURN m.title, m.revenue, m.vote_count, m.vote_average, m.popularity\nORDER BY m.popularity DESC\nLIMIT 5\n```",
            "MATCH (m:Movie) WHERE m.release_date >= '2000-01-01' RETURN m ORDER BY m.release_date DESC LIMIT 5"
        ]
    }
]